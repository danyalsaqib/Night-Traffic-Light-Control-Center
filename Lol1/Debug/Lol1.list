
Lol1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800b378  0800b378  0001b378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b454  0800b454  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800b454  0800b454  0001b454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b45c  0800b45c  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b45c  0800b45c  0001b45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b460  0800b460  0001b460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800b464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047a0  20000094  0800b4f8  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004834  0800b4f8  00024834  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000237f3  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004b23  00000000  00000000  000438b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001948  00000000  00000000  000483e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001730  00000000  00000000  00049d28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002640d  00000000  00000000  0004b458  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017b31  00000000  00000000  00071865  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d9038  00000000  00000000  00089396  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001623ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b8c  00000000  00000000  0016244c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b360 	.word	0x0800b360

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800b360 	.word	0x0800b360

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__gedf2>:
 8000548:	f04f 3cff 	mov.w	ip, #4294967295
 800054c:	e006      	b.n	800055c <__cmpdf2+0x4>
 800054e:	bf00      	nop

08000550 <__ledf2>:
 8000550:	f04f 0c01 	mov.w	ip, #1
 8000554:	e002      	b.n	800055c <__cmpdf2+0x4>
 8000556:	bf00      	nop

08000558 <__cmpdf2>:
 8000558:	f04f 0c01 	mov.w	ip, #1
 800055c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000560:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000564:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000568:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800056c:	bf18      	it	ne
 800056e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000572:	d01b      	beq.n	80005ac <__cmpdf2+0x54>
 8000574:	b001      	add	sp, #4
 8000576:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800057a:	bf0c      	ite	eq
 800057c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000580:	ea91 0f03 	teqne	r1, r3
 8000584:	bf02      	ittt	eq
 8000586:	ea90 0f02 	teqeq	r0, r2
 800058a:	2000      	moveq	r0, #0
 800058c:	4770      	bxeq	lr
 800058e:	f110 0f00 	cmn.w	r0, #0
 8000592:	ea91 0f03 	teq	r1, r3
 8000596:	bf58      	it	pl
 8000598:	4299      	cmppl	r1, r3
 800059a:	bf08      	it	eq
 800059c:	4290      	cmpeq	r0, r2
 800059e:	bf2c      	ite	cs
 80005a0:	17d8      	asrcs	r0, r3, #31
 80005a2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005a6:	f040 0001 	orr.w	r0, r0, #1
 80005aa:	4770      	bx	lr
 80005ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005b4:	d102      	bne.n	80005bc <__cmpdf2+0x64>
 80005b6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005ba:	d107      	bne.n	80005cc <__cmpdf2+0x74>
 80005bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005c4:	d1d6      	bne.n	8000574 <__cmpdf2+0x1c>
 80005c6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005ca:	d0d3      	beq.n	8000574 <__cmpdf2+0x1c>
 80005cc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <__aeabi_cdrcmple>:
 80005d4:	4684      	mov	ip, r0
 80005d6:	4610      	mov	r0, r2
 80005d8:	4662      	mov	r2, ip
 80005da:	468c      	mov	ip, r1
 80005dc:	4619      	mov	r1, r3
 80005de:	4663      	mov	r3, ip
 80005e0:	e000      	b.n	80005e4 <__aeabi_cdcmpeq>
 80005e2:	bf00      	nop

080005e4 <__aeabi_cdcmpeq>:
 80005e4:	b501      	push	{r0, lr}
 80005e6:	f7ff ffb7 	bl	8000558 <__cmpdf2>
 80005ea:	2800      	cmp	r0, #0
 80005ec:	bf48      	it	mi
 80005ee:	f110 0f00 	cmnmi.w	r0, #0
 80005f2:	bd01      	pop	{r0, pc}

080005f4 <__aeabi_dcmpeq>:
 80005f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f8:	f7ff fff4 	bl	80005e4 <__aeabi_cdcmpeq>
 80005fc:	bf0c      	ite	eq
 80005fe:	2001      	moveq	r0, #1
 8000600:	2000      	movne	r0, #0
 8000602:	f85d fb08 	ldr.w	pc, [sp], #8
 8000606:	bf00      	nop

08000608 <__aeabi_dcmplt>:
 8000608:	f84d ed08 	str.w	lr, [sp, #-8]!
 800060c:	f7ff ffea 	bl	80005e4 <__aeabi_cdcmpeq>
 8000610:	bf34      	ite	cc
 8000612:	2001      	movcc	r0, #1
 8000614:	2000      	movcs	r0, #0
 8000616:	f85d fb08 	ldr.w	pc, [sp], #8
 800061a:	bf00      	nop

0800061c <__aeabi_dcmple>:
 800061c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000620:	f7ff ffe0 	bl	80005e4 <__aeabi_cdcmpeq>
 8000624:	bf94      	ite	ls
 8000626:	2001      	movls	r0, #1
 8000628:	2000      	movhi	r0, #0
 800062a:	f85d fb08 	ldr.w	pc, [sp], #8
 800062e:	bf00      	nop

08000630 <__aeabi_dcmpge>:
 8000630:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000634:	f7ff ffce 	bl	80005d4 <__aeabi_cdrcmple>
 8000638:	bf94      	ite	ls
 800063a:	2001      	movls	r0, #1
 800063c:	2000      	movhi	r0, #0
 800063e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000642:	bf00      	nop

08000644 <__aeabi_dcmpgt>:
 8000644:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000648:	f7ff ffc4 	bl	80005d4 <__aeabi_cdrcmple>
 800064c:	bf34      	ite	cc
 800064e:	2001      	movcc	r0, #1
 8000650:	2000      	movcs	r0, #0
 8000652:	f85d fb08 	ldr.w	pc, [sp], #8
 8000656:	bf00      	nop

08000658 <__aeabi_uldivmod>:
 8000658:	b953      	cbnz	r3, 8000670 <__aeabi_uldivmod+0x18>
 800065a:	b94a      	cbnz	r2, 8000670 <__aeabi_uldivmod+0x18>
 800065c:	2900      	cmp	r1, #0
 800065e:	bf08      	it	eq
 8000660:	2800      	cmpeq	r0, #0
 8000662:	bf1c      	itt	ne
 8000664:	f04f 31ff 	movne.w	r1, #4294967295
 8000668:	f04f 30ff 	movne.w	r0, #4294967295
 800066c:	f000 b972 	b.w	8000954 <__aeabi_idiv0>
 8000670:	f1ad 0c08 	sub.w	ip, sp, #8
 8000674:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000678:	f000 f806 	bl	8000688 <__udivmoddi4>
 800067c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000684:	b004      	add	sp, #16
 8000686:	4770      	bx	lr

08000688 <__udivmoddi4>:
 8000688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800068c:	9e08      	ldr	r6, [sp, #32]
 800068e:	4604      	mov	r4, r0
 8000690:	4688      	mov	r8, r1
 8000692:	2b00      	cmp	r3, #0
 8000694:	d14b      	bne.n	800072e <__udivmoddi4+0xa6>
 8000696:	428a      	cmp	r2, r1
 8000698:	4615      	mov	r5, r2
 800069a:	d967      	bls.n	800076c <__udivmoddi4+0xe4>
 800069c:	fab2 f282 	clz	r2, r2
 80006a0:	b14a      	cbz	r2, 80006b6 <__udivmoddi4+0x2e>
 80006a2:	f1c2 0720 	rsb	r7, r2, #32
 80006a6:	fa01 f302 	lsl.w	r3, r1, r2
 80006aa:	fa20 f707 	lsr.w	r7, r0, r7
 80006ae:	4095      	lsls	r5, r2
 80006b0:	ea47 0803 	orr.w	r8, r7, r3
 80006b4:	4094      	lsls	r4, r2
 80006b6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006ba:	0c23      	lsrs	r3, r4, #16
 80006bc:	fbb8 f7fe 	udiv	r7, r8, lr
 80006c0:	fa1f fc85 	uxth.w	ip, r5
 80006c4:	fb0e 8817 	mls	r8, lr, r7, r8
 80006c8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006cc:	fb07 f10c 	mul.w	r1, r7, ip
 80006d0:	4299      	cmp	r1, r3
 80006d2:	d909      	bls.n	80006e8 <__udivmoddi4+0x60>
 80006d4:	18eb      	adds	r3, r5, r3
 80006d6:	f107 30ff 	add.w	r0, r7, #4294967295
 80006da:	f080 811b 	bcs.w	8000914 <__udivmoddi4+0x28c>
 80006de:	4299      	cmp	r1, r3
 80006e0:	f240 8118 	bls.w	8000914 <__udivmoddi4+0x28c>
 80006e4:	3f02      	subs	r7, #2
 80006e6:	442b      	add	r3, r5
 80006e8:	1a5b      	subs	r3, r3, r1
 80006ea:	b2a4      	uxth	r4, r4
 80006ec:	fbb3 f0fe 	udiv	r0, r3, lr
 80006f0:	fb0e 3310 	mls	r3, lr, r0, r3
 80006f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006f8:	fb00 fc0c 	mul.w	ip, r0, ip
 80006fc:	45a4      	cmp	ip, r4
 80006fe:	d909      	bls.n	8000714 <__udivmoddi4+0x8c>
 8000700:	192c      	adds	r4, r5, r4
 8000702:	f100 33ff 	add.w	r3, r0, #4294967295
 8000706:	f080 8107 	bcs.w	8000918 <__udivmoddi4+0x290>
 800070a:	45a4      	cmp	ip, r4
 800070c:	f240 8104 	bls.w	8000918 <__udivmoddi4+0x290>
 8000710:	3802      	subs	r0, #2
 8000712:	442c      	add	r4, r5
 8000714:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000718:	eba4 040c 	sub.w	r4, r4, ip
 800071c:	2700      	movs	r7, #0
 800071e:	b11e      	cbz	r6, 8000728 <__udivmoddi4+0xa0>
 8000720:	40d4      	lsrs	r4, r2
 8000722:	2300      	movs	r3, #0
 8000724:	e9c6 4300 	strd	r4, r3, [r6]
 8000728:	4639      	mov	r1, r7
 800072a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072e:	428b      	cmp	r3, r1
 8000730:	d909      	bls.n	8000746 <__udivmoddi4+0xbe>
 8000732:	2e00      	cmp	r6, #0
 8000734:	f000 80eb 	beq.w	800090e <__udivmoddi4+0x286>
 8000738:	2700      	movs	r7, #0
 800073a:	e9c6 0100 	strd	r0, r1, [r6]
 800073e:	4638      	mov	r0, r7
 8000740:	4639      	mov	r1, r7
 8000742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000746:	fab3 f783 	clz	r7, r3
 800074a:	2f00      	cmp	r7, #0
 800074c:	d147      	bne.n	80007de <__udivmoddi4+0x156>
 800074e:	428b      	cmp	r3, r1
 8000750:	d302      	bcc.n	8000758 <__udivmoddi4+0xd0>
 8000752:	4282      	cmp	r2, r0
 8000754:	f200 80fa 	bhi.w	800094c <__udivmoddi4+0x2c4>
 8000758:	1a84      	subs	r4, r0, r2
 800075a:	eb61 0303 	sbc.w	r3, r1, r3
 800075e:	2001      	movs	r0, #1
 8000760:	4698      	mov	r8, r3
 8000762:	2e00      	cmp	r6, #0
 8000764:	d0e0      	beq.n	8000728 <__udivmoddi4+0xa0>
 8000766:	e9c6 4800 	strd	r4, r8, [r6]
 800076a:	e7dd      	b.n	8000728 <__udivmoddi4+0xa0>
 800076c:	b902      	cbnz	r2, 8000770 <__udivmoddi4+0xe8>
 800076e:	deff      	udf	#255	; 0xff
 8000770:	fab2 f282 	clz	r2, r2
 8000774:	2a00      	cmp	r2, #0
 8000776:	f040 808f 	bne.w	8000898 <__udivmoddi4+0x210>
 800077a:	1b49      	subs	r1, r1, r5
 800077c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000780:	fa1f f885 	uxth.w	r8, r5
 8000784:	2701      	movs	r7, #1
 8000786:	fbb1 fcfe 	udiv	ip, r1, lr
 800078a:	0c23      	lsrs	r3, r4, #16
 800078c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000790:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000794:	fb08 f10c 	mul.w	r1, r8, ip
 8000798:	4299      	cmp	r1, r3
 800079a:	d907      	bls.n	80007ac <__udivmoddi4+0x124>
 800079c:	18eb      	adds	r3, r5, r3
 800079e:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007a2:	d202      	bcs.n	80007aa <__udivmoddi4+0x122>
 80007a4:	4299      	cmp	r1, r3
 80007a6:	f200 80cd 	bhi.w	8000944 <__udivmoddi4+0x2bc>
 80007aa:	4684      	mov	ip, r0
 80007ac:	1a59      	subs	r1, r3, r1
 80007ae:	b2a3      	uxth	r3, r4
 80007b0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007b4:	fb0e 1410 	mls	r4, lr, r0, r1
 80007b8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80007bc:	fb08 f800 	mul.w	r8, r8, r0
 80007c0:	45a0      	cmp	r8, r4
 80007c2:	d907      	bls.n	80007d4 <__udivmoddi4+0x14c>
 80007c4:	192c      	adds	r4, r5, r4
 80007c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80007ca:	d202      	bcs.n	80007d2 <__udivmoddi4+0x14a>
 80007cc:	45a0      	cmp	r8, r4
 80007ce:	f200 80b6 	bhi.w	800093e <__udivmoddi4+0x2b6>
 80007d2:	4618      	mov	r0, r3
 80007d4:	eba4 0408 	sub.w	r4, r4, r8
 80007d8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80007dc:	e79f      	b.n	800071e <__udivmoddi4+0x96>
 80007de:	f1c7 0c20 	rsb	ip, r7, #32
 80007e2:	40bb      	lsls	r3, r7
 80007e4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80007e8:	ea4e 0e03 	orr.w	lr, lr, r3
 80007ec:	fa01 f407 	lsl.w	r4, r1, r7
 80007f0:	fa20 f50c 	lsr.w	r5, r0, ip
 80007f4:	fa21 f30c 	lsr.w	r3, r1, ip
 80007f8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80007fc:	4325      	orrs	r5, r4
 80007fe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000802:	0c2c      	lsrs	r4, r5, #16
 8000804:	fb08 3319 	mls	r3, r8, r9, r3
 8000808:	fa1f fa8e 	uxth.w	sl, lr
 800080c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000810:	fb09 f40a 	mul.w	r4, r9, sl
 8000814:	429c      	cmp	r4, r3
 8000816:	fa02 f207 	lsl.w	r2, r2, r7
 800081a:	fa00 f107 	lsl.w	r1, r0, r7
 800081e:	d90b      	bls.n	8000838 <__udivmoddi4+0x1b0>
 8000820:	eb1e 0303 	adds.w	r3, lr, r3
 8000824:	f109 30ff 	add.w	r0, r9, #4294967295
 8000828:	f080 8087 	bcs.w	800093a <__udivmoddi4+0x2b2>
 800082c:	429c      	cmp	r4, r3
 800082e:	f240 8084 	bls.w	800093a <__udivmoddi4+0x2b2>
 8000832:	f1a9 0902 	sub.w	r9, r9, #2
 8000836:	4473      	add	r3, lr
 8000838:	1b1b      	subs	r3, r3, r4
 800083a:	b2ad      	uxth	r5, r5
 800083c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000840:	fb08 3310 	mls	r3, r8, r0, r3
 8000844:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000848:	fb00 fa0a 	mul.w	sl, r0, sl
 800084c:	45a2      	cmp	sl, r4
 800084e:	d908      	bls.n	8000862 <__udivmoddi4+0x1da>
 8000850:	eb1e 0404 	adds.w	r4, lr, r4
 8000854:	f100 33ff 	add.w	r3, r0, #4294967295
 8000858:	d26b      	bcs.n	8000932 <__udivmoddi4+0x2aa>
 800085a:	45a2      	cmp	sl, r4
 800085c:	d969      	bls.n	8000932 <__udivmoddi4+0x2aa>
 800085e:	3802      	subs	r0, #2
 8000860:	4474      	add	r4, lr
 8000862:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000866:	fba0 8902 	umull	r8, r9, r0, r2
 800086a:	eba4 040a 	sub.w	r4, r4, sl
 800086e:	454c      	cmp	r4, r9
 8000870:	46c2      	mov	sl, r8
 8000872:	464b      	mov	r3, r9
 8000874:	d354      	bcc.n	8000920 <__udivmoddi4+0x298>
 8000876:	d051      	beq.n	800091c <__udivmoddi4+0x294>
 8000878:	2e00      	cmp	r6, #0
 800087a:	d069      	beq.n	8000950 <__udivmoddi4+0x2c8>
 800087c:	ebb1 050a 	subs.w	r5, r1, sl
 8000880:	eb64 0403 	sbc.w	r4, r4, r3
 8000884:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000888:	40fd      	lsrs	r5, r7
 800088a:	40fc      	lsrs	r4, r7
 800088c:	ea4c 0505 	orr.w	r5, ip, r5
 8000890:	e9c6 5400 	strd	r5, r4, [r6]
 8000894:	2700      	movs	r7, #0
 8000896:	e747      	b.n	8000728 <__udivmoddi4+0xa0>
 8000898:	f1c2 0320 	rsb	r3, r2, #32
 800089c:	fa20 f703 	lsr.w	r7, r0, r3
 80008a0:	4095      	lsls	r5, r2
 80008a2:	fa01 f002 	lsl.w	r0, r1, r2
 80008a6:	fa21 f303 	lsr.w	r3, r1, r3
 80008aa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80008ae:	4338      	orrs	r0, r7
 80008b0:	0c01      	lsrs	r1, r0, #16
 80008b2:	fbb3 f7fe 	udiv	r7, r3, lr
 80008b6:	fa1f f885 	uxth.w	r8, r5
 80008ba:	fb0e 3317 	mls	r3, lr, r7, r3
 80008be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008c2:	fb07 f308 	mul.w	r3, r7, r8
 80008c6:	428b      	cmp	r3, r1
 80008c8:	fa04 f402 	lsl.w	r4, r4, r2
 80008cc:	d907      	bls.n	80008de <__udivmoddi4+0x256>
 80008ce:	1869      	adds	r1, r5, r1
 80008d0:	f107 3cff 	add.w	ip, r7, #4294967295
 80008d4:	d22f      	bcs.n	8000936 <__udivmoddi4+0x2ae>
 80008d6:	428b      	cmp	r3, r1
 80008d8:	d92d      	bls.n	8000936 <__udivmoddi4+0x2ae>
 80008da:	3f02      	subs	r7, #2
 80008dc:	4429      	add	r1, r5
 80008de:	1acb      	subs	r3, r1, r3
 80008e0:	b281      	uxth	r1, r0
 80008e2:	fbb3 f0fe 	udiv	r0, r3, lr
 80008e6:	fb0e 3310 	mls	r3, lr, r0, r3
 80008ea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008ee:	fb00 f308 	mul.w	r3, r0, r8
 80008f2:	428b      	cmp	r3, r1
 80008f4:	d907      	bls.n	8000906 <__udivmoddi4+0x27e>
 80008f6:	1869      	adds	r1, r5, r1
 80008f8:	f100 3cff 	add.w	ip, r0, #4294967295
 80008fc:	d217      	bcs.n	800092e <__udivmoddi4+0x2a6>
 80008fe:	428b      	cmp	r3, r1
 8000900:	d915      	bls.n	800092e <__udivmoddi4+0x2a6>
 8000902:	3802      	subs	r0, #2
 8000904:	4429      	add	r1, r5
 8000906:	1ac9      	subs	r1, r1, r3
 8000908:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800090c:	e73b      	b.n	8000786 <__udivmoddi4+0xfe>
 800090e:	4637      	mov	r7, r6
 8000910:	4630      	mov	r0, r6
 8000912:	e709      	b.n	8000728 <__udivmoddi4+0xa0>
 8000914:	4607      	mov	r7, r0
 8000916:	e6e7      	b.n	80006e8 <__udivmoddi4+0x60>
 8000918:	4618      	mov	r0, r3
 800091a:	e6fb      	b.n	8000714 <__udivmoddi4+0x8c>
 800091c:	4541      	cmp	r1, r8
 800091e:	d2ab      	bcs.n	8000878 <__udivmoddi4+0x1f0>
 8000920:	ebb8 0a02 	subs.w	sl, r8, r2
 8000924:	eb69 020e 	sbc.w	r2, r9, lr
 8000928:	3801      	subs	r0, #1
 800092a:	4613      	mov	r3, r2
 800092c:	e7a4      	b.n	8000878 <__udivmoddi4+0x1f0>
 800092e:	4660      	mov	r0, ip
 8000930:	e7e9      	b.n	8000906 <__udivmoddi4+0x27e>
 8000932:	4618      	mov	r0, r3
 8000934:	e795      	b.n	8000862 <__udivmoddi4+0x1da>
 8000936:	4667      	mov	r7, ip
 8000938:	e7d1      	b.n	80008de <__udivmoddi4+0x256>
 800093a:	4681      	mov	r9, r0
 800093c:	e77c      	b.n	8000838 <__udivmoddi4+0x1b0>
 800093e:	3802      	subs	r0, #2
 8000940:	442c      	add	r4, r5
 8000942:	e747      	b.n	80007d4 <__udivmoddi4+0x14c>
 8000944:	f1ac 0c02 	sub.w	ip, ip, #2
 8000948:	442b      	add	r3, r5
 800094a:	e72f      	b.n	80007ac <__udivmoddi4+0x124>
 800094c:	4638      	mov	r0, r7
 800094e:	e708      	b.n	8000762 <__udivmoddi4+0xda>
 8000950:	4637      	mov	r7, r6
 8000952:	e6e9      	b.n	8000728 <__udivmoddi4+0xa0>

08000954 <__aeabi_idiv0>:
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop

08000958 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	4a07      	ldr	r2, [pc, #28]	; (8000984 <vApplicationGetIdleTaskMemory+0x2c>)
 8000968:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	4a06      	ldr	r2, [pc, #24]	; (8000988 <vApplicationGetIdleTaskMemory+0x30>)
 800096e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2280      	movs	r2, #128	; 0x80
 8000974:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000976:	bf00      	nop
 8000978:	3714      	adds	r7, #20
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	200000b0 	.word	0x200000b0
 8000988:	20000104 	.word	0x20000104

0800098c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800098c:	b5b0      	push	{r4, r5, r7, lr}
 800098e:	b098      	sub	sp, #96	; 0x60
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000992:	f000 fd7b 	bl	800148c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000996:	f000 f85b 	bl	8000a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099a:	f000 f941 	bl	8000c20 <MX_GPIO_Init>
  MX_I2S3_Init();
 800099e:	f000 f8d9 	bl	8000b54 <MX_I2S3_Init>
  MX_SPI1_Init();
 80009a2:	f000 f907 	bl	8000bb4 <MX_SPI1_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of SensorState */
  osSemaphoreDef(SensorState);
 80009a6:	2300      	movs	r3, #0
 80009a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80009aa:	2300      	movs	r3, #0
 80009ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  SensorStateHandle = osSemaphoreCreate(osSemaphore(SensorState), 1);
 80009ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009b2:	2101      	movs	r1, #1
 80009b4:	4618      	mov	r0, r3
 80009b6:	f007 fba0 	bl	80080fa <osSemaphoreCreate>
 80009ba:	4602      	mov	r2, r0
 80009bc:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <main+0xa8>)
 80009be:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of OverrideSwitch */
  osThreadDef(OverrideSwitch, OverwrideSwitch, osPriorityHigh, 0, 128);
 80009c0:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <main+0xac>)
 80009c2:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80009c6:	461d      	mov	r5, r3
 80009c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  OverrideSwitchHandle = osThreadCreate(osThread(OverrideSwitch), NULL);
 80009d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f007 fb2d 	bl	800803a <osThreadCreate>
 80009e0:	4602      	mov	r2, r0
 80009e2:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <main+0xb0>)
 80009e4:	601a      	str	r2, [r3, #0]

  /* definition and creation of TrafficControl1 */
  osThreadDef(TrafficControl1, StartTrafficControl1, osPriorityNormal, 0, 128);
 80009e6:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <main+0xb4>)
 80009e8:	f107 0420 	add.w	r4, r7, #32
 80009ec:	461d      	mov	r5, r3
 80009ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TrafficControl1Handle = osThreadCreate(osThread(TrafficControl1), NULL);
 80009fa:	f107 0320 	add.w	r3, r7, #32
 80009fe:	2100      	movs	r1, #0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f007 fb1a 	bl	800803a <osThreadCreate>
 8000a06:	4602      	mov	r2, r0
 8000a08:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <main+0xb8>)
 8000a0a:	601a      	str	r2, [r3, #0]

  /* definition and creation of SensorData */
  osThreadDef(SensorData, StartSensorData, osPriorityAboveNormal, 0, 128);
 8000a0c:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <main+0xbc>)
 8000a0e:	1d3c      	adds	r4, r7, #4
 8000a10:	461d      	mov	r5, r3
 8000a12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a16:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SensorDataHandle = osThreadCreate(osThread(SensorData), NULL);
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f007 fb09 	bl	800803a <osThreadCreate>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <main+0xc0>)
 8000a2c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a2e:	f007 fafd 	bl	800802c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <main+0xa6>
 8000a34:	20004140 	.word	0x20004140
 8000a38:	0800b388 	.word	0x0800b388
 8000a3c:	20004094 	.word	0x20004094
 8000a40:	0800b3b4 	.word	0x0800b3b4
 8000a44:	20004098 	.word	0x20004098
 8000a48:	0800b3dc 	.word	0x0800b3dc
 8000a4c:	2000409c 	.word	0x2000409c

08000a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b098      	sub	sp, #96	; 0x60
 8000a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a5a:	2230      	movs	r2, #48	; 0x30
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f00a fbbb 	bl	800b1da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	4b31      	ldr	r3, [pc, #196]	; (8000b4c <SystemClock_Config+0xfc>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	4a30      	ldr	r2, [pc, #192]	; (8000b4c <SystemClock_Config+0xfc>)
 8000a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a90:	6413      	str	r3, [r2, #64]	; 0x40
 8000a92:	4b2e      	ldr	r3, [pc, #184]	; (8000b4c <SystemClock_Config+0xfc>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4b2b      	ldr	r3, [pc, #172]	; (8000b50 <SystemClock_Config+0x100>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a2a      	ldr	r2, [pc, #168]	; (8000b50 <SystemClock_Config+0x100>)
 8000aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aac:	6013      	str	r3, [r2, #0]
 8000aae:	4b28      	ldr	r3, [pc, #160]	; (8000b50 <SystemClock_Config+0x100>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aba:	2301      	movs	r3, #1
 8000abc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000abe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ac2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ac8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000acc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ace:	2308      	movs	r3, #8
 8000ad0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ad2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ad6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000adc:	2307      	movs	r3, #7
 8000ade:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f003 f973 	bl	8003dd0 <HAL_RCC_OscConfig>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000af0:	f000 faf2 	bl	80010d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af4:	230f      	movs	r3, #15
 8000af6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af8:	2302      	movs	r3, #2
 8000afa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b00:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b04:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	2105      	movs	r1, #5
 8000b12:	4618      	mov	r0, r3
 8000b14:	f003 fbcc 	bl	80042b0 <HAL_RCC_ClockConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000b1e:	f000 fadb 	bl	80010d8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b22:	2301      	movs	r3, #1
 8000b24:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b26:	23c0      	movs	r3, #192	; 0xc0
 8000b28:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b2e:	f107 030c 	add.w	r3, r7, #12
 8000b32:	4618      	mov	r0, r3
 8000b34:	f003 fdcc 	bl	80046d0 <HAL_RCCEx_PeriphCLKConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000b3e:	f000 facb 	bl	80010d8 <Error_Handler>
  }
}
 8000b42:	bf00      	nop
 8000b44:	3760      	adds	r7, #96	; 0x60
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40007000 	.word	0x40007000

08000b54 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000b58:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <MX_I2S3_Init+0x54>)
 8000b5a:	4a14      	ldr	r2, [pc, #80]	; (8000bac <MX_I2S3_Init+0x58>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000b5e:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <MX_I2S3_Init+0x54>)
 8000b60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b64:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <MX_I2S3_Init+0x54>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <MX_I2S3_Init+0x54>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <MX_I2S3_Init+0x54>)
 8000b74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b78:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <MX_I2S3_Init+0x54>)
 8000b7c:	4a0c      	ldr	r2, [pc, #48]	; (8000bb0 <MX_I2S3_Init+0x5c>)
 8000b7e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000b80:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <MX_I2S3_Init+0x54>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000b86:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <MX_I2S3_Init+0x54>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <MX_I2S3_Init+0x54>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000b92:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <MX_I2S3_Init+0x54>)
 8000b94:	f002 fc7c 	bl	8003490 <HAL_I2S_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000b9e:	f000 fa9b 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200040f8 	.word	0x200040f8
 8000bac:	40003c00 	.word	0x40003c00
 8000bb0:	00017700 	.word	0x00017700

08000bb4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bba:	4a18      	ldr	r2, [pc, #96]	; (8000c1c <MX_SPI1_Init+0x68>)
 8000bbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bc6:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000be4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bec:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bf8:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000c00:	220a      	movs	r2, #10
 8000c02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <MX_SPI1_Init+0x64>)
 8000c06:	f003 fea1 	bl	800494c <HAL_SPI_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c10:	f000 fa62 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	200040a0 	.word	0x200040a0
 8000c1c:	40013000 	.word	0x40013000

08000c20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08c      	sub	sp, #48	; 0x30
 8000c24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
 8000c34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	61bb      	str	r3, [r7, #24]
 8000c3a:	4b83      	ldr	r3, [pc, #524]	; (8000e48 <MX_GPIO_Init+0x228>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a82      	ldr	r2, [pc, #520]	; (8000e48 <MX_GPIO_Init+0x228>)
 8000c40:	f043 0310 	orr.w	r3, r3, #16
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b80      	ldr	r3, [pc, #512]	; (8000e48 <MX_GPIO_Init+0x228>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0310 	and.w	r3, r3, #16
 8000c4e:	61bb      	str	r3, [r7, #24]
 8000c50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
 8000c56:	4b7c      	ldr	r3, [pc, #496]	; (8000e48 <MX_GPIO_Init+0x228>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a7b      	ldr	r2, [pc, #492]	; (8000e48 <MX_GPIO_Init+0x228>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b79      	ldr	r3, [pc, #484]	; (8000e48 <MX_GPIO_Init+0x228>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0304 	and.w	r3, r3, #4
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	4b75      	ldr	r3, [pc, #468]	; (8000e48 <MX_GPIO_Init+0x228>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a74      	ldr	r2, [pc, #464]	; (8000e48 <MX_GPIO_Init+0x228>)
 8000c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b72      	ldr	r3, [pc, #456]	; (8000e48 <MX_GPIO_Init+0x228>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	4b6e      	ldr	r3, [pc, #440]	; (8000e48 <MX_GPIO_Init+0x228>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a6d      	ldr	r2, [pc, #436]	; (8000e48 <MX_GPIO_Init+0x228>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b6b      	ldr	r3, [pc, #428]	; (8000e48 <MX_GPIO_Init+0x228>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	4b67      	ldr	r3, [pc, #412]	; (8000e48 <MX_GPIO_Init+0x228>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a66      	ldr	r2, [pc, #408]	; (8000e48 <MX_GPIO_Init+0x228>)
 8000cb0:	f043 0302 	orr.w	r3, r3, #2
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b64      	ldr	r3, [pc, #400]	; (8000e48 <MX_GPIO_Init+0x228>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	4b60      	ldr	r3, [pc, #384]	; (8000e48 <MX_GPIO_Init+0x228>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a5f      	ldr	r2, [pc, #380]	; (8000e48 <MX_GPIO_Init+0x228>)
 8000ccc:	f043 0308 	orr.w	r3, r3, #8
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b5d      	ldr	r3, [pc, #372]	; (8000e48 <MX_GPIO_Init+0x228>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0308 	and.w	r3, r3, #8
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5
 8000cde:	2200      	movs	r2, #0
 8000ce0:	217c      	movs	r1, #124	; 0x7c
 8000ce2:	485a      	ldr	r0, [pc, #360]	; (8000e4c <MX_GPIO_Init+0x22c>)
 8000ce4:	f000 feca 	bl	8001a7c <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cee:	4858      	ldr	r0, [pc, #352]	; (8000e50 <MX_GPIO_Init+0x230>)
 8000cf0:	f000 fec4 	bl	8001a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	4855      	ldr	r0, [pc, #340]	; (8000e50 <MX_GPIO_Init+0x230>)
 8000cfa:	f000 febf 	bl	8001a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000d04:	4853      	ldr	r0, [pc, #332]	; (8000e54 <MX_GPIO_Init+0x234>)
 8000d06:	f000 feb9 	bl	8001a7c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 CS_I2C_SPI_Pin PE4 PE5
                           PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5
 8000d0a:	237c      	movs	r3, #124	; 0x7c
 8000d0c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d16:	2300      	movs	r3, #0
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	4619      	mov	r1, r3
 8000d20:	484a      	ldr	r0, [pc, #296]	; (8000e4c <MX_GPIO_Init+0x22c>)
 8000d22:	f000 fcf9 	bl	8001718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|OTG_FS_PowerSwitchOn_Pin;
 8000d26:	f242 0301 	movw	r3, #8193	; 0x2001
 8000d2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d38:	f107 031c 	add.w	r3, r7, #28
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4844      	ldr	r0, [pc, #272]	; (8000e50 <MX_GPIO_Init+0x230>)
 8000d40:	f000 fcea 	bl	8001718 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000d44:	2308      	movs	r3, #8
 8000d46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d54:	2305      	movs	r3, #5
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d58:	f107 031c 	add.w	r3, r7, #28
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	483c      	ldr	r0, [pc, #240]	; (8000e50 <MX_GPIO_Init+0x230>)
 8000d60:	f000 fcda 	bl	8001718 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d64:	2301      	movs	r3, #1
 8000d66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d68:	4b3b      	ldr	r3, [pc, #236]	; (8000e58 <MX_GPIO_Init+0x238>)
 8000d6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d70:	f107 031c 	add.w	r3, r7, #28
 8000d74:	4619      	mov	r1, r3
 8000d76:	4839      	ldr	r0, [pc, #228]	; (8000e5c <MX_GPIO_Init+0x23c>)
 8000d78:	f000 fcce 	bl	8001718 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT1_Pin PB6 */
  GPIO_InitStruct.Pin = BOOT1_Pin|GPIO_PIN_6;
 8000d7c:	2344      	movs	r3, #68	; 0x44
 8000d7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d80:	2300      	movs	r3, #0
 8000d82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d88:	f107 031c 	add.w	r3, r7, #28
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4834      	ldr	r0, [pc, #208]	; (8000e60 <MX_GPIO_Init+0x240>)
 8000d90:	f000 fcc2 	bl	8001718 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000d94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000da6:	2305      	movs	r3, #5
 8000da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000daa:	f107 031c 	add.w	r3, r7, #28
 8000dae:	4619      	mov	r1, r3
 8000db0:	482b      	ldr	r0, [pc, #172]	; (8000e60 <MX_GPIO_Init+0x240>)
 8000db2:	f000 fcb1 	bl	8001718 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000db6:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000dba:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc8:	f107 031c 	add.w	r3, r7, #28
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4821      	ldr	r0, [pc, #132]	; (8000e54 <MX_GPIO_Init+0x234>)
 8000dd0:	f000 fca2 	bl	8001718 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000dd4:	2320      	movs	r3, #32
 8000dd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000de0:	f107 031c 	add.w	r3, r7, #28
 8000de4:	4619      	mov	r1, r3
 8000de6:	481b      	ldr	r0, [pc, #108]	; (8000e54 <MX_GPIO_Init+0x234>)
 8000de8:	f000 fc96 	bl	8001718 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000dec:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000df0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df2:	2300      	movs	r3, #0
 8000df4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000df6:	2302      	movs	r3, #2
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4817      	ldr	r0, [pc, #92]	; (8000e60 <MX_GPIO_Init+0x240>)
 8000e02:	f000 fc89 	bl	8001718 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 8000e06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e0c:	2312      	movs	r3, #18
 8000e0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e18:	2304      	movs	r3, #4
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	4619      	mov	r1, r3
 8000e22:	480f      	ldr	r0, [pc, #60]	; (8000e60 <MX_GPIO_Init+0x240>)
 8000e24:	f000 fc78 	bl	8001718 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <MX_GPIO_Init+0x238>)
 8000e2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e34:	f107 031c 	add.w	r3, r7, #28
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4804      	ldr	r0, [pc, #16]	; (8000e4c <MX_GPIO_Init+0x22c>)
 8000e3c:	f000 fc6c 	bl	8001718 <HAL_GPIO_Init>

}
 8000e40:	bf00      	nop
 8000e42:	3730      	adds	r7, #48	; 0x30
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	40020800 	.word	0x40020800
 8000e54:	40020c00 	.word	0x40020c00
 8000e58:	10120000 	.word	0x10120000
 8000e5c:	40020000 	.word	0x40020000
 8000e60:	40020400 	.word	0x40020400

08000e64 <OverwrideSwitch>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_OverwrideSwitch */
void OverwrideSwitch(void const * argument)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000e6c:	f009 fe6e 	bl	800ab4c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  int n = 1;
 8000e70:	2301      	movs	r3, #1
 8000e72:	60fb      	str	r3, [r7, #12]
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8))
 8000e74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e78:	481d      	ldr	r0, [pc, #116]	; (8000ef0 <OverwrideSwitch+0x8c>)
 8000e7a:	f000 fde7 	bl	8001a4c <HAL_GPIO_ReadPin>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d02f      	beq.n	8000ee4 <OverwrideSwitch+0x80>
	  {
		  osSemaphoreWait(SensorStateHandle, osWaitForever);
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <OverwrideSwitch+0x90>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f04f 31ff 	mov.w	r1, #4294967295
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f007 f967 	bl	8008160 <osSemaphoreWait>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 8000e92:	2201      	movs	r2, #1
 8000e94:	2140      	movs	r1, #64	; 0x40
 8000e96:	4818      	ldr	r0, [pc, #96]	; (8000ef8 <OverwrideSwitch+0x94>)
 8000e98:	f000 fdf0 	bl	8001a7c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2120      	movs	r1, #32
 8000ea0:	4815      	ldr	r0, [pc, #84]	; (8000ef8 <OverwrideSwitch+0x94>)
 8000ea2:	f000 fdeb 	bl	8001a7c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2110      	movs	r1, #16
 8000eaa:	4813      	ldr	r0, [pc, #76]	; (8000ef8 <OverwrideSwitch+0x94>)
 8000eac:	f000 fde6 	bl	8001a7c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	2104      	movs	r1, #4
 8000eb4:	4810      	ldr	r0, [pc, #64]	; (8000ef8 <OverwrideSwitch+0x94>)
 8000eb6:	f000 fde1 	bl	8001a7c <HAL_GPIO_WritePin>
		  HAL_Delay(5000);
 8000eba:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ebe:	f000 fb27 	bl	8001510 <HAL_Delay>
		  n = 2000;
 8000ec2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000ec6:	60fb      	str	r3, [r7, #12]
	  	  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 0)
 8000ec8:	e004      	b.n	8000ed4 <OverwrideSwitch+0x70>

	  	  osSemaphoreRelease(SensorStateHandle);
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <OverwrideSwitch+0x90>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f007 f994 	bl	80081fc <osSemaphoreRelease>
	  	  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 0)
 8000ed4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed8:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <OverwrideSwitch+0x8c>)
 8000eda:	f000 fdb7 	bl	8001a4c <HAL_GPIO_ReadPin>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d0f2      	beq.n	8000eca <OverwrideSwitch+0x66>
	  }
	  osDelay(n);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f007 f8f3 	bl	80080d2 <osDelay>
  {
 8000eec:	e7c0      	b.n	8000e70 <OverwrideSwitch+0xc>
 8000eee:	bf00      	nop
 8000ef0:	40020400 	.word	0x40020400
 8000ef4:	20004140 	.word	0x20004140
 8000ef8:	40021000 	.word	0x40021000

08000efc <StartTrafficControl1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTrafficControl1 */
void StartTrafficControl1(void const * argument)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTrafficControl1 */
  /* Infinite loop */
  for(;;)
  {
	  int n = 5000;
 8000f04:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f08:	60fb      	str	r3, [r7, #12]
	  osSemaphoreWait(SensorStateHandle, osWaitForever);
 8000f0a:	4b25      	ldr	r3, [pc, #148]	; (8000fa0 <StartTrafficControl1+0xa4>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f04f 31ff 	mov.w	r1, #4294967295
 8000f12:	4618      	mov	r0, r3
 8000f14:	f007 f924 	bl	8008160 <osSemaphoreWait>
	  if(switcher == 1)
 8000f18:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <StartTrafficControl1+0xa8>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d117      	bne.n	8000f50 <StartTrafficControl1+0x54>
	  {
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 8000f20:	2201      	movs	r2, #1
 8000f22:	2140      	movs	r1, #64	; 0x40
 8000f24:	4820      	ldr	r0, [pc, #128]	; (8000fa8 <StartTrafficControl1+0xac>)
 8000f26:	f000 fda9 	bl	8001a7c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2120      	movs	r1, #32
 8000f2e:	481e      	ldr	r0, [pc, #120]	; (8000fa8 <StartTrafficControl1+0xac>)
 8000f30:	f000 fda4 	bl	8001a7c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 8000f34:	2201      	movs	r2, #1
 8000f36:	2110      	movs	r1, #16
 8000f38:	481b      	ldr	r0, [pc, #108]	; (8000fa8 <StartTrafficControl1+0xac>)
 8000f3a:	f000 fd9f 	bl	8001a7c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2104      	movs	r1, #4
 8000f42:	4819      	ldr	r0, [pc, #100]	; (8000fa8 <StartTrafficControl1+0xac>)
 8000f44:	f000 fd9a 	bl	8001a7c <HAL_GPIO_WritePin>
		  switcher = 0;
 8000f48:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <StartTrafficControl1+0xa8>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	e016      	b.n	8000f7e <StartTrafficControl1+0x82>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2140      	movs	r1, #64	; 0x40
 8000f54:	4814      	ldr	r0, [pc, #80]	; (8000fa8 <StartTrafficControl1+0xac>)
 8000f56:	f000 fd91 	bl	8001a7c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	2120      	movs	r1, #32
 8000f5e:	4812      	ldr	r0, [pc, #72]	; (8000fa8 <StartTrafficControl1+0xac>)
 8000f60:	f000 fd8c 	bl	8001a7c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2110      	movs	r1, #16
 8000f68:	480f      	ldr	r0, [pc, #60]	; (8000fa8 <StartTrafficControl1+0xac>)
 8000f6a:	f000 fd87 	bl	8001a7c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	2104      	movs	r1, #4
 8000f72:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <StartTrafficControl1+0xac>)
 8000f74:	f000 fd82 	bl	8001a7c <HAL_GPIO_WritePin>
		  switcher = 1;
 8000f78:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <StartTrafficControl1+0xa8>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	601a      	str	r2, [r3, #0]
	  }
	  /*
	  HA1L_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
	  */
	  if(global_sensor == 1)
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <StartTrafficControl1+0xb0>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d102      	bne.n	8000f8c <StartTrafficControl1+0x90>
		  n = 10000;
 8000f86:	f242 7310 	movw	r3, #10000	; 0x2710
 8000f8a:	60fb      	str	r3, [r7, #12]
	  osSemaphoreRelease(SensorStateHandle);
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <StartTrafficControl1+0xa4>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f007 f933 	bl	80081fc <osSemaphoreRelease>
	  osDelay(n);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f007 f89a 	bl	80080d2 <osDelay>
  {
 8000f9e:	e7b1      	b.n	8000f04 <StartTrafficControl1+0x8>
 8000fa0:	20004140 	.word	0x20004140
 8000fa4:	20000304 	.word	0x20000304
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	20000308 	.word	0x20000308

08000fb0 <StartSensorData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorData */
void StartSensorData(void const * argument)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensorData */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(SensorStateHandle, osWaitForever);
 8000fb8:	4b39      	ldr	r3, [pc, #228]	; (80010a0 <StartSensorData+0xf0>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f007 f8cd 	bl	8008160 <osSemaphoreWait>
	  // Moving Average Filter
	  float sensor_dsp = 0;
 8000fc6:	f04f 0300 	mov.w	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]

	  for (int i = 8; i >= 0; i--)
 8000fcc:	2308      	movs	r3, #8
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	e019      	b.n	8001006 <StartSensorData+0x56>
	  {
		  r_sensor[i + 1] = r_sensor[i];
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	4933      	ldr	r1, [pc, #204]	; (80010a4 <StartSensorData+0xf4>)
 8000fd8:	68ba      	ldr	r2, [r7, #8]
 8000fda:	0092      	lsls	r2, r2, #2
 8000fdc:	440a      	add	r2, r1
 8000fde:	6812      	ldr	r2, [r2, #0]
 8000fe0:	4930      	ldr	r1, [pc, #192]	; (80010a4 <StartSensorData+0xf4>)
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	601a      	str	r2, [r3, #0]
		  sensor_dsp = sensor_dsp + r_sensor[i];
 8000fe8:	4a2e      	ldr	r2, [pc, #184]	; (80010a4 <StartSensorData+0xf4>)
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	4413      	add	r3, r2
 8000ff0:	edd3 7a00 	vldr	s15, [r3]
 8000ff4:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ffc:	edc7 7a03 	vstr	s15, [r7, #12]
	  for (int i = 8; i >= 0; i--)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	3b01      	subs	r3, #1
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	2b00      	cmp	r3, #0
 800100a:	dae2      	bge.n	8000fd2 <StartSensorData+0x22>
	  }
	  r_sensor[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
 800100c:	2180      	movs	r1, #128	; 0x80
 800100e:	4826      	ldr	r0, [pc, #152]	; (80010a8 <StartSensorData+0xf8>)
 8001010:	f000 fd1c 	bl	8001a4c <HAL_GPIO_ReadPin>
 8001014:	4603      	mov	r3, r0
 8001016:	ee07 3a90 	vmov	s15, r3
 800101a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800101e:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <StartSensorData+0xf4>)
 8001020:	edc3 7a00 	vstr	s15, [r3]

	  sensor_dsp = sensor_dsp + r_sensor[0];
 8001024:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <StartSensorData+0xf4>)
 8001026:	edd3 7a00 	vldr	s15, [r3]
 800102a:	ed97 7a03 	vldr	s14, [r7, #12]
 800102e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001032:	edc7 7a03 	vstr	s15, [r7, #12]
	  sensor_dsp = sensor_dsp / 10;
 8001036:	ed97 7a03 	vldr	s14, [r7, #12]
 800103a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800103e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001042:	edc7 7a03 	vstr	s15, [r7, #12]

	  if (sensor_dsp > 0.8)
 8001046:	68f8      	ldr	r0, [r7, #12]
 8001048:	f7ff fa26 	bl	8000498 <__aeabi_f2d>
 800104c:	a312      	add	r3, pc, #72	; (adr r3, 8001098 <StartSensorData+0xe8>)
 800104e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001052:	f7ff faf7 	bl	8000644 <__aeabi_dcmpgt>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d009      	beq.n	8001070 <StartSensorData+0xc0>
	  {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800105c:	2201      	movs	r2, #1
 800105e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001062:	4812      	ldr	r0, [pc, #72]	; (80010ac <StartSensorData+0xfc>)
 8001064:	f000 fd0a 	bl	8001a7c <HAL_GPIO_WritePin>
		global_sensor = 1;
 8001068:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <StartSensorData+0x100>)
 800106a:	2201      	movs	r2, #1
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	e008      	b.n	8001082 <StartSensorData+0xd2>
	  }
	  else
	  {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001076:	480d      	ldr	r0, [pc, #52]	; (80010ac <StartSensorData+0xfc>)
 8001078:	f000 fd00 	bl	8001a7c <HAL_GPIO_WritePin>
		global_sensor = 0;
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <StartSensorData+0x100>)
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
	  }
	  osSemaphoreRelease(SensorStateHandle);
 8001082:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <StartSensorData+0xf0>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f007 f8b8 	bl	80081fc <osSemaphoreRelease>
	  osDelay(10);
 800108c:	200a      	movs	r0, #10
 800108e:	f007 f820 	bl	80080d2 <osDelay>
  {
 8001092:	e791      	b.n	8000fb8 <StartSensorData+0x8>
 8001094:	f3af 8000 	nop.w
 8001098:	9999999a 	.word	0x9999999a
 800109c:	3fe99999 	.word	0x3fe99999
 80010a0:	20004140 	.word	0x20004140
 80010a4:	2000406c 	.word	0x2000406c
 80010a8:	40020400 	.word	0x40020400
 80010ac:	40020800 	.word	0x40020800
 80010b0:	20000308 	.word	0x20000308

080010b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d101      	bne.n	80010ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010c6:	f000 fa03 	bl	80014d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40010000 	.word	0x40010000

080010d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010dc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010de:	e7fe      	b.n	80010de <Error_Handler+0x6>

080010e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	4b12      	ldr	r3, [pc, #72]	; (8001134 <HAL_MspInit+0x54>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	4a11      	ldr	r2, [pc, #68]	; (8001134 <HAL_MspInit+0x54>)
 80010f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f4:	6453      	str	r3, [r2, #68]	; 0x44
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <HAL_MspInit+0x54>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	603b      	str	r3, [r7, #0]
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <HAL_MspInit+0x54>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <HAL_MspInit+0x54>)
 800110c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001110:	6413      	str	r3, [r2, #64]	; 0x40
 8001112:	4b08      	ldr	r3, [pc, #32]	; (8001134 <HAL_MspInit+0x54>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111a:	603b      	str	r3, [r7, #0]
 800111c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	210f      	movs	r1, #15
 8001122:	f06f 0001 	mvn.w	r0, #1
 8001126:	f000 facd 	bl	80016c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800

08001138 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	; 0x28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a28      	ldr	r2, [pc, #160]	; (80011f8 <HAL_I2S_MspInit+0xc0>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d14a      	bne.n	80011f0 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	4b27      	ldr	r3, [pc, #156]	; (80011fc <HAL_I2S_MspInit+0xc4>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	4a26      	ldr	r2, [pc, #152]	; (80011fc <HAL_I2S_MspInit+0xc4>)
 8001164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001168:	6413      	str	r3, [r2, #64]	; 0x40
 800116a:	4b24      	ldr	r3, [pc, #144]	; (80011fc <HAL_I2S_MspInit+0xc4>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	4b20      	ldr	r3, [pc, #128]	; (80011fc <HAL_I2S_MspInit+0xc4>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a1f      	ldr	r2, [pc, #124]	; (80011fc <HAL_I2S_MspInit+0xc4>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <HAL_I2S_MspInit+0xc4>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	4b19      	ldr	r3, [pc, #100]	; (80011fc <HAL_I2S_MspInit+0xc4>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a18      	ldr	r2, [pc, #96]	; (80011fc <HAL_I2S_MspInit+0xc4>)
 800119c:	f043 0304 	orr.w	r3, r3, #4
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b16      	ldr	r3, [pc, #88]	; (80011fc <HAL_I2S_MspInit+0xc4>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0304 	and.w	r3, r3, #4
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80011ae:	2310      	movs	r3, #16
 80011b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2300      	movs	r3, #0
 80011bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011be:	2306      	movs	r3, #6
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	4619      	mov	r1, r3
 80011c8:	480d      	ldr	r0, [pc, #52]	; (8001200 <HAL_I2S_MspInit+0xc8>)
 80011ca:	f000 faa5 	bl	8001718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80011ce:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80011d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011e0:	2306      	movs	r3, #6
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	4619      	mov	r1, r3
 80011ea:	4806      	ldr	r0, [pc, #24]	; (8001204 <HAL_I2S_MspInit+0xcc>)
 80011ec:	f000 fa94 	bl	8001718 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80011f0:	bf00      	nop
 80011f2:	3728      	adds	r7, #40	; 0x28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40003c00 	.word	0x40003c00
 80011fc:	40023800 	.word	0x40023800
 8001200:	40020000 	.word	0x40020000
 8001204:	40020800 	.word	0x40020800

08001208 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a19      	ldr	r2, [pc, #100]	; (800128c <HAL_SPI_MspInit+0x84>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d12b      	bne.n	8001282 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
 800122e:	4b18      	ldr	r3, [pc, #96]	; (8001290 <HAL_SPI_MspInit+0x88>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	4a17      	ldr	r2, [pc, #92]	; (8001290 <HAL_SPI_MspInit+0x88>)
 8001234:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001238:	6453      	str	r3, [r2, #68]	; 0x44
 800123a:	4b15      	ldr	r3, [pc, #84]	; (8001290 <HAL_SPI_MspInit+0x88>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <HAL_SPI_MspInit+0x88>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a10      	ldr	r2, [pc, #64]	; (8001290 <HAL_SPI_MspInit+0x88>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <HAL_SPI_MspInit+0x88>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001262:	23e0      	movs	r3, #224	; 0xe0
 8001264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001272:	2305      	movs	r3, #5
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	4805      	ldr	r0, [pc, #20]	; (8001294 <HAL_SPI_MspInit+0x8c>)
 800127e:	f000 fa4b 	bl	8001718 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001282:	bf00      	nop
 8001284:	3728      	adds	r7, #40	; 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40013000 	.word	0x40013000
 8001290:	40023800 	.word	0x40023800
 8001294:	40020000 	.word	0x40020000

08001298 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08c      	sub	sp, #48	; 0x30
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80012a8:	2200      	movs	r2, #0
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	2019      	movs	r0, #25
 80012ae:	f000 fa09 	bl	80016c4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80012b2:	2019      	movs	r0, #25
 80012b4:	f000 fa22 	bl	80016fc <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	4b1f      	ldr	r3, [pc, #124]	; (800133c <HAL_InitTick+0xa4>)
 80012be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c0:	4a1e      	ldr	r2, [pc, #120]	; (800133c <HAL_InitTick+0xa4>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	6453      	str	r3, [r2, #68]	; 0x44
 80012c8:	4b1c      	ldr	r3, [pc, #112]	; (800133c <HAL_InitTick+0xa4>)
 80012ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012d4:	f107 0210 	add.w	r2, r7, #16
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4611      	mov	r1, r2
 80012de:	4618      	mov	r0, r3
 80012e0:	f003 f9c4 	bl	800466c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80012e4:	f003 f9ae 	bl	8004644 <HAL_RCC_GetPCLK2Freq>
 80012e8:	4603      	mov	r3, r0
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f0:	4a13      	ldr	r2, [pc, #76]	; (8001340 <HAL_InitTick+0xa8>)
 80012f2:	fba2 2303 	umull	r2, r3, r2, r3
 80012f6:	0c9b      	lsrs	r3, r3, #18
 80012f8:	3b01      	subs	r3, #1
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80012fc:	4b11      	ldr	r3, [pc, #68]	; (8001344 <HAL_InitTick+0xac>)
 80012fe:	4a12      	ldr	r2, [pc, #72]	; (8001348 <HAL_InitTick+0xb0>)
 8001300:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <HAL_InitTick+0xac>)
 8001304:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001308:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800130a:	4a0e      	ldr	r2, [pc, #56]	; (8001344 <HAL_InitTick+0xac>)
 800130c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800130e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <HAL_InitTick+0xac>)
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <HAL_InitTick+0xac>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800131c:	4809      	ldr	r0, [pc, #36]	; (8001344 <HAL_InitTick+0xac>)
 800131e:	f003 fb79 	bl	8004a14 <HAL_TIM_Base_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d104      	bne.n	8001332 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001328:	4806      	ldr	r0, [pc, #24]	; (8001344 <HAL_InitTick+0xac>)
 800132a:	f003 fba8 	bl	8004a7e <HAL_TIM_Base_Start_IT>
 800132e:	4603      	mov	r3, r0
 8001330:	e000      	b.n	8001334 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
}
 8001334:	4618      	mov	r0, r3
 8001336:	3730      	adds	r7, #48	; 0x30
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40023800 	.word	0x40023800
 8001340:	431bde83 	.word	0x431bde83
 8001344:	20004144 	.word	0x20004144
 8001348:	40010000 	.word	0x40010000

0800134c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <NMI_Handler+0x4>

08001352 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <HardFault_Handler+0x4>

08001358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <MemManage_Handler+0x4>

0800135e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001362:	e7fe      	b.n	8001362 <BusFault_Handler+0x4>

08001364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <UsageFault_Handler+0x4>

0800136a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800137c:	4802      	ldr	r0, [pc, #8]	; (8001388 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800137e:	f003 fba2 	bl	8004ac6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20004144 	.word	0x20004144

0800138c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001390:	4802      	ldr	r0, [pc, #8]	; (800139c <OTG_FS_IRQHandler+0x10>)
 8001392:	f000 fe1b 	bl	8001fcc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	2000456c 	.word	0x2000456c

080013a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a8:	4a14      	ldr	r2, [pc, #80]	; (80013fc <_sbrk+0x5c>)
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <_sbrk+0x60>)
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b4:	4b13      	ldr	r3, [pc, #76]	; (8001404 <_sbrk+0x64>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d102      	bne.n	80013c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <_sbrk+0x64>)
 80013be:	4a12      	ldr	r2, [pc, #72]	; (8001408 <_sbrk+0x68>)
 80013c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013c2:	4b10      	ldr	r3, [pc, #64]	; (8001404 <_sbrk+0x64>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d207      	bcs.n	80013e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013d0:	f009 febe 	bl	800b150 <__errno>
 80013d4:	4602      	mov	r2, r0
 80013d6:	230c      	movs	r3, #12
 80013d8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80013da:	f04f 33ff 	mov.w	r3, #4294967295
 80013de:	e009      	b.n	80013f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <_sbrk+0x64>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013e6:	4b07      	ldr	r3, [pc, #28]	; (8001404 <_sbrk+0x64>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	4a05      	ldr	r2, [pc, #20]	; (8001404 <_sbrk+0x64>)
 80013f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013f2:	68fb      	ldr	r3, [r7, #12]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20020000 	.word	0x20020000
 8001400:	00000400 	.word	0x00000400
 8001404:	2000030c 	.word	0x2000030c
 8001408:	20004838 	.word	0x20004838

0800140c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <SystemInit+0x28>)
 8001412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001416:	4a07      	ldr	r2, [pc, #28]	; (8001434 <SystemInit+0x28>)
 8001418:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800141c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <SystemInit+0x28>)
 8001422:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001426:	609a      	str	r2, [r3, #8]
#endif
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001438:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001470 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800143c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800143e:	e003      	b.n	8001448 <LoopCopyDataInit>

08001440 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001442:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001444:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001446:	3104      	adds	r1, #4

08001448 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001448:	480b      	ldr	r0, [pc, #44]	; (8001478 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800144a:	4b0c      	ldr	r3, [pc, #48]	; (800147c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800144c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800144e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001450:	d3f6      	bcc.n	8001440 <CopyDataInit>
  ldr  r2, =_sbss
 8001452:	4a0b      	ldr	r2, [pc, #44]	; (8001480 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001454:	e002      	b.n	800145c <LoopFillZerobss>

08001456 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001456:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001458:	f842 3b04 	str.w	r3, [r2], #4

0800145c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800145c:	4b09      	ldr	r3, [pc, #36]	; (8001484 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800145e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001460:	d3f9      	bcc.n	8001456 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001462:	f7ff ffd3 	bl	800140c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001466:	f009 fe79 	bl	800b15c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800146a:	f7ff fa8f 	bl	800098c <main>
  bx  lr    
 800146e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001470:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001474:	0800b464 	.word	0x0800b464
  ldr  r0, =_sdata
 8001478:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800147c:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8001480:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8001484:	20004834 	.word	0x20004834

08001488 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001488:	e7fe      	b.n	8001488 <ADC_IRQHandler>
	...

0800148c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001490:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <HAL_Init+0x40>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a0d      	ldr	r2, [pc, #52]	; (80014cc <HAL_Init+0x40>)
 8001496:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800149a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800149c:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <HAL_Init+0x40>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <HAL_Init+0x40>)
 80014a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <HAL_Init+0x40>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a07      	ldr	r2, [pc, #28]	; (80014cc <HAL_Init+0x40>)
 80014ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b4:	2003      	movs	r0, #3
 80014b6:	f000 f8fa 	bl	80016ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ba:	2000      	movs	r0, #0
 80014bc:	f7ff feec 	bl	8001298 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c0:	f7ff fe0e 	bl	80010e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40023c00 	.word	0x40023c00

080014d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_IncTick+0x20>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_IncTick+0x24>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <HAL_IncTick+0x24>)
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000008 	.word	0x20000008
 80014f4:	20004184 	.word	0x20004184

080014f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return uwTick;
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <HAL_GetTick+0x14>)
 80014fe:	681b      	ldr	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	20004184 	.word	0x20004184

08001510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001518:	f7ff ffee 	bl	80014f8 <HAL_GetTick>
 800151c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001528:	d005      	beq.n	8001536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <HAL_Delay+0x40>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4413      	add	r3, r2
 8001534:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001536:	bf00      	nop
 8001538:	f7ff ffde 	bl	80014f8 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	429a      	cmp	r2, r3
 8001546:	d8f7      	bhi.n	8001538 <HAL_Delay+0x28>
  {
  }
}
 8001548:	bf00      	nop
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000008 	.word	0x20000008

08001554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <__NVIC_SetPriorityGrouping+0x44>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001570:	4013      	ands	r3, r2
 8001572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800157c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001586:	4a04      	ldr	r2, [pc, #16]	; (8001598 <__NVIC_SetPriorityGrouping+0x44>)
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	60d3      	str	r3, [r2, #12]
}
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a0:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <__NVIC_GetPriorityGrouping+0x18>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	0a1b      	lsrs	r3, r3, #8
 80015a6:	f003 0307 	and.w	r3, r3, #7
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	db0b      	blt.n	80015e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	f003 021f 	and.w	r2, r3, #31
 80015d0:	4907      	ldr	r1, [pc, #28]	; (80015f0 <__NVIC_EnableIRQ+0x38>)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	095b      	lsrs	r3, r3, #5
 80015d8:	2001      	movs	r0, #1
 80015da:	fa00 f202 	lsl.w	r2, r0, r2
 80015de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000e100 	.word	0xe000e100

080015f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	6039      	str	r1, [r7, #0]
 80015fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001604:	2b00      	cmp	r3, #0
 8001606:	db0a      	blt.n	800161e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	b2da      	uxtb	r2, r3
 800160c:	490c      	ldr	r1, [pc, #48]	; (8001640 <__NVIC_SetPriority+0x4c>)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	0112      	lsls	r2, r2, #4
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	440b      	add	r3, r1
 8001618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800161c:	e00a      	b.n	8001634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	b2da      	uxtb	r2, r3
 8001622:	4908      	ldr	r1, [pc, #32]	; (8001644 <__NVIC_SetPriority+0x50>)
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	3b04      	subs	r3, #4
 800162c:	0112      	lsls	r2, r2, #4
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	440b      	add	r3, r1
 8001632:	761a      	strb	r2, [r3, #24]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000e100 	.word	0xe000e100
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001648:	b480      	push	{r7}
 800164a:	b089      	sub	sp, #36	; 0x24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f1c3 0307 	rsb	r3, r3, #7
 8001662:	2b04      	cmp	r3, #4
 8001664:	bf28      	it	cs
 8001666:	2304      	movcs	r3, #4
 8001668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3304      	adds	r3, #4
 800166e:	2b06      	cmp	r3, #6
 8001670:	d902      	bls.n	8001678 <NVIC_EncodePriority+0x30>
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3b03      	subs	r3, #3
 8001676:	e000      	b.n	800167a <NVIC_EncodePriority+0x32>
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800167c:	f04f 32ff 	mov.w	r2, #4294967295
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43da      	mvns	r2, r3
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	401a      	ands	r2, r3
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001690:	f04f 31ff 	mov.w	r1, #4294967295
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	fa01 f303 	lsl.w	r3, r1, r3
 800169a:	43d9      	mvns	r1, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a0:	4313      	orrs	r3, r2
         );
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3724      	adds	r7, #36	; 0x24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff ff4c 	bl	8001554 <__NVIC_SetPriorityGrouping>
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
 80016d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016d6:	f7ff ff61 	bl	800159c <__NVIC_GetPriorityGrouping>
 80016da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	68b9      	ldr	r1, [r7, #8]
 80016e0:	6978      	ldr	r0, [r7, #20]
 80016e2:	f7ff ffb1 	bl	8001648 <NVIC_EncodePriority>
 80016e6:	4602      	mov	r2, r0
 80016e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ec:	4611      	mov	r1, r2
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff ff80 	bl	80015f4 <__NVIC_SetPriority>
}
 80016f4:	bf00      	nop
 80016f6:	3718      	adds	r7, #24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff ff54 	bl	80015b8 <__NVIC_EnableIRQ>
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001718:	b480      	push	{r7}
 800171a:	b089      	sub	sp, #36	; 0x24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800172a:	2300      	movs	r3, #0
 800172c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]
 8001732:	e16b      	b.n	8001a0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001734:	2201      	movs	r2, #1
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	4013      	ands	r3, r2
 8001746:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	429a      	cmp	r2, r3
 800174e:	f040 815a 	bne.w	8001a06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d00b      	beq.n	8001772 <HAL_GPIO_Init+0x5a>
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d007      	beq.n	8001772 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001766:	2b11      	cmp	r3, #17
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b12      	cmp	r3, #18
 8001770:	d130      	bne.n	80017d4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	2203      	movs	r2, #3
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4013      	ands	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017a8:	2201      	movs	r2, #1
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	091b      	lsrs	r3, r3, #4
 80017be:	f003 0201 	and.w	r2, r3, #1
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	2203      	movs	r2, #3
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b02      	cmp	r3, #2
 800180a:	d003      	beq.n	8001814 <HAL_GPIO_Init+0xfc>
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b12      	cmp	r3, #18
 8001812:	d123      	bne.n	800185c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	08da      	lsrs	r2, r3, #3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3208      	adds	r2, #8
 800181c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001820:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	220f      	movs	r2, #15
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	691a      	ldr	r2, [r3, #16]
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	08da      	lsrs	r2, r3, #3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3208      	adds	r2, #8
 8001856:	69b9      	ldr	r1, [r7, #24]
 8001858:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	2203      	movs	r2, #3
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 0203 	and.w	r2, r3, #3
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4313      	orrs	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 80b4 	beq.w	8001a06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	4b5f      	ldr	r3, [pc, #380]	; (8001a20 <HAL_GPIO_Init+0x308>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a6:	4a5e      	ldr	r2, [pc, #376]	; (8001a20 <HAL_GPIO_Init+0x308>)
 80018a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ac:	6453      	str	r3, [r2, #68]	; 0x44
 80018ae:	4b5c      	ldr	r3, [pc, #368]	; (8001a20 <HAL_GPIO_Init+0x308>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ba:	4a5a      	ldr	r2, [pc, #360]	; (8001a24 <HAL_GPIO_Init+0x30c>)
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	089b      	lsrs	r3, r3, #2
 80018c0:	3302      	adds	r3, #2
 80018c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	220f      	movs	r2, #15
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4013      	ands	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a51      	ldr	r2, [pc, #324]	; (8001a28 <HAL_GPIO_Init+0x310>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d02b      	beq.n	800193e <HAL_GPIO_Init+0x226>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a50      	ldr	r2, [pc, #320]	; (8001a2c <HAL_GPIO_Init+0x314>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d025      	beq.n	800193a <HAL_GPIO_Init+0x222>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a4f      	ldr	r2, [pc, #316]	; (8001a30 <HAL_GPIO_Init+0x318>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d01f      	beq.n	8001936 <HAL_GPIO_Init+0x21e>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a4e      	ldr	r2, [pc, #312]	; (8001a34 <HAL_GPIO_Init+0x31c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d019      	beq.n	8001932 <HAL_GPIO_Init+0x21a>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a4d      	ldr	r2, [pc, #308]	; (8001a38 <HAL_GPIO_Init+0x320>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d013      	beq.n	800192e <HAL_GPIO_Init+0x216>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a4c      	ldr	r2, [pc, #304]	; (8001a3c <HAL_GPIO_Init+0x324>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d00d      	beq.n	800192a <HAL_GPIO_Init+0x212>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a4b      	ldr	r2, [pc, #300]	; (8001a40 <HAL_GPIO_Init+0x328>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d007      	beq.n	8001926 <HAL_GPIO_Init+0x20e>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a4a      	ldr	r2, [pc, #296]	; (8001a44 <HAL_GPIO_Init+0x32c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d101      	bne.n	8001922 <HAL_GPIO_Init+0x20a>
 800191e:	2307      	movs	r3, #7
 8001920:	e00e      	b.n	8001940 <HAL_GPIO_Init+0x228>
 8001922:	2308      	movs	r3, #8
 8001924:	e00c      	b.n	8001940 <HAL_GPIO_Init+0x228>
 8001926:	2306      	movs	r3, #6
 8001928:	e00a      	b.n	8001940 <HAL_GPIO_Init+0x228>
 800192a:	2305      	movs	r3, #5
 800192c:	e008      	b.n	8001940 <HAL_GPIO_Init+0x228>
 800192e:	2304      	movs	r3, #4
 8001930:	e006      	b.n	8001940 <HAL_GPIO_Init+0x228>
 8001932:	2303      	movs	r3, #3
 8001934:	e004      	b.n	8001940 <HAL_GPIO_Init+0x228>
 8001936:	2302      	movs	r3, #2
 8001938:	e002      	b.n	8001940 <HAL_GPIO_Init+0x228>
 800193a:	2301      	movs	r3, #1
 800193c:	e000      	b.n	8001940 <HAL_GPIO_Init+0x228>
 800193e:	2300      	movs	r3, #0
 8001940:	69fa      	ldr	r2, [r7, #28]
 8001942:	f002 0203 	and.w	r2, r2, #3
 8001946:	0092      	lsls	r2, r2, #2
 8001948:	4093      	lsls	r3, r2
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001950:	4934      	ldr	r1, [pc, #208]	; (8001a24 <HAL_GPIO_Init+0x30c>)
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	089b      	lsrs	r3, r3, #2
 8001956:	3302      	adds	r3, #2
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800195e:	4b3a      	ldr	r3, [pc, #232]	; (8001a48 <HAL_GPIO_Init+0x330>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001982:	4a31      	ldr	r2, [pc, #196]	; (8001a48 <HAL_GPIO_Init+0x330>)
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001988:	4b2f      	ldr	r3, [pc, #188]	; (8001a48 <HAL_GPIO_Init+0x330>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019ac:	4a26      	ldr	r2, [pc, #152]	; (8001a48 <HAL_GPIO_Init+0x330>)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019b2:	4b25      	ldr	r3, [pc, #148]	; (8001a48 <HAL_GPIO_Init+0x330>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	43db      	mvns	r3, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4013      	ands	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019d6:	4a1c      	ldr	r2, [pc, #112]	; (8001a48 <HAL_GPIO_Init+0x330>)
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019dc:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <HAL_GPIO_Init+0x330>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a00:	4a11      	ldr	r2, [pc, #68]	; (8001a48 <HAL_GPIO_Init+0x330>)
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	61fb      	str	r3, [r7, #28]
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	2b0f      	cmp	r3, #15
 8001a10:	f67f ae90 	bls.w	8001734 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a14:	bf00      	nop
 8001a16:	3724      	adds	r7, #36	; 0x24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40013800 	.word	0x40013800
 8001a28:	40020000 	.word	0x40020000
 8001a2c:	40020400 	.word	0x40020400
 8001a30:	40020800 	.word	0x40020800
 8001a34:	40020c00 	.word	0x40020c00
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40021400 	.word	0x40021400
 8001a40:	40021800 	.word	0x40021800
 8001a44:	40021c00 	.word	0x40021c00
 8001a48:	40013c00 	.word	0x40013c00

08001a4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	691a      	ldr	r2, [r3, #16]
 8001a5c:	887b      	ldrh	r3, [r7, #2]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d002      	beq.n	8001a6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a64:	2301      	movs	r3, #1
 8001a66:	73fb      	strb	r3, [r7, #15]
 8001a68:	e001      	b.n	8001a6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	807b      	strh	r3, [r7, #2]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a8c:	787b      	ldrb	r3, [r7, #1]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a92:	887a      	ldrh	r2, [r7, #2]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a98:	e003      	b.n	8001aa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a9a:	887b      	ldrh	r3, [r7, #2]
 8001a9c:	041a      	lsls	r2, r3, #16
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	619a      	str	r2, [r3, #24]
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001aae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ab0:	b08f      	sub	sp, #60	; 0x3c
 8001ab2:	af0a      	add	r7, sp, #40	; 0x28
 8001ab4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e054      	b.n	8001b6a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d106      	bne.n	8001ae0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f009 f88a 	bl	800abf4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2203      	movs	r2, #3
 8001ae4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d102      	bne.n	8001afa <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f003 fa38 	bl	8004f74 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	603b      	str	r3, [r7, #0]
 8001b0a:	687e      	ldr	r6, [r7, #4]
 8001b0c:	466d      	mov	r5, sp
 8001b0e:	f106 0410 	add.w	r4, r6, #16
 8001b12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b22:	1d33      	adds	r3, r6, #4
 8001b24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b26:	6838      	ldr	r0, [r7, #0]
 8001b28:	f003 f9b2 	bl	8004e90 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2101      	movs	r1, #1
 8001b32:	4618      	mov	r0, r3
 8001b34:	f003 fa2f 	bl	8004f96 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	603b      	str	r3, [r7, #0]
 8001b3e:	687e      	ldr	r6, [r7, #4]
 8001b40:	466d      	mov	r5, sp
 8001b42:	f106 0410 	add.w	r4, r6, #16
 8001b46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b52:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b56:	1d33      	adds	r3, r6, #4
 8001b58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b5a:	6838      	ldr	r0, [r7, #0]
 8001b5c:	f003 fb42 	bl	80051e4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b72 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001b72:	b590      	push	{r4, r7, lr}
 8001b74:	b089      	sub	sp, #36	; 0x24
 8001b76:	af04      	add	r7, sp, #16
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	4608      	mov	r0, r1
 8001b7c:	4611      	mov	r1, r2
 8001b7e:	461a      	mov	r2, r3
 8001b80:	4603      	mov	r3, r0
 8001b82:	70fb      	strb	r3, [r7, #3]
 8001b84:	460b      	mov	r3, r1
 8001b86:	70bb      	strb	r3, [r7, #2]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d101      	bne.n	8001b9a <HAL_HCD_HC_Init+0x28>
 8001b96:	2302      	movs	r3, #2
 8001b98:	e07f      	b.n	8001c9a <HAL_HCD_HC_Init+0x128>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001ba2:	78fa      	ldrb	r2, [r7, #3]
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	440b      	add	r3, r1
 8001bb0:	333d      	adds	r3, #61	; 0x3d
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001bb6:	78fa      	ldrb	r2, [r7, #3]
 8001bb8:	6879      	ldr	r1, [r7, #4]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	440b      	add	r3, r1
 8001bc4:	3338      	adds	r3, #56	; 0x38
 8001bc6:	787a      	ldrb	r2, [r7, #1]
 8001bc8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001bca:	78fa      	ldrb	r2, [r7, #3]
 8001bcc:	6879      	ldr	r1, [r7, #4]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	440b      	add	r3, r1
 8001bd8:	3340      	adds	r3, #64	; 0x40
 8001bda:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001bdc:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001bde:	78fa      	ldrb	r2, [r7, #3]
 8001be0:	6879      	ldr	r1, [r7, #4]
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	440b      	add	r3, r1
 8001bec:	3339      	adds	r3, #57	; 0x39
 8001bee:	78fa      	ldrb	r2, [r7, #3]
 8001bf0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001bf2:	78fa      	ldrb	r2, [r7, #3]
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	440b      	add	r3, r1
 8001c00:	333f      	adds	r3, #63	; 0x3f
 8001c02:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001c06:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001c08:	78fa      	ldrb	r2, [r7, #3]
 8001c0a:	78bb      	ldrb	r3, [r7, #2]
 8001c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c10:	b2d8      	uxtb	r0, r3
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	4613      	mov	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	440b      	add	r3, r1
 8001c1e:	333a      	adds	r3, #58	; 0x3a
 8001c20:	4602      	mov	r2, r0
 8001c22:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001c24:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	da0a      	bge.n	8001c42 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001c2c:	78fa      	ldrb	r2, [r7, #3]
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	440b      	add	r3, r1
 8001c3a:	333b      	adds	r3, #59	; 0x3b
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	701a      	strb	r2, [r3, #0]
 8001c40:	e009      	b.n	8001c56 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001c42:	78fa      	ldrb	r2, [r7, #3]
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	440b      	add	r3, r1
 8001c50:	333b      	adds	r3, #59	; 0x3b
 8001c52:	2200      	movs	r2, #0
 8001c54:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001c56:	78fa      	ldrb	r2, [r7, #3]
 8001c58:	6879      	ldr	r1, [r7, #4]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	440b      	add	r3, r1
 8001c64:	333c      	adds	r3, #60	; 0x3c
 8001c66:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001c6a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6818      	ldr	r0, [r3, #0]
 8001c70:	787c      	ldrb	r4, [r7, #1]
 8001c72:	78ba      	ldrb	r2, [r7, #2]
 8001c74:	78f9      	ldrb	r1, [r7, #3]
 8001c76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c78:	9302      	str	r3, [sp, #8]
 8001c7a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001c7e:	9301      	str	r3, [sp, #4]
 8001c80:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	4623      	mov	r3, r4
 8001c88:	f003 fc2e 	bl	80054e8 <USB_HC_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd90      	pop	{r4, r7, pc}

08001ca2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b084      	sub	sp, #16
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	460b      	mov	r3, r1
 8001cac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d101      	bne.n	8001cc0 <HAL_HCD_HC_Halt+0x1e>
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	e00f      	b.n	8001ce0 <HAL_HCD_HC_Halt+0x3e>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	78fa      	ldrb	r2, [r7, #3]
 8001cce:	4611      	mov	r1, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f003 fe6a 	bl	80059aa <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	4608      	mov	r0, r1
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	70fb      	strb	r3, [r7, #3]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	70bb      	strb	r3, [r7, #2]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001d02:	78fa      	ldrb	r2, [r7, #3]
 8001d04:	6879      	ldr	r1, [r7, #4]
 8001d06:	4613      	mov	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4413      	add	r3, r2
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	440b      	add	r3, r1
 8001d10:	333b      	adds	r3, #59	; 0x3b
 8001d12:	78ba      	ldrb	r2, [r7, #2]
 8001d14:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001d16:	78fa      	ldrb	r2, [r7, #3]
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	440b      	add	r3, r1
 8001d24:	333f      	adds	r3, #63	; 0x3f
 8001d26:	787a      	ldrb	r2, [r7, #1]
 8001d28:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001d2a:	7c3b      	ldrb	r3, [r7, #16]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d114      	bne.n	8001d5a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001d30:	78fa      	ldrb	r2, [r7, #3]
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	4613      	mov	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	440b      	add	r3, r1
 8001d3e:	3342      	adds	r3, #66	; 0x42
 8001d40:	2203      	movs	r2, #3
 8001d42:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001d44:	78fa      	ldrb	r2, [r7, #3]
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	4413      	add	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	440b      	add	r3, r1
 8001d52:	333d      	adds	r3, #61	; 0x3d
 8001d54:	7f3a      	ldrb	r2, [r7, #28]
 8001d56:	701a      	strb	r2, [r3, #0]
 8001d58:	e009      	b.n	8001d6e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d5a:	78fa      	ldrb	r2, [r7, #3]
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	440b      	add	r3, r1
 8001d68:	3342      	adds	r3, #66	; 0x42
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001d6e:	787b      	ldrb	r3, [r7, #1]
 8001d70:	2b03      	cmp	r3, #3
 8001d72:	f200 80d6 	bhi.w	8001f22 <HAL_HCD_HC_SubmitRequest+0x23a>
 8001d76:	a201      	add	r2, pc, #4	; (adr r2, 8001d7c <HAL_HCD_HC_SubmitRequest+0x94>)
 8001d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d7c:	08001d8d 	.word	0x08001d8d
 8001d80:	08001f0d 	.word	0x08001f0d
 8001d84:	08001df9 	.word	0x08001df9
 8001d88:	08001e83 	.word	0x08001e83
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001d8c:	7c3b      	ldrb	r3, [r7, #16]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	f040 80c9 	bne.w	8001f26 <HAL_HCD_HC_SubmitRequest+0x23e>
 8001d94:	78bb      	ldrb	r3, [r7, #2]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f040 80c5 	bne.w	8001f26 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001d9c:	8b3b      	ldrh	r3, [r7, #24]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d109      	bne.n	8001db6 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001da2:	78fa      	ldrb	r2, [r7, #3]
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	440b      	add	r3, r1
 8001db0:	3351      	adds	r3, #81	; 0x51
 8001db2:	2201      	movs	r2, #1
 8001db4:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001db6:	78fa      	ldrb	r2, [r7, #3]
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	440b      	add	r3, r1
 8001dc4:	3351      	adds	r3, #81	; 0x51
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10a      	bne.n	8001de2 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001dcc:	78fa      	ldrb	r2, [r7, #3]
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	440b      	add	r3, r1
 8001dda:	3342      	adds	r3, #66	; 0x42
 8001ddc:	2200      	movs	r2, #0
 8001dde:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001de0:	e0a1      	b.n	8001f26 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001de2:	78fa      	ldrb	r2, [r7, #3]
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	440b      	add	r3, r1
 8001df0:	3342      	adds	r3, #66	; 0x42
 8001df2:	2202      	movs	r2, #2
 8001df4:	701a      	strb	r2, [r3, #0]
      break;
 8001df6:	e096      	b.n	8001f26 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001df8:	78bb      	ldrb	r3, [r7, #2]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d120      	bne.n	8001e40 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001dfe:	78fa      	ldrb	r2, [r7, #3]
 8001e00:	6879      	ldr	r1, [r7, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	440b      	add	r3, r1
 8001e0c:	3351      	adds	r3, #81	; 0x51
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10a      	bne.n	8001e2a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e14:	78fa      	ldrb	r2, [r7, #3]
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	440b      	add	r3, r1
 8001e22:	3342      	adds	r3, #66	; 0x42
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001e28:	e07e      	b.n	8001f28 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e2a:	78fa      	ldrb	r2, [r7, #3]
 8001e2c:	6879      	ldr	r1, [r7, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	440b      	add	r3, r1
 8001e38:	3342      	adds	r3, #66	; 0x42
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	701a      	strb	r2, [r3, #0]
      break;
 8001e3e:	e073      	b.n	8001f28 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001e40:	78fa      	ldrb	r2, [r7, #3]
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	440b      	add	r3, r1
 8001e4e:	3350      	adds	r3, #80	; 0x50
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10a      	bne.n	8001e6c <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e56:	78fa      	ldrb	r2, [r7, #3]
 8001e58:	6879      	ldr	r1, [r7, #4]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	440b      	add	r3, r1
 8001e64:	3342      	adds	r3, #66	; 0x42
 8001e66:	2200      	movs	r2, #0
 8001e68:	701a      	strb	r2, [r3, #0]
      break;
 8001e6a:	e05d      	b.n	8001f28 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e6c:	78fa      	ldrb	r2, [r7, #3]
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	440b      	add	r3, r1
 8001e7a:	3342      	adds	r3, #66	; 0x42
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	701a      	strb	r2, [r3, #0]
      break;
 8001e80:	e052      	b.n	8001f28 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001e82:	78bb      	ldrb	r3, [r7, #2]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d120      	bne.n	8001eca <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001e88:	78fa      	ldrb	r2, [r7, #3]
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	440b      	add	r3, r1
 8001e96:	3351      	adds	r3, #81	; 0x51
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10a      	bne.n	8001eb4 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e9e:	78fa      	ldrb	r2, [r7, #3]
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	440b      	add	r3, r1
 8001eac:	3342      	adds	r3, #66	; 0x42
 8001eae:	2200      	movs	r2, #0
 8001eb0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001eb2:	e039      	b.n	8001f28 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001eb4:	78fa      	ldrb	r2, [r7, #3]
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	440b      	add	r3, r1
 8001ec2:	3342      	adds	r3, #66	; 0x42
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	701a      	strb	r2, [r3, #0]
      break;
 8001ec8:	e02e      	b.n	8001f28 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001eca:	78fa      	ldrb	r2, [r7, #3]
 8001ecc:	6879      	ldr	r1, [r7, #4]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	440b      	add	r3, r1
 8001ed8:	3350      	adds	r3, #80	; 0x50
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d10a      	bne.n	8001ef6 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ee0:	78fa      	ldrb	r2, [r7, #3]
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	440b      	add	r3, r1
 8001eee:	3342      	adds	r3, #66	; 0x42
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	701a      	strb	r2, [r3, #0]
      break;
 8001ef4:	e018      	b.n	8001f28 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ef6:	78fa      	ldrb	r2, [r7, #3]
 8001ef8:	6879      	ldr	r1, [r7, #4]
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	440b      	add	r3, r1
 8001f04:	3342      	adds	r3, #66	; 0x42
 8001f06:	2202      	movs	r2, #2
 8001f08:	701a      	strb	r2, [r3, #0]
      break;
 8001f0a:	e00d      	b.n	8001f28 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f0c:	78fa      	ldrb	r2, [r7, #3]
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	440b      	add	r3, r1
 8001f1a:	3342      	adds	r3, #66	; 0x42
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	701a      	strb	r2, [r3, #0]
      break;
 8001f20:	e002      	b.n	8001f28 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001f22:	bf00      	nop
 8001f24:	e000      	b.n	8001f28 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001f26:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001f28:	78fa      	ldrb	r2, [r7, #3]
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	440b      	add	r3, r1
 8001f36:	3344      	adds	r3, #68	; 0x44
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001f3c:	78fa      	ldrb	r2, [r7, #3]
 8001f3e:	8b39      	ldrh	r1, [r7, #24]
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	4613      	mov	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4403      	add	r3, r0
 8001f4c:	3348      	adds	r3, #72	; 0x48
 8001f4e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001f50:	78fa      	ldrb	r2, [r7, #3]
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	440b      	add	r3, r1
 8001f5e:	335c      	adds	r3, #92	; 0x5c
 8001f60:	2200      	movs	r2, #0
 8001f62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001f64:	78fa      	ldrb	r2, [r7, #3]
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	440b      	add	r3, r1
 8001f72:	334c      	adds	r3, #76	; 0x4c
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f78:	78fa      	ldrb	r2, [r7, #3]
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	440b      	add	r3, r1
 8001f86:	3339      	adds	r3, #57	; 0x39
 8001f88:	78fa      	ldrb	r2, [r7, #3]
 8001f8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001f8c:	78fa      	ldrb	r2, [r7, #3]
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	4613      	mov	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	440b      	add	r3, r1
 8001f9a:	335d      	adds	r3, #93	; 0x5d
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6818      	ldr	r0, [r3, #0]
 8001fa4:	78fa      	ldrb	r2, [r7, #3]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	3338      	adds	r3, #56	; 0x38
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	18d1      	adds	r1, r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	461a      	mov	r2, r3
 8001fbc:	f003 fb9e 	bl	80056fc <USB_HC_StartXfer>
 8001fc0:	4603      	mov	r3, r0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop

08001fcc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f003 f8bb 	bl	800515e <USB_GetMode>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	f040 80ef 	bne.w	80021ce <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f003 f89f 	bl	8005138 <USB_ReadInterrupts>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 80e5 	beq.w	80021cc <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f003 f896 	bl	8005138 <USB_ReadInterrupts>
 800200c:	4603      	mov	r3, r0
 800200e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002012:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002016:	d104      	bne.n	8002022 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002020:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f003 f886 	bl	8005138 <USB_ReadInterrupts>
 800202c:	4603      	mov	r3, r0
 800202e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002032:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002036:	d104      	bne.n	8002042 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002040:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f003 f876 	bl	8005138 <USB_ReadInterrupts>
 800204c:	4603      	mov	r3, r0
 800204e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002052:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002056:	d104      	bne.n	8002062 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002060:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f003 f866 	bl	8005138 <USB_ReadInterrupts>
 800206c:	4603      	mov	r3, r0
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b02      	cmp	r3, #2
 8002074:	d103      	bne.n	800207e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2202      	movs	r2, #2
 800207c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f003 f858 	bl	8005138 <USB_ReadInterrupts>
 8002088:	4603      	mov	r3, r0
 800208a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800208e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002092:	d115      	bne.n	80020c0 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800209c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d108      	bne.n	80020c0 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f008 fe1e 	bl	800acf0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2101      	movs	r1, #1
 80020ba:	4618      	mov	r0, r3
 80020bc:	f003 f94e 	bl	800535c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f003 f837 	bl	8005138 <USB_ReadInterrupts>
 80020ca:	4603      	mov	r3, r0
 80020cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020d4:	d102      	bne.n	80020dc <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f001 f966 	bl	80033a8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f003 f829 	bl	8005138 <USB_ReadInterrupts>
 80020e6:	4603      	mov	r3, r0
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d106      	bne.n	80020fe <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f008 fde1 	bl	800acb8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2208      	movs	r2, #8
 80020fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f003 f818 	bl	8005138 <USB_ReadInterrupts>
 8002108:	4603      	mov	r3, r0
 800210a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002112:	d138      	bne.n	8002186 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f003 fc35 	bl	8005988 <USB_HC_ReadInterrupt>
 800211e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	e025      	b.n	8002172 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f003 030f 	and.w	r3, r3, #15
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	fa22 f303 	lsr.w	r3, r2, r3
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d018      	beq.n	800216c <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	015a      	lsls	r2, r3, #5
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	4413      	add	r3, r2
 8002142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800214c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002150:	d106      	bne.n	8002160 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	4619      	mov	r1, r3
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 f8cf 	bl	80022fc <HCD_HC_IN_IRQHandler>
 800215e:	e005      	b.n	800216c <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	b2db      	uxtb	r3, r3
 8002164:	4619      	mov	r1, r3
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 fcfd 	bl	8002b66 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	3301      	adds	r3, #1
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	429a      	cmp	r2, r3
 800217a:	d3d4      	bcc.n	8002126 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002184:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f002 ffd4 	bl	8005138 <USB_ReadInterrupts>
 8002190:	4603      	mov	r3, r0
 8002192:	f003 0310 	and.w	r3, r3, #16
 8002196:	2b10      	cmp	r3, #16
 8002198:	d101      	bne.n	800219e <HAL_HCD_IRQHandler+0x1d2>
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <HAL_HCD_IRQHandler+0x1d4>
 800219e:	2300      	movs	r3, #0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d014      	beq.n	80021ce <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	699a      	ldr	r2, [r3, #24]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 0210 	bic.w	r2, r2, #16
 80021b2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f001 f84b 	bl	8003250 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	699a      	ldr	r2, [r3, #24]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f042 0210 	orr.w	r2, r2, #16
 80021c8:	619a      	str	r2, [r3, #24]
 80021ca:	e000      	b.n	80021ce <HAL_HCD_IRQHandler+0x202>
      return;
 80021cc:	bf00      	nop
    }
  }
}
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d101      	bne.n	80021ea <HAL_HCD_Start+0x16>
 80021e6:	2302      	movs	r3, #2
 80021e8:	e013      	b.n	8002212 <HAL_HCD_Start+0x3e>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f002 feab 	bl	8004f52 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2101      	movs	r1, #1
 8002202:	4618      	mov	r0, r3
 8002204:	f003 f90e 	bl	8005424 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002228:	2b01      	cmp	r3, #1
 800222a:	d101      	bne.n	8002230 <HAL_HCD_Stop+0x16>
 800222c:	2302      	movs	r3, #2
 800222e:	e00d      	b.n	800224c <HAL_HCD_Stop+0x32>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f003 fcef 	bl	8005c20 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f003 f8b5 	bl	80053d0 <USB_ResetPort>
 8002266:	4603      	mov	r3, r0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800227c:	78fa      	ldrb	r2, [r7, #3]
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	440b      	add	r3, r1
 800228a:	335c      	adds	r3, #92	; 0x5c
 800228c:	781b      	ldrb	r3, [r3, #0]
}
 800228e:	4618      	mov	r0, r3
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
 80022a2:	460b      	mov	r3, r1
 80022a4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80022a6:	78fa      	ldrb	r2, [r7, #3]
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	4613      	mov	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	440b      	add	r3, r1
 80022b4:	334c      	adds	r3, #76	; 0x4c
 80022b6:	681b      	ldr	r3, [r3, #0]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f003 f8f7 	bl	80054c4 <USB_GetCurrentFrame>
 80022d6:	4603      	mov	r3, r0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f003 f8d2 	bl	8005496 <USB_GetHostSpeed>
 80022f2:	4603      	mov	r3, r0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002312:	78fb      	ldrb	r3, [r7, #3]
 8002314:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4413      	add	r3, r2
 800231e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b04      	cmp	r3, #4
 800232a:	d119      	bne.n	8002360 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	015a      	lsls	r2, r3, #5
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	4413      	add	r3, r2
 8002334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002338:	461a      	mov	r2, r3
 800233a:	2304      	movs	r3, #4
 800233c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	015a      	lsls	r2, r3, #5
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4413      	add	r3, r2
 8002346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	0151      	lsls	r1, r2, #5
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	440a      	add	r2, r1
 8002354:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002358:	f043 0302 	orr.w	r3, r3, #2
 800235c:	60d3      	str	r3, [r2, #12]
 800235e:	e0ce      	b.n	80024fe <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	015a      	lsls	r2, r3, #5
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	4413      	add	r3, r2
 8002368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002376:	d12c      	bne.n	80023d2 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	015a      	lsls	r2, r3, #5
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	4413      	add	r3, r2
 8002380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002384:	461a      	mov	r2, r3
 8002386:	f44f 7380 	mov.w	r3, #256	; 0x100
 800238a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	4613      	mov	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	440b      	add	r3, r1
 800239a:	335d      	adds	r3, #93	; 0x5d
 800239c:	2207      	movs	r2, #7
 800239e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	015a      	lsls	r2, r3, #5
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4413      	add	r3, r2
 80023a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	0151      	lsls	r1, r2, #5
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	440a      	add	r2, r1
 80023b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023ba:	f043 0302 	orr.w	r3, r3, #2
 80023be:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	4611      	mov	r1, r2
 80023ca:	4618      	mov	r0, r3
 80023cc:	f003 faed 	bl	80059aa <USB_HC_Halt>
 80023d0:	e095      	b.n	80024fe <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	015a      	lsls	r2, r3, #5
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4413      	add	r3, r2
 80023da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 0320 	and.w	r3, r3, #32
 80023e4:	2b20      	cmp	r3, #32
 80023e6:	d109      	bne.n	80023fc <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	015a      	lsls	r2, r3, #5
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f4:	461a      	mov	r2, r3
 80023f6:	2320      	movs	r3, #32
 80023f8:	6093      	str	r3, [r2, #8]
 80023fa:	e080      	b.n	80024fe <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	015a      	lsls	r2, r3, #5
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4413      	add	r3, r2
 8002404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	2b08      	cmp	r3, #8
 8002410:	d134      	bne.n	800247c <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	015a      	lsls	r2, r3, #5
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	4413      	add	r3, r2
 800241a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	0151      	lsls	r1, r2, #5
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	440a      	add	r2, r1
 8002428:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800242c:	f043 0302 	orr.w	r3, r3, #2
 8002430:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	4613      	mov	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	440b      	add	r3, r1
 8002440:	335d      	adds	r3, #93	; 0x5d
 8002442:	2205      	movs	r2, #5
 8002444:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	015a      	lsls	r2, r3, #5
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4413      	add	r3, r2
 800244e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002452:	461a      	mov	r2, r3
 8002454:	2310      	movs	r3, #16
 8002456:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	015a      	lsls	r2, r3, #5
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4413      	add	r3, r2
 8002460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002464:	461a      	mov	r2, r3
 8002466:	2308      	movs	r3, #8
 8002468:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	4611      	mov	r1, r2
 8002474:	4618      	mov	r0, r3
 8002476:	f003 fa98 	bl	80059aa <USB_HC_Halt>
 800247a:	e040      	b.n	80024fe <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	015a      	lsls	r2, r3, #5
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	4413      	add	r3, r2
 8002484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800248e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002492:	d134      	bne.n	80024fe <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	015a      	lsls	r2, r3, #5
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4413      	add	r3, r2
 800249c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	0151      	lsls	r1, r2, #5
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	440a      	add	r2, r1
 80024aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024ae:	f043 0302 	orr.w	r3, r3, #2
 80024b2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	4611      	mov	r1, r2
 80024be:	4618      	mov	r0, r3
 80024c0:	f003 fa73 	bl	80059aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	015a      	lsls	r2, r3, #5
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d0:	461a      	mov	r2, r3
 80024d2:	2310      	movs	r3, #16
 80024d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	4613      	mov	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	440b      	add	r3, r1
 80024e4:	335d      	adds	r3, #93	; 0x5d
 80024e6:	2208      	movs	r2, #8
 80024e8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	015a      	lsls	r2, r3, #5
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	4413      	add	r3, r2
 80024f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f6:	461a      	mov	r2, r3
 80024f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024fc:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	015a      	lsls	r2, r3, #5
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4413      	add	r3, r2
 8002506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002514:	d122      	bne.n	800255c <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	015a      	lsls	r2, r3, #5
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	4413      	add	r3, r2
 800251e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	0151      	lsls	r1, r2, #5
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	440a      	add	r2, r1
 800252c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002530:	f043 0302 	orr.w	r3, r3, #2
 8002534:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	4611      	mov	r1, r2
 8002540:	4618      	mov	r0, r3
 8002542:	f003 fa32 	bl	80059aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	015a      	lsls	r2, r3, #5
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4413      	add	r3, r2
 800254e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002552:	461a      	mov	r2, r3
 8002554:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002558:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800255a:	e300      	b.n	8002b5e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	015a      	lsls	r2, r3, #5
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	4413      	add	r3, r2
 8002564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b01      	cmp	r3, #1
 8002570:	f040 80fd 	bne.w	800276e <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d01b      	beq.n	80025b4 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	440b      	add	r3, r1
 800258a:	3348      	adds	r3, #72	; 0x48
 800258c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	0159      	lsls	r1, r3, #5
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	440b      	add	r3, r1
 8002596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80025a0:	1ad1      	subs	r1, r2, r3
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	4403      	add	r3, r0
 80025b0:	334c      	adds	r3, #76	; 0x4c
 80025b2:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	4613      	mov	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	440b      	add	r3, r1
 80025c2:	335d      	adds	r3, #93	; 0x5d
 80025c4:	2201      	movs	r2, #1
 80025c6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	440b      	add	r3, r1
 80025d6:	3358      	adds	r3, #88	; 0x58
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	015a      	lsls	r2, r3, #5
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	4413      	add	r3, r2
 80025e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e8:	461a      	mov	r2, r3
 80025ea:	2301      	movs	r3, #1
 80025ec:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	4613      	mov	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	440b      	add	r3, r1
 80025fc:	333f      	adds	r3, #63	; 0x3f
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00a      	beq.n	800261a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	440b      	add	r3, r1
 8002612:	333f      	adds	r3, #63	; 0x3f
 8002614:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002616:	2b02      	cmp	r3, #2
 8002618:	d121      	bne.n	800265e <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	015a      	lsls	r2, r3, #5
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	4413      	add	r3, r2
 8002622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	0151      	lsls	r1, r2, #5
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	440a      	add	r2, r1
 8002630:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002634:	f043 0302 	orr.w	r3, r3, #2
 8002638:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	4611      	mov	r1, r2
 8002644:	4618      	mov	r0, r3
 8002646:	f003 f9b0 	bl	80059aa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	015a      	lsls	r2, r3, #5
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4413      	add	r3, r2
 8002652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002656:	461a      	mov	r2, r3
 8002658:	2310      	movs	r3, #16
 800265a:	6093      	str	r3, [r2, #8]
 800265c:	e070      	b.n	8002740 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	440b      	add	r3, r1
 800266c:	333f      	adds	r3, #63	; 0x3f
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b03      	cmp	r3, #3
 8002672:	d12a      	bne.n	80026ca <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	015a      	lsls	r2, r3, #5
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	4413      	add	r3, r2
 800267c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	0151      	lsls	r1, r2, #5
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	440a      	add	r2, r1
 800268a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800268e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002692:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	4613      	mov	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	440b      	add	r3, r1
 80026a2:	335c      	adds	r3, #92	; 0x5c
 80026a4:	2201      	movs	r2, #1
 80026a6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	b2d8      	uxtb	r0, r3
 80026ac:	6879      	ldr	r1, [r7, #4]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	4613      	mov	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	440b      	add	r3, r1
 80026ba:	335c      	adds	r3, #92	; 0x5c
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	461a      	mov	r2, r3
 80026c0:	4601      	mov	r1, r0
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f008 fb22 	bl	800ad0c <HAL_HCD_HC_NotifyURBChange_Callback>
 80026c8:	e03a      	b.n	8002740 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	4613      	mov	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	440b      	add	r3, r1
 80026d8:	333f      	adds	r3, #63	; 0x3f
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d12f      	bne.n	8002740 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	4613      	mov	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	440b      	add	r3, r1
 80026ee:	335c      	adds	r3, #92	; 0x5c
 80026f0:	2201      	movs	r2, #1
 80026f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80026f4:	6879      	ldr	r1, [r7, #4]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	4613      	mov	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	440b      	add	r3, r1
 8002702:	3350      	adds	r3, #80	; 0x50
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	f083 0301 	eor.w	r3, r3, #1
 800270a:	b2d8      	uxtb	r0, r3
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	4613      	mov	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	440b      	add	r3, r1
 800271a:	3350      	adds	r3, #80	; 0x50
 800271c:	4602      	mov	r2, r0
 800271e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	b2d8      	uxtb	r0, r3
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	4613      	mov	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	440b      	add	r3, r1
 8002732:	335c      	adds	r3, #92	; 0x5c
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	461a      	mov	r2, r3
 8002738:	4601      	mov	r1, r0
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f008 fae6 	bl	800ad0c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	4613      	mov	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	440b      	add	r3, r1
 800274e:	3350      	adds	r3, #80	; 0x50
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	f083 0301 	eor.w	r3, r3, #1
 8002756:	b2d8      	uxtb	r0, r3
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	4613      	mov	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	440b      	add	r3, r1
 8002766:	3350      	adds	r3, #80	; 0x50
 8002768:	4602      	mov	r2, r0
 800276a:	701a      	strb	r2, [r3, #0]
}
 800276c:	e1f7      	b.n	8002b5e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	015a      	lsls	r2, r3, #5
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4413      	add	r3, r2
 8002776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b02      	cmp	r3, #2
 8002782:	f040 811a 	bne.w	80029ba <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	015a      	lsls	r2, r3, #5
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4413      	add	r3, r2
 800278e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	0151      	lsls	r1, r2, #5
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	440a      	add	r2, r1
 800279c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027a0:	f023 0302 	bic.w	r3, r3, #2
 80027a4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	440b      	add	r3, r1
 80027b4:	335d      	adds	r3, #93	; 0x5d
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d10a      	bne.n	80027d2 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	4613      	mov	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	440b      	add	r3, r1
 80027ca:	335c      	adds	r3, #92	; 0x5c
 80027cc:	2201      	movs	r2, #1
 80027ce:	701a      	strb	r2, [r3, #0]
 80027d0:	e0d9      	b.n	8002986 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	4613      	mov	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	440b      	add	r3, r1
 80027e0:	335d      	adds	r3, #93	; 0x5d
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b05      	cmp	r3, #5
 80027e6:	d10a      	bne.n	80027fe <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	4613      	mov	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	440b      	add	r3, r1
 80027f6:	335c      	adds	r3, #92	; 0x5c
 80027f8:	2205      	movs	r2, #5
 80027fa:	701a      	strb	r2, [r3, #0]
 80027fc:	e0c3      	b.n	8002986 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	440b      	add	r3, r1
 800280c:	335d      	adds	r3, #93	; 0x5d
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b06      	cmp	r3, #6
 8002812:	d00a      	beq.n	800282a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	4613      	mov	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	440b      	add	r3, r1
 8002822:	335d      	adds	r3, #93	; 0x5d
 8002824:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002826:	2b08      	cmp	r3, #8
 8002828:	d156      	bne.n	80028d8 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	440b      	add	r3, r1
 8002838:	3358      	adds	r3, #88	; 0x58
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	1c59      	adds	r1, r3, #1
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	4613      	mov	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4403      	add	r3, r0
 800284c:	3358      	adds	r3, #88	; 0x58
 800284e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	4613      	mov	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	440b      	add	r3, r1
 800285e:	3358      	adds	r3, #88	; 0x58
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2b03      	cmp	r3, #3
 8002864:	d914      	bls.n	8002890 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	4613      	mov	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	440b      	add	r3, r1
 8002874:	3358      	adds	r3, #88	; 0x58
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	4613      	mov	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	440b      	add	r3, r1
 8002888:	335c      	adds	r3, #92	; 0x5c
 800288a:	2204      	movs	r2, #4
 800288c:	701a      	strb	r2, [r3, #0]
 800288e:	e009      	b.n	80028a4 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	4613      	mov	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	440b      	add	r3, r1
 800289e:	335c      	adds	r3, #92	; 0x5c
 80028a0:	2202      	movs	r2, #2
 80028a2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80028ba:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028c2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	015a      	lsls	r2, r3, #5
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4413      	add	r3, r2
 80028cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d0:	461a      	mov	r2, r3
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	e056      	b.n	8002986 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	440b      	add	r3, r1
 80028e6:	335d      	adds	r3, #93	; 0x5d
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2b03      	cmp	r3, #3
 80028ec:	d123      	bne.n	8002936 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	440b      	add	r3, r1
 80028fc:	335c      	adds	r3, #92	; 0x5c
 80028fe:	2202      	movs	r2, #2
 8002900:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	015a      	lsls	r2, r3, #5
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	4413      	add	r3, r2
 800290a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002918:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002920:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	015a      	lsls	r2, r3, #5
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4413      	add	r3, r2
 800292a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292e:	461a      	mov	r2, r3
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	6013      	str	r3, [r2, #0]
 8002934:	e027      	b.n	8002986 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	4613      	mov	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	440b      	add	r3, r1
 8002944:	335d      	adds	r3, #93	; 0x5d
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b07      	cmp	r3, #7
 800294a:	d11c      	bne.n	8002986 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	4613      	mov	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	440b      	add	r3, r1
 800295a:	3358      	adds	r3, #88	; 0x58
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	1c59      	adds	r1, r3, #1
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	4613      	mov	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4403      	add	r3, r0
 800296e:	3358      	adds	r3, #88	; 0x58
 8002970:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	4613      	mov	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4413      	add	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	440b      	add	r3, r1
 8002980:	335c      	adds	r3, #92	; 0x5c
 8002982:	2204      	movs	r2, #4
 8002984:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	015a      	lsls	r2, r3, #5
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4413      	add	r3, r2
 800298e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002992:	461a      	mov	r2, r3
 8002994:	2302      	movs	r3, #2
 8002996:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	b2d8      	uxtb	r0, r3
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	440b      	add	r3, r1
 80029aa:	335c      	adds	r3, #92	; 0x5c
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	461a      	mov	r2, r3
 80029b0:	4601      	mov	r1, r0
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f008 f9aa 	bl	800ad0c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80029b8:	e0d1      	b.n	8002b5e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	015a      	lsls	r2, r3, #5
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4413      	add	r3, r2
 80029c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029cc:	2b80      	cmp	r3, #128	; 0x80
 80029ce:	d13e      	bne.n	8002a4e <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	0151      	lsls	r1, r2, #5
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	440a      	add	r2, r1
 80029e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029ea:	f043 0302 	orr.w	r3, r3, #2
 80029ee:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	440b      	add	r3, r1
 80029fe:	3358      	adds	r3, #88	; 0x58
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	1c59      	adds	r1, r3, #1
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	4403      	add	r3, r0
 8002a12:	3358      	adds	r3, #88	; 0x58
 8002a14:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	440b      	add	r3, r1
 8002a24:	335d      	adds	r3, #93	; 0x5d
 8002a26:	2206      	movs	r2, #6
 8002a28:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	4611      	mov	r1, r2
 8002a34:	4618      	mov	r0, r3
 8002a36:	f002 ffb8 	bl	80059aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	015a      	lsls	r2, r3, #5
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a46:	461a      	mov	r2, r3
 8002a48:	2380      	movs	r3, #128	; 0x80
 8002a4a:	6093      	str	r3, [r2, #8]
}
 8002a4c:	e087      	b.n	8002b5e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	015a      	lsls	r2, r3, #5
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	4413      	add	r3, r2
 8002a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 0310 	and.w	r3, r3, #16
 8002a60:	2b10      	cmp	r3, #16
 8002a62:	d17c      	bne.n	8002b5e <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	440b      	add	r3, r1
 8002a72:	333f      	adds	r3, #63	; 0x3f
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	d122      	bne.n	8002ac0 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	440b      	add	r3, r1
 8002a88:	3358      	adds	r3, #88	; 0x58
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	015a      	lsls	r2, r3, #5
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	4413      	add	r3, r2
 8002a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	0151      	lsls	r1, r2, #5
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	440a      	add	r2, r1
 8002aa4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002aa8:	f043 0302 	orr.w	r3, r3, #2
 8002aac:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	b2d2      	uxtb	r2, r2
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f002 ff76 	bl	80059aa <USB_HC_Halt>
 8002abe:	e045      	b.n	8002b4c <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	440b      	add	r3, r1
 8002ace:	333f      	adds	r3, #63	; 0x3f
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00a      	beq.n	8002aec <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	4613      	mov	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	440b      	add	r3, r1
 8002ae4:	333f      	adds	r3, #63	; 0x3f
 8002ae6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d12f      	bne.n	8002b4c <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	4613      	mov	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	440b      	add	r3, r1
 8002afa:	3358      	adds	r3, #88	; 0x58
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d121      	bne.n	8002b4c <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	440b      	add	r3, r1
 8002b16:	335d      	adds	r3, #93	; 0x5d
 8002b18:	2203      	movs	r2, #3
 8002b1a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	0151      	lsls	r1, r2, #5
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	440a      	add	r2, r1
 8002b32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b36:	f043 0302 	orr.w	r3, r3, #2
 8002b3a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	4611      	mov	r1, r2
 8002b46:	4618      	mov	r0, r3
 8002b48:	f002 ff2f 	bl	80059aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	015a      	lsls	r2, r3, #5
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	4413      	add	r3, r2
 8002b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b58:	461a      	mov	r2, r3
 8002b5a:	2310      	movs	r3, #16
 8002b5c:	6093      	str	r3, [r2, #8]
}
 8002b5e:	bf00      	nop
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b086      	sub	sp, #24
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
 8002b6e:	460b      	mov	r3, r1
 8002b70:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	015a      	lsls	r2, r3, #5
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d119      	bne.n	8002bca <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	015a      	lsls	r2, r3, #5
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	2304      	movs	r3, #4
 8002ba6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	015a      	lsls	r2, r3, #5
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	0151      	lsls	r1, r2, #5
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	440a      	add	r2, r1
 8002bbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bc2:	f043 0302 	orr.w	r3, r3, #2
 8002bc6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002bc8:	e33e      	b.n	8003248 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	015a      	lsls	r2, r3, #5
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	2b20      	cmp	r3, #32
 8002bde:	d141      	bne.n	8002c64 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	015a      	lsls	r2, r3, #5
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	4413      	add	r3, r2
 8002be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bec:	461a      	mov	r2, r3
 8002bee:	2320      	movs	r3, #32
 8002bf0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	440b      	add	r3, r1
 8002c00:	333d      	adds	r3, #61	; 0x3d
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	f040 831f 	bne.w	8003248 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	440b      	add	r3, r1
 8002c18:	333d      	adds	r3, #61	; 0x3d
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	4613      	mov	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	440b      	add	r3, r1
 8002c2c:	335c      	adds	r3, #92	; 0x5c
 8002c2e:	2202      	movs	r2, #2
 8002c30:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	015a      	lsls	r2, r3, #5
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	4413      	add	r3, r2
 8002c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	0151      	lsls	r1, r2, #5
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	440a      	add	r2, r1
 8002c48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c4c:	f043 0302 	orr.w	r3, r3, #2
 8002c50:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f002 fea4 	bl	80059aa <USB_HC_Halt>
}
 8002c62:	e2f1      	b.n	8003248 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	015a      	lsls	r2, r3, #5
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c76:	2b40      	cmp	r3, #64	; 0x40
 8002c78:	d13f      	bne.n	8002cfa <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	440b      	add	r3, r1
 8002c88:	335d      	adds	r3, #93	; 0x5d
 8002c8a:	2204      	movs	r2, #4
 8002c8c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	4613      	mov	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	440b      	add	r3, r1
 8002c9c:	333d      	adds	r3, #61	; 0x3d
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	440b      	add	r3, r1
 8002cb0:	3358      	adds	r3, #88	; 0x58
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	015a      	lsls	r2, r3, #5
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	0151      	lsls	r1, r2, #5
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	440a      	add	r2, r1
 8002ccc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cd0:	f043 0302 	orr.w	r3, r3, #2
 8002cd4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	4611      	mov	r1, r2
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f002 fe62 	bl	80059aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	015a      	lsls	r2, r3, #5
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4413      	add	r3, r2
 8002cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	2340      	movs	r3, #64	; 0x40
 8002cf6:	6093      	str	r3, [r2, #8]
}
 8002cf8:	e2a6      	b.n	8003248 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	015a      	lsls	r2, r3, #5
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	4413      	add	r3, r2
 8002d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d10:	d122      	bne.n	8002d58 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	015a      	lsls	r2, r3, #5
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	4413      	add	r3, r2
 8002d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	0151      	lsls	r1, r2, #5
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	440a      	add	r2, r1
 8002d28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d2c:	f043 0302 	orr.w	r3, r3, #2
 8002d30:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f002 fe34 	bl	80059aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	015a      	lsls	r2, r3, #5
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	4413      	add	r3, r2
 8002d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4e:	461a      	mov	r2, r3
 8002d50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d54:	6093      	str	r3, [r2, #8]
}
 8002d56:	e277      	b.n	8003248 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	015a      	lsls	r2, r3, #5
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	4413      	add	r3, r2
 8002d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d135      	bne.n	8002dda <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	440b      	add	r3, r1
 8002d7c:	3358      	adds	r3, #88	; 0x58
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	015a      	lsls	r2, r3, #5
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	4413      	add	r3, r2
 8002d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	0151      	lsls	r1, r2, #5
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	440a      	add	r2, r1
 8002d98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d9c:	f043 0302 	orr.w	r3, r3, #2
 8002da0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	4611      	mov	r1, r2
 8002dac:	4618      	mov	r0, r3
 8002dae:	f002 fdfc 	bl	80059aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	015a      	lsls	r2, r3, #5
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	4413      	add	r3, r2
 8002dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	440b      	add	r3, r1
 8002dd2:	335d      	adds	r3, #93	; 0x5d
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	701a      	strb	r2, [r3, #0]
}
 8002dd8:	e236      	b.n	8003248 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	015a      	lsls	r2, r3, #5
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4413      	add	r3, r2
 8002de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f003 0308 	and.w	r3, r3, #8
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d12b      	bne.n	8002e48 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	015a      	lsls	r2, r3, #5
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	4413      	add	r3, r2
 8002df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	2308      	movs	r3, #8
 8002e00:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	015a      	lsls	r2, r3, #5
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	0151      	lsls	r1, r2, #5
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	440a      	add	r2, r1
 8002e18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e1c:	f043 0302 	orr.w	r3, r3, #2
 8002e20:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f002 fdbc 	bl	80059aa <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	4613      	mov	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	440b      	add	r3, r1
 8002e40:	335d      	adds	r3, #93	; 0x5d
 8002e42:	2205      	movs	r2, #5
 8002e44:	701a      	strb	r2, [r3, #0]
}
 8002e46:	e1ff      	b.n	8003248 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	015a      	lsls	r2, r3, #5
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	4413      	add	r3, r2
 8002e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 0310 	and.w	r3, r3, #16
 8002e5a:	2b10      	cmp	r3, #16
 8002e5c:	d155      	bne.n	8002f0a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	4613      	mov	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	440b      	add	r3, r1
 8002e6c:	3358      	adds	r3, #88	; 0x58
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	4613      	mov	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	440b      	add	r3, r1
 8002e80:	335d      	adds	r3, #93	; 0x5d
 8002e82:	2203      	movs	r2, #3
 8002e84:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	440b      	add	r3, r1
 8002e94:	333d      	adds	r3, #61	; 0x3d
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d114      	bne.n	8002ec6 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	440b      	add	r3, r1
 8002eaa:	333c      	adds	r3, #60	; 0x3c
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d109      	bne.n	8002ec6 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	440b      	add	r3, r1
 8002ec0:	333d      	adds	r3, #61	; 0x3d
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	015a      	lsls	r2, r3, #5
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	4413      	add	r3, r2
 8002ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	0151      	lsls	r1, r2, #5
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	440a      	add	r2, r1
 8002edc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ee0:	f043 0302 	orr.w	r3, r3, #2
 8002ee4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	4611      	mov	r1, r2
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f002 fd5a 	bl	80059aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	015a      	lsls	r2, r3, #5
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4413      	add	r3, r2
 8002efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f02:	461a      	mov	r2, r3
 8002f04:	2310      	movs	r3, #16
 8002f06:	6093      	str	r3, [r2, #8]
}
 8002f08:	e19e      	b.n	8003248 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	015a      	lsls	r2, r3, #5
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	4413      	add	r3, r2
 8002f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1c:	2b80      	cmp	r3, #128	; 0x80
 8002f1e:	d12b      	bne.n	8002f78 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	015a      	lsls	r2, r3, #5
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	4413      	add	r3, r2
 8002f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	0151      	lsls	r1, r2, #5
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	440a      	add	r2, r1
 8002f36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f3a:	f043 0302 	orr.w	r3, r3, #2
 8002f3e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	4611      	mov	r1, r2
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f002 fd2d 	bl	80059aa <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	4613      	mov	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	440b      	add	r3, r1
 8002f5e:	335d      	adds	r3, #93	; 0x5d
 8002f60:	2206      	movs	r2, #6
 8002f62:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f70:	461a      	mov	r2, r3
 8002f72:	2380      	movs	r3, #128	; 0x80
 8002f74:	6093      	str	r3, [r2, #8]
}
 8002f76:	e167      	b.n	8003248 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	015a      	lsls	r2, r3, #5
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	4413      	add	r3, r2
 8002f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f8e:	d135      	bne.n	8002ffc <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	015a      	lsls	r2, r3, #5
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	4413      	add	r3, r2
 8002f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	0151      	lsls	r1, r2, #5
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	440a      	add	r2, r1
 8002fa6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002faa:	f043 0302 	orr.w	r3, r3, #2
 8002fae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	4611      	mov	r1, r2
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f002 fcf5 	bl	80059aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	015a      	lsls	r2, r3, #5
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fcc:	461a      	mov	r2, r3
 8002fce:	2310      	movs	r3, #16
 8002fd0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	015a      	lsls	r2, r3, #5
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	4413      	add	r3, r2
 8002fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fde:	461a      	mov	r2, r3
 8002fe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fe4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	4613      	mov	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	440b      	add	r3, r1
 8002ff4:	335d      	adds	r3, #93	; 0x5d
 8002ff6:	2208      	movs	r2, #8
 8002ff8:	701a      	strb	r2, [r3, #0]
}
 8002ffa:	e125      	b.n	8003248 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	015a      	lsls	r2, r3, #5
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	4413      	add	r3, r2
 8003004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b02      	cmp	r3, #2
 8003010:	f040 811a 	bne.w	8003248 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	015a      	lsls	r2, r3, #5
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4413      	add	r3, r2
 800301c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	0151      	lsls	r1, r2, #5
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	440a      	add	r2, r1
 800302a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800302e:	f023 0302 	bic.w	r3, r3, #2
 8003032:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	4613      	mov	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	440b      	add	r3, r1
 8003042:	335d      	adds	r3, #93	; 0x5d
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d137      	bne.n	80030ba <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	4613      	mov	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	440b      	add	r3, r1
 8003058:	335c      	adds	r3, #92	; 0x5c
 800305a:	2201      	movs	r2, #1
 800305c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	4613      	mov	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	440b      	add	r3, r1
 800306c:	333f      	adds	r3, #63	; 0x3f
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2b02      	cmp	r3, #2
 8003072:	d00b      	beq.n	800308c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	4613      	mov	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	440b      	add	r3, r1
 8003082:	333f      	adds	r3, #63	; 0x3f
 8003084:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003086:	2b03      	cmp	r3, #3
 8003088:	f040 80c5 	bne.w	8003216 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	440b      	add	r3, r1
 800309a:	3351      	adds	r3, #81	; 0x51
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	f083 0301 	eor.w	r3, r3, #1
 80030a2:	b2d8      	uxtb	r0, r3
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	4613      	mov	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	440b      	add	r3, r1
 80030b2:	3351      	adds	r3, #81	; 0x51
 80030b4:	4602      	mov	r2, r0
 80030b6:	701a      	strb	r2, [r3, #0]
 80030b8:	e0ad      	b.n	8003216 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	4613      	mov	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	440b      	add	r3, r1
 80030c8:	335d      	adds	r3, #93	; 0x5d
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b03      	cmp	r3, #3
 80030ce:	d10a      	bne.n	80030e6 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	4613      	mov	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	440b      	add	r3, r1
 80030de:	335c      	adds	r3, #92	; 0x5c
 80030e0:	2202      	movs	r2, #2
 80030e2:	701a      	strb	r2, [r3, #0]
 80030e4:	e097      	b.n	8003216 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	4613      	mov	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	440b      	add	r3, r1
 80030f4:	335d      	adds	r3, #93	; 0x5d
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d10a      	bne.n	8003112 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	4613      	mov	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	440b      	add	r3, r1
 800310a:	335c      	adds	r3, #92	; 0x5c
 800310c:	2202      	movs	r2, #2
 800310e:	701a      	strb	r2, [r3, #0]
 8003110:	e081      	b.n	8003216 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	4613      	mov	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	440b      	add	r3, r1
 8003120:	335d      	adds	r3, #93	; 0x5d
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b05      	cmp	r3, #5
 8003126:	d10a      	bne.n	800313e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	440b      	add	r3, r1
 8003136:	335c      	adds	r3, #92	; 0x5c
 8003138:	2205      	movs	r2, #5
 800313a:	701a      	strb	r2, [r3, #0]
 800313c:	e06b      	b.n	8003216 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	4613      	mov	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	440b      	add	r3, r1
 800314c:	335d      	adds	r3, #93	; 0x5d
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b06      	cmp	r3, #6
 8003152:	d00a      	beq.n	800316a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	4613      	mov	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	440b      	add	r3, r1
 8003162:	335d      	adds	r3, #93	; 0x5d
 8003164:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003166:	2b08      	cmp	r3, #8
 8003168:	d155      	bne.n	8003216 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	4613      	mov	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	440b      	add	r3, r1
 8003178:	3358      	adds	r3, #88	; 0x58
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	1c59      	adds	r1, r3, #1
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	4403      	add	r3, r0
 800318c:	3358      	adds	r3, #88	; 0x58
 800318e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	440b      	add	r3, r1
 800319e:	3358      	adds	r3, #88	; 0x58
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2b03      	cmp	r3, #3
 80031a4:	d914      	bls.n	80031d0 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	440b      	add	r3, r1
 80031b4:	3358      	adds	r3, #88	; 0x58
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	4613      	mov	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4413      	add	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	440b      	add	r3, r1
 80031c8:	335c      	adds	r3, #92	; 0x5c
 80031ca:	2204      	movs	r2, #4
 80031cc:	701a      	strb	r2, [r3, #0]
 80031ce:	e009      	b.n	80031e4 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	4613      	mov	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	440b      	add	r3, r1
 80031de:	335c      	adds	r3, #92	; 0x5c
 80031e0:	2202      	movs	r2, #2
 80031e2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031fa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003202:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	015a      	lsls	r2, r3, #5
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	4413      	add	r3, r2
 800320c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003210:	461a      	mov	r2, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	015a      	lsls	r2, r3, #5
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	4413      	add	r3, r2
 800321e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003222:	461a      	mov	r2, r3
 8003224:	2302      	movs	r3, #2
 8003226:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	b2d8      	uxtb	r0, r3
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	4613      	mov	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	440b      	add	r3, r1
 800323a:	335c      	adds	r3, #92	; 0x5c
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	461a      	mov	r2, r3
 8003240:	4601      	mov	r1, r0
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f007 fd62 	bl	800ad0c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003248:	bf00      	nop
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b08a      	sub	sp, #40	; 0x28
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	f003 030f 	and.w	r3, r3, #15
 8003270:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	0c5b      	lsrs	r3, r3, #17
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	091b      	lsrs	r3, r3, #4
 8003280:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003284:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2b02      	cmp	r3, #2
 800328a:	d003      	beq.n	8003294 <HCD_RXQLVL_IRQHandler+0x44>
 800328c:	2b05      	cmp	r3, #5
 800328e:	f000 8082 	beq.w	8003396 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003292:	e083      	b.n	800339c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d07f      	beq.n	800339a <HCD_RXQLVL_IRQHandler+0x14a>
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	4613      	mov	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	440b      	add	r3, r1
 80032a8:	3344      	adds	r3, #68	; 0x44
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d074      	beq.n	800339a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6818      	ldr	r0, [r3, #0]
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4613      	mov	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	440b      	add	r3, r1
 80032c2:	3344      	adds	r3, #68	; 0x44
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	b292      	uxth	r2, r2
 80032ca:	4619      	mov	r1, r3
 80032cc:	f001 ff0b 	bl	80050e6 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	4613      	mov	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	440b      	add	r3, r1
 80032de:	3344      	adds	r3, #68	; 0x44
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	18d1      	adds	r1, r2, r3
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	4403      	add	r3, r0
 80032f4:	3344      	adds	r3, #68	; 0x44
 80032f6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80032f8:	6879      	ldr	r1, [r7, #4]
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4613      	mov	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	440b      	add	r3, r1
 8003306:	334c      	adds	r3, #76	; 0x4c
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	18d1      	adds	r1, r2, r3
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4613      	mov	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	4403      	add	r3, r0
 800331c:	334c      	adds	r3, #76	; 0x4c
 800331e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	015a      	lsls	r2, r3, #5
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	4413      	add	r3, r2
 8003328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332c:	691a      	ldr	r2, [r3, #16]
 800332e:	4b1d      	ldr	r3, [pc, #116]	; (80033a4 <HCD_RXQLVL_IRQHandler+0x154>)
 8003330:	4013      	ands	r3, r2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d031      	beq.n	800339a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	015a      	lsls	r2, r3, #5
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	4413      	add	r3, r2
 800333e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800334c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003354:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	015a      	lsls	r2, r3, #5
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	4413      	add	r3, r2
 800335e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003362:	461a      	mov	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	4613      	mov	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	440b      	add	r3, r1
 8003376:	3350      	adds	r3, #80	; 0x50
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	f083 0301 	eor.w	r3, r3, #1
 800337e:	b2d8      	uxtb	r0, r3
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	440b      	add	r3, r1
 800338e:	3350      	adds	r3, #80	; 0x50
 8003390:	4602      	mov	r2, r0
 8003392:	701a      	strb	r2, [r3, #0]
      break;
 8003394:	e001      	b.n	800339a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003396:	bf00      	nop
 8003398:	e000      	b.n	800339c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800339a:	bf00      	nop
  }
}
 800339c:	bf00      	nop
 800339e:	3728      	adds	r7, #40	; 0x28
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	1ff80000 	.word	0x1ff80000

080033a8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80033d4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d10b      	bne.n	80033f8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d102      	bne.n	80033f0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f007 fc72 	bl	800acd4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	f043 0302 	orr.w	r3, r3, #2
 80033f6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b08      	cmp	r3, #8
 8003400:	d132      	bne.n	8003468 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	f043 0308 	orr.w	r3, r3, #8
 8003408:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b04      	cmp	r3, #4
 8003412:	d126      	bne.n	8003462 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	2b02      	cmp	r3, #2
 800341a:	d113      	bne.n	8003444 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003422:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003426:	d106      	bne.n	8003436 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2102      	movs	r1, #2
 800342e:	4618      	mov	r0, r3
 8003430:	f001 ff94 	bl	800535c <USB_InitFSLSPClkSel>
 8003434:	e011      	b.n	800345a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2101      	movs	r1, #1
 800343c:	4618      	mov	r0, r3
 800343e:	f001 ff8d 	bl	800535c <USB_InitFSLSPClkSel>
 8003442:	e00a      	b.n	800345a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d106      	bne.n	800345a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003452:	461a      	mov	r2, r3
 8003454:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003458:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f007 fc68 	bl	800ad30 <HAL_HCD_PortEnabled_Callback>
 8003460:	e002      	b.n	8003468 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f007 fc72 	bl	800ad4c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b20      	cmp	r3, #32
 8003470:	d103      	bne.n	800347a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	f043 0320 	orr.w	r3, r3, #32
 8003478:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003480:	461a      	mov	r2, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	6013      	str	r3, [r2, #0]
}
 8003486:	bf00      	nop
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
	...

08003490 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b088      	sub	sp, #32
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e128      	b.n	80036f4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d109      	bne.n	80034c2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a90      	ldr	r2, [pc, #576]	; (80036fc <HAL_I2S_Init+0x26c>)
 80034ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7fd fe3b 	bl	8001138 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2202      	movs	r2, #2
 80034c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6812      	ldr	r2, [r2, #0]
 80034d4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80034d8:	f023 030f 	bic.w	r3, r3, #15
 80034dc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2202      	movs	r2, #2
 80034e4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d060      	beq.n	80035b0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d102      	bne.n	80034fc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80034f6:	2310      	movs	r3, #16
 80034f8:	617b      	str	r3, [r7, #20]
 80034fa:	e001      	b.n	8003500 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80034fc:	2320      	movs	r3, #32
 80034fe:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	2b20      	cmp	r3, #32
 8003506:	d802      	bhi.n	800350e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800350e:	2001      	movs	r0, #1
 8003510:	f001 f9c0 	bl	8004894 <HAL_RCCEx_GetPeriphCLKFreq>
 8003514:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800351e:	d125      	bne.n	800356c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d010      	beq.n	800354a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003532:	4613      	mov	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4413      	add	r3, r2
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	461a      	mov	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	fbb2 f3f3 	udiv	r3, r2, r3
 8003544:	3305      	adds	r3, #5
 8003546:	613b      	str	r3, [r7, #16]
 8003548:	e01f      	b.n	800358a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	fbb2 f2f3 	udiv	r2, r2, r3
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	461a      	mov	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	fbb2 f3f3 	udiv	r3, r2, r3
 8003566:	3305      	adds	r3, #5
 8003568:	613b      	str	r3, [r7, #16]
 800356a:	e00e      	b.n	800358a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	fbb2 f2f3 	udiv	r2, r2, r3
 8003574:	4613      	mov	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	461a      	mov	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	fbb2 f3f3 	udiv	r3, r2, r3
 8003586:	3305      	adds	r3, #5
 8003588:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	4a5c      	ldr	r2, [pc, #368]	; (8003700 <HAL_I2S_Init+0x270>)
 800358e:	fba2 2303 	umull	r2, r3, r2, r3
 8003592:	08db      	lsrs	r3, r3, #3
 8003594:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	085b      	lsrs	r3, r3, #1
 80035a6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	021b      	lsls	r3, r3, #8
 80035ac:	61bb      	str	r3, [r7, #24]
 80035ae:	e003      	b.n	80035b8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80035b0:	2302      	movs	r3, #2
 80035b2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d902      	bls.n	80035c4 <HAL_I2S_Init+0x134>
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	2bff      	cmp	r3, #255	; 0xff
 80035c2:	d907      	bls.n	80035d4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c8:	f043 0210 	orr.w	r2, r3, #16
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e08f      	b.n	80036f4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	ea42 0103 	orr.w	r1, r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	69fa      	ldr	r2, [r7, #28]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80035f2:	f023 030f 	bic.w	r3, r3, #15
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6851      	ldr	r1, [r2, #4]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6892      	ldr	r2, [r2, #8]
 80035fe:	4311      	orrs	r1, r2
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	68d2      	ldr	r2, [r2, #12]
 8003604:	4311      	orrs	r1, r2
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6992      	ldr	r2, [r2, #24]
 800360a:	430a      	orrs	r2, r1
 800360c:	431a      	orrs	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003616:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d161      	bne.n	80036e4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a38      	ldr	r2, [pc, #224]	; (8003704 <HAL_I2S_Init+0x274>)
 8003624:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a37      	ldr	r2, [pc, #220]	; (8003708 <HAL_I2S_Init+0x278>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d101      	bne.n	8003634 <HAL_I2S_Init+0x1a4>
 8003630:	4b36      	ldr	r3, [pc, #216]	; (800370c <HAL_I2S_Init+0x27c>)
 8003632:	e001      	b.n	8003638 <HAL_I2S_Init+0x1a8>
 8003634:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6812      	ldr	r2, [r2, #0]
 800363e:	4932      	ldr	r1, [pc, #200]	; (8003708 <HAL_I2S_Init+0x278>)
 8003640:	428a      	cmp	r2, r1
 8003642:	d101      	bne.n	8003648 <HAL_I2S_Init+0x1b8>
 8003644:	4a31      	ldr	r2, [pc, #196]	; (800370c <HAL_I2S_Init+0x27c>)
 8003646:	e001      	b.n	800364c <HAL_I2S_Init+0x1bc>
 8003648:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800364c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003650:	f023 030f 	bic.w	r3, r3, #15
 8003654:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a2b      	ldr	r2, [pc, #172]	; (8003708 <HAL_I2S_Init+0x278>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d101      	bne.n	8003664 <HAL_I2S_Init+0x1d4>
 8003660:	4b2a      	ldr	r3, [pc, #168]	; (800370c <HAL_I2S_Init+0x27c>)
 8003662:	e001      	b.n	8003668 <HAL_I2S_Init+0x1d8>
 8003664:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003668:	2202      	movs	r2, #2
 800366a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a25      	ldr	r2, [pc, #148]	; (8003708 <HAL_I2S_Init+0x278>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d101      	bne.n	800367a <HAL_I2S_Init+0x1ea>
 8003676:	4b25      	ldr	r3, [pc, #148]	; (800370c <HAL_I2S_Init+0x27c>)
 8003678:	e001      	b.n	800367e <HAL_I2S_Init+0x1ee>
 800367a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800367e:	69db      	ldr	r3, [r3, #28]
 8003680:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800368a:	d003      	beq.n	8003694 <HAL_I2S_Init+0x204>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d103      	bne.n	800369c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003694:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003698:	613b      	str	r3, [r7, #16]
 800369a:	e001      	b.n	80036a0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800369c:	2300      	movs	r3, #0
 800369e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	b299      	uxth	r1, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80036b6:	4303      	orrs	r3, r0
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	430b      	orrs	r3, r1
 80036bc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80036be:	4313      	orrs	r3, r2
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	897b      	ldrh	r3, [r7, #10]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036cc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a0d      	ldr	r2, [pc, #52]	; (8003708 <HAL_I2S_Init+0x278>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d101      	bne.n	80036dc <HAL_I2S_Init+0x24c>
 80036d8:	4b0c      	ldr	r3, [pc, #48]	; (800370c <HAL_I2S_Init+0x27c>)
 80036da:	e001      	b.n	80036e0 <HAL_I2S_Init+0x250>
 80036dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036e0:	897a      	ldrh	r2, [r7, #10]
 80036e2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3720      	adds	r7, #32
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	08003807 	.word	0x08003807
 8003700:	cccccccd 	.word	0xcccccccd
 8003704:	0800391d 	.word	0x0800391d
 8003708:	40003800 	.word	0x40003800
 800370c:	40003400 	.word	0x40003400

08003710 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	881a      	ldrh	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	1c9a      	adds	r2, r3, #2
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376e:	b29b      	uxth	r3, r3
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377c:	b29b      	uxth	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10e      	bne.n	80037a0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003790:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7ff ffb8 	bl	8003710 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80037a0:	bf00      	nop
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ba:	b292      	uxth	r2, r2
 80037bc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c2:	1c9a      	adds	r2, r3, #2
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	3b01      	subs	r3, #1
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037da:	b29b      	uxth	r3, r3
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10e      	bne.n	80037fe <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037ee:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7ff ff93 	bl	8003724 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80037fe:	bf00      	nop
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b086      	sub	sp, #24
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b04      	cmp	r3, #4
 8003820:	d13a      	bne.n	8003898 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b01      	cmp	r3, #1
 800382a:	d109      	bne.n	8003840 <I2S_IRQHandler+0x3a>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003836:	2b40      	cmp	r3, #64	; 0x40
 8003838:	d102      	bne.n	8003840 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7ff ffb4 	bl	80037a8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003846:	2b40      	cmp	r3, #64	; 0x40
 8003848:	d126      	bne.n	8003898 <I2S_IRQHandler+0x92>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f003 0320 	and.w	r3, r3, #32
 8003854:	2b20      	cmp	r3, #32
 8003856:	d11f      	bne.n	8003898 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003866:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003868:	2300      	movs	r3, #0
 800386a:	613b      	str	r3, [r7, #16]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	613b      	str	r3, [r7, #16]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	613b      	str	r3, [r7, #16]
 800387c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388a:	f043 0202 	orr.w	r2, r3, #2
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7ff ff50 	bl	8003738 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b03      	cmp	r3, #3
 80038a2:	d136      	bne.n	8003912 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d109      	bne.n	80038c2 <I2S_IRQHandler+0xbc>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b8:	2b80      	cmp	r3, #128	; 0x80
 80038ba:	d102      	bne.n	80038c2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff ff45 	bl	800374c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d122      	bne.n	8003912 <I2S_IRQHandler+0x10c>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f003 0320 	and.w	r3, r3, #32
 80038d6:	2b20      	cmp	r3, #32
 80038d8:	d11b      	bne.n	8003912 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038e8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80038ea:	2300      	movs	r3, #0
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	60fb      	str	r3, [r7, #12]
 80038f6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003904:	f043 0204 	orr.w	r2, r3, #4
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7ff ff13 	bl	8003738 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003912:	bf00      	nop
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
	...

0800391c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b088      	sub	sp, #32
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4aa2      	ldr	r2, [pc, #648]	; (8003bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d101      	bne.n	800393a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003936:	4ba2      	ldr	r3, [pc, #648]	; (8003bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003938:	e001      	b.n	800393e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800393a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a9b      	ldr	r2, [pc, #620]	; (8003bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d101      	bne.n	8003958 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003954:	4b9a      	ldr	r3, [pc, #616]	; (8003bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003956:	e001      	b.n	800395c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003958:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003968:	d004      	beq.n	8003974 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	f040 8099 	bne.w	8003aa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b02      	cmp	r3, #2
 800397c:	d107      	bne.n	800398e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f925 	bl	8003bd8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b01      	cmp	r3, #1
 8003996:	d107      	bne.n	80039a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d002      	beq.n	80039a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f9c8 	bl	8003d38 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ae:	2b40      	cmp	r3, #64	; 0x40
 80039b0:	d13a      	bne.n	8003a28 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f003 0320 	and.w	r3, r3, #32
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d035      	beq.n	8003a28 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a7e      	ldr	r2, [pc, #504]	; (8003bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d101      	bne.n	80039ca <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80039c6:	4b7e      	ldr	r3, [pc, #504]	; (8003bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039c8:	e001      	b.n	80039ce <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80039ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4979      	ldr	r1, [pc, #484]	; (8003bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039d6:	428b      	cmp	r3, r1
 80039d8:	d101      	bne.n	80039de <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80039da:	4b79      	ldr	r3, [pc, #484]	; (8003bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039dc:	e001      	b.n	80039e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80039de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039e6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039f6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80039f8:	2300      	movs	r3, #0
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	60fb      	str	r3, [r7, #12]
 8003a0c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	f043 0202 	orr.w	r2, r3, #2
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7ff fe88 	bl	8003738 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	2b08      	cmp	r3, #8
 8003a30:	f040 80be 	bne.w	8003bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f003 0320 	and.w	r3, r3, #32
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 80b8 	beq.w	8003bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a4e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a59      	ldr	r2, [pc, #356]	; (8003bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d101      	bne.n	8003a5e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003a5a:	4b59      	ldr	r3, [pc, #356]	; (8003bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a5c:	e001      	b.n	8003a62 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003a5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4954      	ldr	r1, [pc, #336]	; (8003bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a6a:	428b      	cmp	r3, r1
 8003a6c:	d101      	bne.n	8003a72 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003a6e:	4b54      	ldr	r3, [pc, #336]	; (8003bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a70:	e001      	b.n	8003a76 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003a72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a76:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a7a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60bb      	str	r3, [r7, #8]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	60bb      	str	r3, [r7, #8]
 8003a88:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a96:	f043 0204 	orr.w	r2, r3, #4
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7ff fe4a 	bl	8003738 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003aa4:	e084      	b.n	8003bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d107      	bne.n	8003ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f8be 	bl	8003c3c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d107      	bne.n	8003ada <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d002      	beq.n	8003ada <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f8fd 	bl	8003cd4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae0:	2b40      	cmp	r3, #64	; 0x40
 8003ae2:	d12f      	bne.n	8003b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f003 0320 	and.w	r3, r3, #32
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d02a      	beq.n	8003b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003afc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a2e      	ldr	r2, [pc, #184]	; (8003bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d101      	bne.n	8003b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003b08:	4b2d      	ldr	r3, [pc, #180]	; (8003bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b0a:	e001      	b.n	8003b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003b0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4929      	ldr	r1, [pc, #164]	; (8003bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b18:	428b      	cmp	r3, r1
 8003b1a:	d101      	bne.n	8003b20 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003b1c:	4b28      	ldr	r3, [pc, #160]	; (8003bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b1e:	e001      	b.n	8003b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003b20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b28:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b36:	f043 0202 	orr.w	r2, r3, #2
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7ff fdfa 	bl	8003738 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b08      	cmp	r3, #8
 8003b4c:	d131      	bne.n	8003bb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f003 0320 	and.w	r3, r3, #32
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d02c      	beq.n	8003bb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a17      	ldr	r2, [pc, #92]	; (8003bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d101      	bne.n	8003b66 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003b62:	4b17      	ldr	r3, [pc, #92]	; (8003bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b64:	e001      	b.n	8003b6a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003b66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4912      	ldr	r1, [pc, #72]	; (8003bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b72:	428b      	cmp	r3, r1
 8003b74:	d101      	bne.n	8003b7a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003b76:	4b12      	ldr	r3, [pc, #72]	; (8003bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b78:	e001      	b.n	8003b7e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003b7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b7e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b82:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b92:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba0:	f043 0204 	orr.w	r2, r3, #4
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7ff fdc5 	bl	8003738 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bae:	e000      	b.n	8003bb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003bb0:	bf00      	nop
}
 8003bb2:	bf00      	nop
 8003bb4:	3720      	adds	r7, #32
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	40003800 	.word	0x40003800
 8003bc0:	40003400 	.word	0x40003400

08003bc4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	1c99      	adds	r1, r3, #2
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	6251      	str	r1, [r2, #36]	; 0x24
 8003bea:	881a      	ldrh	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d113      	bne.n	8003c32 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c18:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d106      	bne.n	8003c32 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f7ff ffc9 	bl	8003bc4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c32:	bf00      	nop
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
	...

08003c3c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	1c99      	adds	r1, r3, #2
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6251      	str	r1, [r2, #36]	; 0x24
 8003c4e:	8819      	ldrh	r1, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a1d      	ldr	r2, [pc, #116]	; (8003ccc <I2SEx_TxISR_I2SExt+0x90>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d101      	bne.n	8003c5e <I2SEx_TxISR_I2SExt+0x22>
 8003c5a:	4b1d      	ldr	r3, [pc, #116]	; (8003cd0 <I2SEx_TxISR_I2SExt+0x94>)
 8003c5c:	e001      	b.n	8003c62 <I2SEx_TxISR_I2SExt+0x26>
 8003c5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c62:	460a      	mov	r2, r1
 8003c64:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d121      	bne.n	8003cc2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a12      	ldr	r2, [pc, #72]	; (8003ccc <I2SEx_TxISR_I2SExt+0x90>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d101      	bne.n	8003c8c <I2SEx_TxISR_I2SExt+0x50>
 8003c88:	4b11      	ldr	r3, [pc, #68]	; (8003cd0 <I2SEx_TxISR_I2SExt+0x94>)
 8003c8a:	e001      	b.n	8003c90 <I2SEx_TxISR_I2SExt+0x54>
 8003c8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	490d      	ldr	r1, [pc, #52]	; (8003ccc <I2SEx_TxISR_I2SExt+0x90>)
 8003c98:	428b      	cmp	r3, r1
 8003c9a:	d101      	bne.n	8003ca0 <I2SEx_TxISR_I2SExt+0x64>
 8003c9c:	4b0c      	ldr	r3, [pc, #48]	; (8003cd0 <I2SEx_TxISR_I2SExt+0x94>)
 8003c9e:	e001      	b.n	8003ca4 <I2SEx_TxISR_I2SExt+0x68>
 8003ca0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ca4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ca8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d106      	bne.n	8003cc2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7ff ff81 	bl	8003bc4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cc2:	bf00      	nop
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	40003800 	.word	0x40003800
 8003cd0:	40003400 	.word	0x40003400

08003cd4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68d8      	ldr	r0, [r3, #12]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce6:	1c99      	adds	r1, r3, #2
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003cec:	b282      	uxth	r2, r0
 8003cee:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d113      	bne.n	8003d30 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d16:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d106      	bne.n	8003d30 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7ff ff4a 	bl	8003bc4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d30:	bf00      	nop
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a20      	ldr	r2, [pc, #128]	; (8003dc8 <I2SEx_RxISR_I2SExt+0x90>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d101      	bne.n	8003d4e <I2SEx_RxISR_I2SExt+0x16>
 8003d4a:	4b20      	ldr	r3, [pc, #128]	; (8003dcc <I2SEx_RxISR_I2SExt+0x94>)
 8003d4c:	e001      	b.n	8003d52 <I2SEx_RxISR_I2SExt+0x1a>
 8003d4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d52:	68d8      	ldr	r0, [r3, #12]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d58:	1c99      	adds	r1, r3, #2
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003d5e:	b282      	uxth	r2, r0
 8003d60:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d121      	bne.n	8003dbe <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a12      	ldr	r2, [pc, #72]	; (8003dc8 <I2SEx_RxISR_I2SExt+0x90>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d101      	bne.n	8003d88 <I2SEx_RxISR_I2SExt+0x50>
 8003d84:	4b11      	ldr	r3, [pc, #68]	; (8003dcc <I2SEx_RxISR_I2SExt+0x94>)
 8003d86:	e001      	b.n	8003d8c <I2SEx_RxISR_I2SExt+0x54>
 8003d88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	490d      	ldr	r1, [pc, #52]	; (8003dc8 <I2SEx_RxISR_I2SExt+0x90>)
 8003d94:	428b      	cmp	r3, r1
 8003d96:	d101      	bne.n	8003d9c <I2SEx_RxISR_I2SExt+0x64>
 8003d98:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <I2SEx_RxISR_I2SExt+0x94>)
 8003d9a:	e001      	b.n	8003da0 <I2SEx_RxISR_I2SExt+0x68>
 8003d9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003da0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003da4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d106      	bne.n	8003dbe <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7ff ff03 	bl	8003bc4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003dbe:	bf00      	nop
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40003800 	.word	0x40003800
 8003dcc:	40003400 	.word	0x40003400

08003dd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e25b      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d075      	beq.n	8003eda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dee:	4ba3      	ldr	r3, [pc, #652]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 030c 	and.w	r3, r3, #12
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d00c      	beq.n	8003e14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dfa:	4ba0      	ldr	r3, [pc, #640]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d112      	bne.n	8003e2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e06:	4b9d      	ldr	r3, [pc, #628]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e12:	d10b      	bne.n	8003e2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e14:	4b99      	ldr	r3, [pc, #612]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d05b      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x108>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d157      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e236      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e34:	d106      	bne.n	8003e44 <HAL_RCC_OscConfig+0x74>
 8003e36:	4b91      	ldr	r3, [pc, #580]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a90      	ldr	r2, [pc, #576]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	e01d      	b.n	8003e80 <HAL_RCC_OscConfig+0xb0>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e4c:	d10c      	bne.n	8003e68 <HAL_RCC_OscConfig+0x98>
 8003e4e:	4b8b      	ldr	r3, [pc, #556]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a8a      	ldr	r2, [pc, #552]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	4b88      	ldr	r3, [pc, #544]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a87      	ldr	r2, [pc, #540]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	e00b      	b.n	8003e80 <HAL_RCC_OscConfig+0xb0>
 8003e68:	4b84      	ldr	r3, [pc, #528]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a83      	ldr	r2, [pc, #524]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e72:	6013      	str	r3, [r2, #0]
 8003e74:	4b81      	ldr	r3, [pc, #516]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a80      	ldr	r2, [pc, #512]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d013      	beq.n	8003eb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e88:	f7fd fb36 	bl	80014f8 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e90:	f7fd fb32 	bl	80014f8 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b64      	cmp	r3, #100	; 0x64
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e1fb      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea2:	4b76      	ldr	r3, [pc, #472]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0f0      	beq.n	8003e90 <HAL_RCC_OscConfig+0xc0>
 8003eae:	e014      	b.n	8003eda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb0:	f7fd fb22 	bl	80014f8 <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eb8:	f7fd fb1e 	bl	80014f8 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b64      	cmp	r3, #100	; 0x64
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e1e7      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eca:	4b6c      	ldr	r3, [pc, #432]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1f0      	bne.n	8003eb8 <HAL_RCC_OscConfig+0xe8>
 8003ed6:	e000      	b.n	8003eda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d063      	beq.n	8003fae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ee6:	4b65      	ldr	r3, [pc, #404]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 030c 	and.w	r3, r3, #12
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00b      	beq.n	8003f0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ef2:	4b62      	ldr	r3, [pc, #392]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d11c      	bne.n	8003f38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003efe:	4b5f      	ldr	r3, [pc, #380]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d116      	bne.n	8003f38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f0a:	4b5c      	ldr	r3, [pc, #368]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <HAL_RCC_OscConfig+0x152>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d001      	beq.n	8003f22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e1bb      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f22:	4b56      	ldr	r3, [pc, #344]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	4952      	ldr	r1, [pc, #328]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f36:	e03a      	b.n	8003fae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d020      	beq.n	8003f82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f40:	4b4f      	ldr	r3, [pc, #316]	; (8004080 <HAL_RCC_OscConfig+0x2b0>)
 8003f42:	2201      	movs	r2, #1
 8003f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f46:	f7fd fad7 	bl	80014f8 <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f4e:	f7fd fad3 	bl	80014f8 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e19c      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f60:	4b46      	ldr	r3, [pc, #280]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0f0      	beq.n	8003f4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f6c:	4b43      	ldr	r3, [pc, #268]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	00db      	lsls	r3, r3, #3
 8003f7a:	4940      	ldr	r1, [pc, #256]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	600b      	str	r3, [r1, #0]
 8003f80:	e015      	b.n	8003fae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f82:	4b3f      	ldr	r3, [pc, #252]	; (8004080 <HAL_RCC_OscConfig+0x2b0>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f88:	f7fd fab6 	bl	80014f8 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f90:	f7fd fab2 	bl	80014f8 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e17b      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fa2:	4b36      	ldr	r3, [pc, #216]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f0      	bne.n	8003f90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d030      	beq.n	800401c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d016      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fc2:	4b30      	ldr	r3, [pc, #192]	; (8004084 <HAL_RCC_OscConfig+0x2b4>)
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc8:	f7fd fa96 	bl	80014f8 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fd0:	f7fd fa92 	bl	80014f8 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e15b      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fe2:	4b26      	ldr	r3, [pc, #152]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8003fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0f0      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x200>
 8003fee:	e015      	b.n	800401c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ff0:	4b24      	ldr	r3, [pc, #144]	; (8004084 <HAL_RCC_OscConfig+0x2b4>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ff6:	f7fd fa7f 	bl	80014f8 <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ffc:	e008      	b.n	8004010 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ffe:	f7fd fa7b 	bl	80014f8 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e144      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004010:	4b1a      	ldr	r3, [pc, #104]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8004012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1f0      	bne.n	8003ffe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 80a0 	beq.w	800416a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800402a:	2300      	movs	r3, #0
 800402c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800402e:	4b13      	ldr	r3, [pc, #76]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10f      	bne.n	800405a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800403a:	2300      	movs	r3, #0
 800403c:	60bb      	str	r3, [r7, #8]
 800403e:	4b0f      	ldr	r3, [pc, #60]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	4a0e      	ldr	r2, [pc, #56]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 8004044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004048:	6413      	str	r3, [r2, #64]	; 0x40
 800404a:	4b0c      	ldr	r3, [pc, #48]	; (800407c <HAL_RCC_OscConfig+0x2ac>)
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004052:	60bb      	str	r3, [r7, #8]
 8004054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004056:	2301      	movs	r3, #1
 8004058:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800405a:	4b0b      	ldr	r3, [pc, #44]	; (8004088 <HAL_RCC_OscConfig+0x2b8>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004062:	2b00      	cmp	r3, #0
 8004064:	d121      	bne.n	80040aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004066:	4b08      	ldr	r3, [pc, #32]	; (8004088 <HAL_RCC_OscConfig+0x2b8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a07      	ldr	r2, [pc, #28]	; (8004088 <HAL_RCC_OscConfig+0x2b8>)
 800406c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004070:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004072:	f7fd fa41 	bl	80014f8 <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004078:	e011      	b.n	800409e <HAL_RCC_OscConfig+0x2ce>
 800407a:	bf00      	nop
 800407c:	40023800 	.word	0x40023800
 8004080:	42470000 	.word	0x42470000
 8004084:	42470e80 	.word	0x42470e80
 8004088:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800408c:	f7fd fa34 	bl	80014f8 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e0fd      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800409e:	4b81      	ldr	r3, [pc, #516]	; (80042a4 <HAL_RCC_OscConfig+0x4d4>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0f0      	beq.n	800408c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d106      	bne.n	80040c0 <HAL_RCC_OscConfig+0x2f0>
 80040b2:	4b7d      	ldr	r3, [pc, #500]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 80040b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b6:	4a7c      	ldr	r2, [pc, #496]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 80040b8:	f043 0301 	orr.w	r3, r3, #1
 80040bc:	6713      	str	r3, [r2, #112]	; 0x70
 80040be:	e01c      	b.n	80040fa <HAL_RCC_OscConfig+0x32a>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	2b05      	cmp	r3, #5
 80040c6:	d10c      	bne.n	80040e2 <HAL_RCC_OscConfig+0x312>
 80040c8:	4b77      	ldr	r3, [pc, #476]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 80040ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040cc:	4a76      	ldr	r2, [pc, #472]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 80040ce:	f043 0304 	orr.w	r3, r3, #4
 80040d2:	6713      	str	r3, [r2, #112]	; 0x70
 80040d4:	4b74      	ldr	r3, [pc, #464]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 80040d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d8:	4a73      	ldr	r2, [pc, #460]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 80040da:	f043 0301 	orr.w	r3, r3, #1
 80040de:	6713      	str	r3, [r2, #112]	; 0x70
 80040e0:	e00b      	b.n	80040fa <HAL_RCC_OscConfig+0x32a>
 80040e2:	4b71      	ldr	r3, [pc, #452]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 80040e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e6:	4a70      	ldr	r2, [pc, #448]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 80040e8:	f023 0301 	bic.w	r3, r3, #1
 80040ec:	6713      	str	r3, [r2, #112]	; 0x70
 80040ee:	4b6e      	ldr	r3, [pc, #440]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 80040f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f2:	4a6d      	ldr	r2, [pc, #436]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 80040f4:	f023 0304 	bic.w	r3, r3, #4
 80040f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d015      	beq.n	800412e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004102:	f7fd f9f9 	bl	80014f8 <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004108:	e00a      	b.n	8004120 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800410a:	f7fd f9f5 	bl	80014f8 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	f241 3288 	movw	r2, #5000	; 0x1388
 8004118:	4293      	cmp	r3, r2
 800411a:	d901      	bls.n	8004120 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e0bc      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004120:	4b61      	ldr	r3, [pc, #388]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 8004122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0ee      	beq.n	800410a <HAL_RCC_OscConfig+0x33a>
 800412c:	e014      	b.n	8004158 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800412e:	f7fd f9e3 	bl	80014f8 <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004134:	e00a      	b.n	800414c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004136:	f7fd f9df 	bl	80014f8 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	f241 3288 	movw	r2, #5000	; 0x1388
 8004144:	4293      	cmp	r3, r2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e0a6      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800414c:	4b56      	ldr	r3, [pc, #344]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 800414e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1ee      	bne.n	8004136 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004158:	7dfb      	ldrb	r3, [r7, #23]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d105      	bne.n	800416a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800415e:	4b52      	ldr	r3, [pc, #328]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	4a51      	ldr	r2, [pc, #324]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 8004164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004168:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	2b00      	cmp	r3, #0
 8004170:	f000 8092 	beq.w	8004298 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004174:	4b4c      	ldr	r3, [pc, #304]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f003 030c 	and.w	r3, r3, #12
 800417c:	2b08      	cmp	r3, #8
 800417e:	d05c      	beq.n	800423a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	2b02      	cmp	r3, #2
 8004186:	d141      	bne.n	800420c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004188:	4b48      	ldr	r3, [pc, #288]	; (80042ac <HAL_RCC_OscConfig+0x4dc>)
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418e:	f7fd f9b3 	bl	80014f8 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004196:	f7fd f9af 	bl	80014f8 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e078      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a8:	4b3f      	ldr	r3, [pc, #252]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1f0      	bne.n	8004196 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	69da      	ldr	r2, [r3, #28]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	019b      	lsls	r3, r3, #6
 80041c4:	431a      	orrs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ca:	085b      	lsrs	r3, r3, #1
 80041cc:	3b01      	subs	r3, #1
 80041ce:	041b      	lsls	r3, r3, #16
 80041d0:	431a      	orrs	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d6:	061b      	lsls	r3, r3, #24
 80041d8:	4933      	ldr	r1, [pc, #204]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041de:	4b33      	ldr	r3, [pc, #204]	; (80042ac <HAL_RCC_OscConfig+0x4dc>)
 80041e0:	2201      	movs	r2, #1
 80041e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e4:	f7fd f988 	bl	80014f8 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ec:	f7fd f984 	bl	80014f8 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e04d      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041fe:	4b2a      	ldr	r3, [pc, #168]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0f0      	beq.n	80041ec <HAL_RCC_OscConfig+0x41c>
 800420a:	e045      	b.n	8004298 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800420c:	4b27      	ldr	r3, [pc, #156]	; (80042ac <HAL_RCC_OscConfig+0x4dc>)
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004212:	f7fd f971 	bl	80014f8 <HAL_GetTick>
 8004216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004218:	e008      	b.n	800422c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800421a:	f7fd f96d 	bl	80014f8 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e036      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800422c:	4b1e      	ldr	r3, [pc, #120]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1f0      	bne.n	800421a <HAL_RCC_OscConfig+0x44a>
 8004238:	e02e      	b.n	8004298 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d101      	bne.n	8004246 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e029      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004246:	4b18      	ldr	r3, [pc, #96]	; (80042a8 <HAL_RCC_OscConfig+0x4d8>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	429a      	cmp	r2, r3
 8004258:	d11c      	bne.n	8004294 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004264:	429a      	cmp	r2, r3
 8004266:	d115      	bne.n	8004294 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800426e:	4013      	ands	r3, r2
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004274:	4293      	cmp	r3, r2
 8004276:	d10d      	bne.n	8004294 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004282:	429a      	cmp	r2, r3
 8004284:	d106      	bne.n	8004294 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004290:	429a      	cmp	r2, r3
 8004292:	d001      	beq.n	8004298 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e000      	b.n	800429a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	40007000 	.word	0x40007000
 80042a8:	40023800 	.word	0x40023800
 80042ac:	42470060 	.word	0x42470060

080042b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e0cc      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042c4:	4b68      	ldr	r3, [pc, #416]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 030f 	and.w	r3, r3, #15
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d90c      	bls.n	80042ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d2:	4b65      	ldr	r3, [pc, #404]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042da:	4b63      	ldr	r3, [pc, #396]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 030f 	and.w	r3, r3, #15
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d001      	beq.n	80042ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e0b8      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d020      	beq.n	800433a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	d005      	beq.n	8004310 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004304:	4b59      	ldr	r3, [pc, #356]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	4a58      	ldr	r2, [pc, #352]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800430a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800430e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0308 	and.w	r3, r3, #8
 8004318:	2b00      	cmp	r3, #0
 800431a:	d005      	beq.n	8004328 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800431c:	4b53      	ldr	r3, [pc, #332]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	4a52      	ldr	r2, [pc, #328]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004322:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004326:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004328:	4b50      	ldr	r3, [pc, #320]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	494d      	ldr	r1, [pc, #308]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004336:	4313      	orrs	r3, r2
 8004338:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d044      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d107      	bne.n	800435e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434e:	4b47      	ldr	r3, [pc, #284]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d119      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e07f      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b02      	cmp	r3, #2
 8004364:	d003      	beq.n	800436e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800436a:	2b03      	cmp	r3, #3
 800436c:	d107      	bne.n	800437e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800436e:	4b3f      	ldr	r3, [pc, #252]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d109      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e06f      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800437e:	4b3b      	ldr	r3, [pc, #236]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e067      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800438e:	4b37      	ldr	r3, [pc, #220]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f023 0203 	bic.w	r2, r3, #3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	4934      	ldr	r1, [pc, #208]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800439c:	4313      	orrs	r3, r2
 800439e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043a0:	f7fd f8aa 	bl	80014f8 <HAL_GetTick>
 80043a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a6:	e00a      	b.n	80043be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043a8:	f7fd f8a6 	bl	80014f8 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e04f      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043be:	4b2b      	ldr	r3, [pc, #172]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 020c 	and.w	r2, r3, #12
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d1eb      	bne.n	80043a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043d0:	4b25      	ldr	r3, [pc, #148]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 030f 	and.w	r3, r3, #15
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d20c      	bcs.n	80043f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043de:	4b22      	ldr	r3, [pc, #136]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	b2d2      	uxtb	r2, r2
 80043e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e6:	4b20      	ldr	r3, [pc, #128]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d001      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e032      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b00      	cmp	r3, #0
 8004402:	d008      	beq.n	8004416 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004404:	4b19      	ldr	r3, [pc, #100]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	4916      	ldr	r1, [pc, #88]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004412:	4313      	orrs	r3, r2
 8004414:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	d009      	beq.n	8004436 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004422:	4b12      	ldr	r3, [pc, #72]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	490e      	ldr	r1, [pc, #56]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	4313      	orrs	r3, r2
 8004434:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004436:	f000 f821 	bl	800447c <HAL_RCC_GetSysClockFreq>
 800443a:	4601      	mov	r1, r0
 800443c:	4b0b      	ldr	r3, [pc, #44]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	091b      	lsrs	r3, r3, #4
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	4a0a      	ldr	r2, [pc, #40]	; (8004470 <HAL_RCC_ClockConfig+0x1c0>)
 8004448:	5cd3      	ldrb	r3, [r2, r3]
 800444a:	fa21 f303 	lsr.w	r3, r1, r3
 800444e:	4a09      	ldr	r2, [pc, #36]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 8004450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004452:	4b09      	ldr	r3, [pc, #36]	; (8004478 <HAL_RCC_ClockConfig+0x1c8>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f7fc ff1e 	bl	8001298 <HAL_InitTick>

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	40023c00 	.word	0x40023c00
 800446c:	40023800 	.word	0x40023800
 8004470:	0800b43c 	.word	0x0800b43c
 8004474:	20000000 	.word	0x20000000
 8004478:	20000004 	.word	0x20000004

0800447c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800447c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004482:	2300      	movs	r3, #0
 8004484:	607b      	str	r3, [r7, #4]
 8004486:	2300      	movs	r3, #0
 8004488:	60fb      	str	r3, [r7, #12]
 800448a:	2300      	movs	r3, #0
 800448c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800448e:	2300      	movs	r3, #0
 8004490:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004492:	4b63      	ldr	r3, [pc, #396]	; (8004620 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 030c 	and.w	r3, r3, #12
 800449a:	2b04      	cmp	r3, #4
 800449c:	d007      	beq.n	80044ae <HAL_RCC_GetSysClockFreq+0x32>
 800449e:	2b08      	cmp	r3, #8
 80044a0:	d008      	beq.n	80044b4 <HAL_RCC_GetSysClockFreq+0x38>
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f040 80b4 	bne.w	8004610 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044a8:	4b5e      	ldr	r3, [pc, #376]	; (8004624 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80044aa:	60bb      	str	r3, [r7, #8]
       break;
 80044ac:	e0b3      	b.n	8004616 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044ae:	4b5e      	ldr	r3, [pc, #376]	; (8004628 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80044b0:	60bb      	str	r3, [r7, #8]
      break;
 80044b2:	e0b0      	b.n	8004616 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044b4:	4b5a      	ldr	r3, [pc, #360]	; (8004620 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044be:	4b58      	ldr	r3, [pc, #352]	; (8004620 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d04a      	beq.n	8004560 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ca:	4b55      	ldr	r3, [pc, #340]	; (8004620 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	099b      	lsrs	r3, r3, #6
 80044d0:	f04f 0400 	mov.w	r4, #0
 80044d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80044d8:	f04f 0200 	mov.w	r2, #0
 80044dc:	ea03 0501 	and.w	r5, r3, r1
 80044e0:	ea04 0602 	and.w	r6, r4, r2
 80044e4:	4629      	mov	r1, r5
 80044e6:	4632      	mov	r2, r6
 80044e8:	f04f 0300 	mov.w	r3, #0
 80044ec:	f04f 0400 	mov.w	r4, #0
 80044f0:	0154      	lsls	r4, r2, #5
 80044f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80044f6:	014b      	lsls	r3, r1, #5
 80044f8:	4619      	mov	r1, r3
 80044fa:	4622      	mov	r2, r4
 80044fc:	1b49      	subs	r1, r1, r5
 80044fe:	eb62 0206 	sbc.w	r2, r2, r6
 8004502:	f04f 0300 	mov.w	r3, #0
 8004506:	f04f 0400 	mov.w	r4, #0
 800450a:	0194      	lsls	r4, r2, #6
 800450c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004510:	018b      	lsls	r3, r1, #6
 8004512:	1a5b      	subs	r3, r3, r1
 8004514:	eb64 0402 	sbc.w	r4, r4, r2
 8004518:	f04f 0100 	mov.w	r1, #0
 800451c:	f04f 0200 	mov.w	r2, #0
 8004520:	00e2      	lsls	r2, r4, #3
 8004522:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004526:	00d9      	lsls	r1, r3, #3
 8004528:	460b      	mov	r3, r1
 800452a:	4614      	mov	r4, r2
 800452c:	195b      	adds	r3, r3, r5
 800452e:	eb44 0406 	adc.w	r4, r4, r6
 8004532:	f04f 0100 	mov.w	r1, #0
 8004536:	f04f 0200 	mov.w	r2, #0
 800453a:	0262      	lsls	r2, r4, #9
 800453c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004540:	0259      	lsls	r1, r3, #9
 8004542:	460b      	mov	r3, r1
 8004544:	4614      	mov	r4, r2
 8004546:	4618      	mov	r0, r3
 8004548:	4621      	mov	r1, r4
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f04f 0400 	mov.w	r4, #0
 8004550:	461a      	mov	r2, r3
 8004552:	4623      	mov	r3, r4
 8004554:	f7fc f880 	bl	8000658 <__aeabi_uldivmod>
 8004558:	4603      	mov	r3, r0
 800455a:	460c      	mov	r4, r1
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	e049      	b.n	80045f4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004560:	4b2f      	ldr	r3, [pc, #188]	; (8004620 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	099b      	lsrs	r3, r3, #6
 8004566:	f04f 0400 	mov.w	r4, #0
 800456a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800456e:	f04f 0200 	mov.w	r2, #0
 8004572:	ea03 0501 	and.w	r5, r3, r1
 8004576:	ea04 0602 	and.w	r6, r4, r2
 800457a:	4629      	mov	r1, r5
 800457c:	4632      	mov	r2, r6
 800457e:	f04f 0300 	mov.w	r3, #0
 8004582:	f04f 0400 	mov.w	r4, #0
 8004586:	0154      	lsls	r4, r2, #5
 8004588:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800458c:	014b      	lsls	r3, r1, #5
 800458e:	4619      	mov	r1, r3
 8004590:	4622      	mov	r2, r4
 8004592:	1b49      	subs	r1, r1, r5
 8004594:	eb62 0206 	sbc.w	r2, r2, r6
 8004598:	f04f 0300 	mov.w	r3, #0
 800459c:	f04f 0400 	mov.w	r4, #0
 80045a0:	0194      	lsls	r4, r2, #6
 80045a2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80045a6:	018b      	lsls	r3, r1, #6
 80045a8:	1a5b      	subs	r3, r3, r1
 80045aa:	eb64 0402 	sbc.w	r4, r4, r2
 80045ae:	f04f 0100 	mov.w	r1, #0
 80045b2:	f04f 0200 	mov.w	r2, #0
 80045b6:	00e2      	lsls	r2, r4, #3
 80045b8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80045bc:	00d9      	lsls	r1, r3, #3
 80045be:	460b      	mov	r3, r1
 80045c0:	4614      	mov	r4, r2
 80045c2:	195b      	adds	r3, r3, r5
 80045c4:	eb44 0406 	adc.w	r4, r4, r6
 80045c8:	f04f 0100 	mov.w	r1, #0
 80045cc:	f04f 0200 	mov.w	r2, #0
 80045d0:	02a2      	lsls	r2, r4, #10
 80045d2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80045d6:	0299      	lsls	r1, r3, #10
 80045d8:	460b      	mov	r3, r1
 80045da:	4614      	mov	r4, r2
 80045dc:	4618      	mov	r0, r3
 80045de:	4621      	mov	r1, r4
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f04f 0400 	mov.w	r4, #0
 80045e6:	461a      	mov	r2, r3
 80045e8:	4623      	mov	r3, r4
 80045ea:	f7fc f835 	bl	8000658 <__aeabi_uldivmod>
 80045ee:	4603      	mov	r3, r0
 80045f0:	460c      	mov	r4, r1
 80045f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045f4:	4b0a      	ldr	r3, [pc, #40]	; (8004620 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	0c1b      	lsrs	r3, r3, #16
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	3301      	adds	r3, #1
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	fbb2 f3f3 	udiv	r3, r2, r3
 800460c:	60bb      	str	r3, [r7, #8]
      break;
 800460e:	e002      	b.n	8004616 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004610:	4b04      	ldr	r3, [pc, #16]	; (8004624 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004612:	60bb      	str	r3, [r7, #8]
      break;
 8004614:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004616:	68bb      	ldr	r3, [r7, #8]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004620:	40023800 	.word	0x40023800
 8004624:	00f42400 	.word	0x00f42400
 8004628:	007a1200 	.word	0x007a1200

0800462c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800462c:	b480      	push	{r7}
 800462e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004630:	4b03      	ldr	r3, [pc, #12]	; (8004640 <HAL_RCC_GetHCLKFreq+0x14>)
 8004632:	681b      	ldr	r3, [r3, #0]
}
 8004634:	4618      	mov	r0, r3
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	20000000 	.word	0x20000000

08004644 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004648:	f7ff fff0 	bl	800462c <HAL_RCC_GetHCLKFreq>
 800464c:	4601      	mov	r1, r0
 800464e:	4b05      	ldr	r3, [pc, #20]	; (8004664 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	0b5b      	lsrs	r3, r3, #13
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	4a03      	ldr	r2, [pc, #12]	; (8004668 <HAL_RCC_GetPCLK2Freq+0x24>)
 800465a:	5cd3      	ldrb	r3, [r2, r3]
 800465c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004660:	4618      	mov	r0, r3
 8004662:	bd80      	pop	{r7, pc}
 8004664:	40023800 	.word	0x40023800
 8004668:	0800b44c 	.word	0x0800b44c

0800466c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	220f      	movs	r2, #15
 800467a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800467c:	4b12      	ldr	r3, [pc, #72]	; (80046c8 <HAL_RCC_GetClockConfig+0x5c>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f003 0203 	and.w	r2, r3, #3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004688:	4b0f      	ldr	r3, [pc, #60]	; (80046c8 <HAL_RCC_GetClockConfig+0x5c>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004694:	4b0c      	ldr	r3, [pc, #48]	; (80046c8 <HAL_RCC_GetClockConfig+0x5c>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80046a0:	4b09      	ldr	r3, [pc, #36]	; (80046c8 <HAL_RCC_GetClockConfig+0x5c>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	08db      	lsrs	r3, r3, #3
 80046a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80046ae:	4b07      	ldr	r3, [pc, #28]	; (80046cc <HAL_RCC_GetClockConfig+0x60>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 020f 	and.w	r2, r3, #15
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	601a      	str	r2, [r3, #0]
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	40023800 	.word	0x40023800
 80046cc:	40023c00 	.word	0x40023c00

080046d0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d105      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d035      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046f8:	4b62      	ldr	r3, [pc, #392]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046fe:	f7fc fefb 	bl	80014f8 <HAL_GetTick>
 8004702:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004704:	e008      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004706:	f7fc fef7 	bl	80014f8 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d901      	bls.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e0b0      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004718:	4b5b      	ldr	r3, [pc, #364]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1f0      	bne.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	019a      	lsls	r2, r3, #6
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	071b      	lsls	r3, r3, #28
 8004730:	4955      	ldr	r1, [pc, #340]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004732:	4313      	orrs	r3, r2
 8004734:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004738:	4b52      	ldr	r3, [pc, #328]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800473a:	2201      	movs	r2, #1
 800473c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800473e:	f7fc fedb 	bl	80014f8 <HAL_GetTick>
 8004742:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004744:	e008      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004746:	f7fc fed7 	bl	80014f8 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d901      	bls.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e090      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004758:	4b4b      	ldr	r3, [pc, #300]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0f0      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 8083 	beq.w	8004878 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004772:	2300      	movs	r3, #0
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	4b44      	ldr	r3, [pc, #272]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	4a43      	ldr	r2, [pc, #268]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800477c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004780:	6413      	str	r3, [r2, #64]	; 0x40
 8004782:	4b41      	ldr	r3, [pc, #260]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800478e:	4b3f      	ldr	r3, [pc, #252]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a3e      	ldr	r2, [pc, #248]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004798:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800479a:	f7fc fead 	bl	80014f8 <HAL_GetTick>
 800479e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047a0:	e008      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80047a2:	f7fc fea9 	bl	80014f8 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d901      	bls.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e062      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047b4:	4b35      	ldr	r3, [pc, #212]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d0f0      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047c0:	4b31      	ldr	r3, [pc, #196]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047c8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d02f      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d028      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047de:	4b2a      	ldr	r3, [pc, #168]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047e6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047e8:	4b29      	ldr	r3, [pc, #164]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047ea:	2201      	movs	r2, #1
 80047ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047ee:	4b28      	ldr	r3, [pc, #160]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80047f4:	4a24      	ldr	r2, [pc, #144]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80047fa:	4b23      	ldr	r3, [pc, #140]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b01      	cmp	r3, #1
 8004804:	d114      	bne.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004806:	f7fc fe77 	bl	80014f8 <HAL_GetTick>
 800480a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800480c:	e00a      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800480e:	f7fc fe73 	bl	80014f8 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	f241 3288 	movw	r2, #5000	; 0x1388
 800481c:	4293      	cmp	r3, r2
 800481e:	d901      	bls.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e02a      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004824:	4b18      	ldr	r3, [pc, #96]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d0ee      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004838:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800483c:	d10d      	bne.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800483e:	4b12      	ldr	r3, [pc, #72]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800484e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004852:	490d      	ldr	r1, [pc, #52]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004854:	4313      	orrs	r3, r2
 8004856:	608b      	str	r3, [r1, #8]
 8004858:	e005      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800485a:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	4a0a      	ldr	r2, [pc, #40]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004860:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004864:	6093      	str	r3, [r2, #8]
 8004866:	4b08      	ldr	r3, [pc, #32]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004868:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004872:	4905      	ldr	r1, [pc, #20]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004874:	4313      	orrs	r3, r2
 8004876:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3718      	adds	r7, #24
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	42470068 	.word	0x42470068
 8004888:	40023800 	.word	0x40023800
 800488c:	40007000 	.word	0x40007000
 8004890:	42470e40 	.word	0x42470e40

08004894 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d13d      	bne.n	800492e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80048b2:	4b22      	ldr	r3, [pc, #136]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048ba:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d004      	beq.n	80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d12f      	bne.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80048c6:	4b1e      	ldr	r3, [pc, #120]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048c8:	617b      	str	r3, [r7, #20]
          break;
 80048ca:	e02f      	b.n	800492c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80048cc:	4b1b      	ldr	r3, [pc, #108]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048d8:	d108      	bne.n	80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80048da:	4b18      	ldr	r3, [pc, #96]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048e2:	4a18      	ldr	r2, [pc, #96]	; (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80048e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e8:	613b      	str	r3, [r7, #16]
 80048ea:	e007      	b.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80048ec:	4b13      	ldr	r3, [pc, #76]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048f4:	4a14      	ldr	r2, [pc, #80]	; (8004948 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80048f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fa:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80048fc:	4b0f      	ldr	r3, [pc, #60]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80048fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004902:	099b      	lsrs	r3, r3, #6
 8004904:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	fb02 f303 	mul.w	r3, r2, r3
 800490e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004910:	4b0a      	ldr	r3, [pc, #40]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004916:	0f1b      	lsrs	r3, r3, #28
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004922:	617b      	str	r3, [r7, #20]
          break;
 8004924:	e002      	b.n	800492c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	617b      	str	r3, [r7, #20]
          break;
 800492a:	bf00      	nop
        }
      }
      break;
 800492c:	bf00      	nop
    }
  }
  return frequency;
 800492e:	697b      	ldr	r3, [r7, #20]
}
 8004930:	4618      	mov	r0, r3
 8004932:	371c      	adds	r7, #28
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr
 800493c:	40023800 	.word	0x40023800
 8004940:	00bb8000 	.word	0x00bb8000
 8004944:	007a1200 	.word	0x007a1200
 8004948:	00f42400 	.word	0x00f42400

0800494c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e056      	b.n	8004a0c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	d106      	bne.n	800497e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f7fc fc45 	bl	8001208 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2202      	movs	r2, #2
 8004982:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004994:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685a      	ldr	r2, [r3, #4]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	431a      	orrs	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	431a      	orrs	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	431a      	orrs	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	431a      	orrs	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049ba:	431a      	orrs	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	69db      	ldr	r3, [r3, #28]
 80049c0:	431a      	orrs	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	ea42 0103 	orr.w	r1, r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	0c1b      	lsrs	r3, r3, #16
 80049dc:	f003 0104 	and.w	r1, r3, #4
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	69da      	ldr	r2, [r3, #28]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e01d      	b.n	8004a62 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d106      	bne.n	8004a40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f815 	bl	8004a6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2202      	movs	r2, #2
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3304      	adds	r3, #4
 8004a50:	4619      	mov	r1, r3
 8004a52:	4610      	mov	r0, r2
 8004a54:	f000 f968 	bl	8004d28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b083      	sub	sp, #12
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a72:	bf00      	nop
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b085      	sub	sp, #20
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68da      	ldr	r2, [r3, #12]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f042 0201 	orr.w	r2, r2, #1
 8004a94:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f003 0307 	and.w	r3, r3, #7
 8004aa0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2b06      	cmp	r3, #6
 8004aa6:	d007      	beq.n	8004ab8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f042 0201 	orr.w	r2, r2, #1
 8004ab6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3714      	adds	r7, #20
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b082      	sub	sp, #8
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d122      	bne.n	8004b22 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d11b      	bne.n	8004b22 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f06f 0202 	mvn.w	r2, #2
 8004af2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	f003 0303 	and.w	r3, r3, #3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d003      	beq.n	8004b10 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f8ee 	bl	8004cea <HAL_TIM_IC_CaptureCallback>
 8004b0e:	e005      	b.n	8004b1c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f8e0 	bl	8004cd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f8f1 	bl	8004cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	f003 0304 	and.w	r3, r3, #4
 8004b2c:	2b04      	cmp	r3, #4
 8004b2e:	d122      	bne.n	8004b76 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f003 0304 	and.w	r3, r3, #4
 8004b3a:	2b04      	cmp	r3, #4
 8004b3c:	d11b      	bne.n	8004b76 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f06f 0204 	mvn.w	r2, #4
 8004b46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 f8c4 	bl	8004cea <HAL_TIM_IC_CaptureCallback>
 8004b62:	e005      	b.n	8004b70 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 f8b6 	bl	8004cd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f8c7 	bl	8004cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	f003 0308 	and.w	r3, r3, #8
 8004b80:	2b08      	cmp	r3, #8
 8004b82:	d122      	bne.n	8004bca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	f003 0308 	and.w	r3, r3, #8
 8004b8e:	2b08      	cmp	r3, #8
 8004b90:	d11b      	bne.n	8004bca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f06f 0208 	mvn.w	r2, #8
 8004b9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2204      	movs	r2, #4
 8004ba0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	f003 0303 	and.w	r3, r3, #3
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d003      	beq.n	8004bb8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 f89a 	bl	8004cea <HAL_TIM_IC_CaptureCallback>
 8004bb6:	e005      	b.n	8004bc4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 f88c 	bl	8004cd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f89d 	bl	8004cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	f003 0310 	and.w	r3, r3, #16
 8004bd4:	2b10      	cmp	r3, #16
 8004bd6:	d122      	bne.n	8004c1e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	f003 0310 	and.w	r3, r3, #16
 8004be2:	2b10      	cmp	r3, #16
 8004be4:	d11b      	bne.n	8004c1e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f06f 0210 	mvn.w	r2, #16
 8004bee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2208      	movs	r2, #8
 8004bf4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	69db      	ldr	r3, [r3, #28]
 8004bfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d003      	beq.n	8004c0c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 f870 	bl	8004cea <HAL_TIM_IC_CaptureCallback>
 8004c0a:	e005      	b.n	8004c18 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f862 	bl	8004cd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f873 	bl	8004cfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d10e      	bne.n	8004c4a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d107      	bne.n	8004c4a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f06f 0201 	mvn.w	r2, #1
 8004c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7fc fa35 	bl	80010b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c54:	2b80      	cmp	r3, #128	; 0x80
 8004c56:	d10e      	bne.n	8004c76 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c62:	2b80      	cmp	r3, #128	; 0x80
 8004c64:	d107      	bne.n	8004c76 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 f903 	bl	8004e7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c80:	2b40      	cmp	r3, #64	; 0x40
 8004c82:	d10e      	bne.n	8004ca2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8e:	2b40      	cmp	r3, #64	; 0x40
 8004c90:	d107      	bne.n	8004ca2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f838 	bl	8004d12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	f003 0320 	and.w	r3, r3, #32
 8004cac:	2b20      	cmp	r3, #32
 8004cae:	d10e      	bne.n	8004cce <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f003 0320 	and.w	r3, r3, #32
 8004cba:	2b20      	cmp	r3, #32
 8004cbc:	d107      	bne.n	8004cce <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f06f 0220 	mvn.w	r2, #32
 8004cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 f8cd 	bl	8004e68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cce:	bf00      	nop
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b083      	sub	sp, #12
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cf2:	bf00      	nop
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b083      	sub	sp, #12
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d1a:	bf00      	nop
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
	...

08004d28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a40      	ldr	r2, [pc, #256]	; (8004e3c <TIM_Base_SetConfig+0x114>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d013      	beq.n	8004d68 <TIM_Base_SetConfig+0x40>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d46:	d00f      	beq.n	8004d68 <TIM_Base_SetConfig+0x40>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a3d      	ldr	r2, [pc, #244]	; (8004e40 <TIM_Base_SetConfig+0x118>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d00b      	beq.n	8004d68 <TIM_Base_SetConfig+0x40>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a3c      	ldr	r2, [pc, #240]	; (8004e44 <TIM_Base_SetConfig+0x11c>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d007      	beq.n	8004d68 <TIM_Base_SetConfig+0x40>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a3b      	ldr	r2, [pc, #236]	; (8004e48 <TIM_Base_SetConfig+0x120>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d003      	beq.n	8004d68 <TIM_Base_SetConfig+0x40>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a3a      	ldr	r2, [pc, #232]	; (8004e4c <TIM_Base_SetConfig+0x124>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d108      	bne.n	8004d7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a2f      	ldr	r2, [pc, #188]	; (8004e3c <TIM_Base_SetConfig+0x114>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d02b      	beq.n	8004dda <TIM_Base_SetConfig+0xb2>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d88:	d027      	beq.n	8004dda <TIM_Base_SetConfig+0xb2>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a2c      	ldr	r2, [pc, #176]	; (8004e40 <TIM_Base_SetConfig+0x118>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d023      	beq.n	8004dda <TIM_Base_SetConfig+0xb2>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a2b      	ldr	r2, [pc, #172]	; (8004e44 <TIM_Base_SetConfig+0x11c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d01f      	beq.n	8004dda <TIM_Base_SetConfig+0xb2>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a2a      	ldr	r2, [pc, #168]	; (8004e48 <TIM_Base_SetConfig+0x120>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d01b      	beq.n	8004dda <TIM_Base_SetConfig+0xb2>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a29      	ldr	r2, [pc, #164]	; (8004e4c <TIM_Base_SetConfig+0x124>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d017      	beq.n	8004dda <TIM_Base_SetConfig+0xb2>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a28      	ldr	r2, [pc, #160]	; (8004e50 <TIM_Base_SetConfig+0x128>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d013      	beq.n	8004dda <TIM_Base_SetConfig+0xb2>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a27      	ldr	r2, [pc, #156]	; (8004e54 <TIM_Base_SetConfig+0x12c>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d00f      	beq.n	8004dda <TIM_Base_SetConfig+0xb2>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a26      	ldr	r2, [pc, #152]	; (8004e58 <TIM_Base_SetConfig+0x130>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d00b      	beq.n	8004dda <TIM_Base_SetConfig+0xb2>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a25      	ldr	r2, [pc, #148]	; (8004e5c <TIM_Base_SetConfig+0x134>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d007      	beq.n	8004dda <TIM_Base_SetConfig+0xb2>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a24      	ldr	r2, [pc, #144]	; (8004e60 <TIM_Base_SetConfig+0x138>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d003      	beq.n	8004dda <TIM_Base_SetConfig+0xb2>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a23      	ldr	r2, [pc, #140]	; (8004e64 <TIM_Base_SetConfig+0x13c>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d108      	bne.n	8004dec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004de0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	689a      	ldr	r2, [r3, #8]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a0a      	ldr	r2, [pc, #40]	; (8004e3c <TIM_Base_SetConfig+0x114>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d003      	beq.n	8004e20 <TIM_Base_SetConfig+0xf8>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a0c      	ldr	r2, [pc, #48]	; (8004e4c <TIM_Base_SetConfig+0x124>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d103      	bne.n	8004e28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	691a      	ldr	r2, [r3, #16]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	615a      	str	r2, [r3, #20]
}
 8004e2e:	bf00      	nop
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	40010000 	.word	0x40010000
 8004e40:	40000400 	.word	0x40000400
 8004e44:	40000800 	.word	0x40000800
 8004e48:	40000c00 	.word	0x40000c00
 8004e4c:	40010400 	.word	0x40010400
 8004e50:	40014000 	.word	0x40014000
 8004e54:	40014400 	.word	0x40014400
 8004e58:	40014800 	.word	0x40014800
 8004e5c:	40001800 	.word	0x40001800
 8004e60:	40001c00 	.word	0x40001c00
 8004e64:	40002000 	.word	0x40002000

08004e68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e90:	b084      	sub	sp, #16
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b084      	sub	sp, #16
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
 8004e9a:	f107 001c 	add.w	r0, r7, #28
 8004e9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d122      	bne.n	8004eee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004ebc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d105      	bne.n	8004ee2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f94a 	bl	800517c <USB_CoreReset>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	73fb      	strb	r3, [r7, #15]
 8004eec:	e01a      	b.n	8004f24 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f93e 	bl	800517c <USB_CoreReset>
 8004f00:	4603      	mov	r3, r0
 8004f02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d106      	bne.n	8004f18 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	639a      	str	r2, [r3, #56]	; 0x38
 8004f16:	e005      	b.n	8004f24 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d10b      	bne.n	8004f42 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f043 0206 	orr.w	r2, r3, #6
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f043 0220 	orr.w	r2, r3, #32
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f4e:	b004      	add	sp, #16
 8004f50:	4770      	bx	lr

08004f52 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b083      	sub	sp, #12
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f043 0201 	orr.w	r2, r3, #1
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f023 0201 	bic.w	r2, r3, #1
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b082      	sub	sp, #8
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004fae:	78fb      	ldrb	r3, [r7, #3]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d106      	bne.n	8004fc2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	60da      	str	r2, [r3, #12]
 8004fc0:	e00b      	b.n	8004fda <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004fc2:	78fb      	ldrb	r3, [r7, #3]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d106      	bne.n	8004fd6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	60da      	str	r2, [r3, #12]
 8004fd4:	e001      	b.n	8004fda <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e003      	b.n	8004fe2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004fda:	2032      	movs	r0, #50	; 0x32
 8004fdc:	f7fc fa98 	bl	8001510 <HAL_Delay>

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
	...

08004fec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	019b      	lsls	r3, r3, #6
 8004ffe:	f043 0220 	orr.w	r2, r3, #32
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	3301      	adds	r3, #1
 800500a:	60fb      	str	r3, [r7, #12]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4a09      	ldr	r2, [pc, #36]	; (8005034 <USB_FlushTxFifo+0x48>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d901      	bls.n	8005018 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e006      	b.n	8005026 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	f003 0320 	and.w	r3, r3, #32
 8005020:	2b20      	cmp	r3, #32
 8005022:	d0f0      	beq.n	8005006 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	00030d40 	.word	0x00030d40

08005038 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005040:	2300      	movs	r3, #0
 8005042:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2210      	movs	r2, #16
 8005048:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	3301      	adds	r3, #1
 800504e:	60fb      	str	r3, [r7, #12]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	4a09      	ldr	r2, [pc, #36]	; (8005078 <USB_FlushRxFifo+0x40>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d901      	bls.n	800505c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e006      	b.n	800506a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	f003 0310 	and.w	r3, r3, #16
 8005064:	2b10      	cmp	r3, #16
 8005066:	d0f0      	beq.n	800504a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	00030d40 	.word	0x00030d40

0800507c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800507c:	b480      	push	{r7}
 800507e:	b089      	sub	sp, #36	; 0x24
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	4611      	mov	r1, r2
 8005088:	461a      	mov	r2, r3
 800508a:	460b      	mov	r3, r1
 800508c:	71fb      	strb	r3, [r7, #7]
 800508e:	4613      	mov	r3, r2
 8005090:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800509a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d11a      	bne.n	80050d8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80050a2:	88bb      	ldrh	r3, [r7, #4]
 80050a4:	3303      	adds	r3, #3
 80050a6:	089b      	lsrs	r3, r3, #2
 80050a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80050aa:	2300      	movs	r3, #0
 80050ac:	61bb      	str	r3, [r7, #24]
 80050ae:	e00f      	b.n	80050d0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80050b0:	79fb      	ldrb	r3, [r7, #7]
 80050b2:	031a      	lsls	r2, r3, #12
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050bc:	461a      	mov	r2, r3
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	3304      	adds	r3, #4
 80050c8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	3301      	adds	r3, #1
 80050ce:	61bb      	str	r3, [r7, #24]
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d3eb      	bcc.n	80050b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3724      	adds	r7, #36	; 0x24
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr

080050e6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80050e6:	b480      	push	{r7}
 80050e8:	b089      	sub	sp, #36	; 0x24
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	60f8      	str	r0, [r7, #12]
 80050ee:	60b9      	str	r1, [r7, #8]
 80050f0:	4613      	mov	r3, r2
 80050f2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80050fc:	88fb      	ldrh	r3, [r7, #6]
 80050fe:	3303      	adds	r3, #3
 8005100:	089b      	lsrs	r3, r3, #2
 8005102:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005104:	2300      	movs	r3, #0
 8005106:	61bb      	str	r3, [r7, #24]
 8005108:	e00b      	b.n	8005122 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	601a      	str	r2, [r3, #0]
    pDest++;
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	3304      	adds	r3, #4
 800511a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	3301      	adds	r3, #1
 8005120:	61bb      	str	r3, [r7, #24]
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	429a      	cmp	r2, r3
 8005128:	d3ef      	bcc.n	800510a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800512a:	69fb      	ldr	r3, [r7, #28]
}
 800512c:	4618      	mov	r0, r3
 800512e:	3724      	adds	r7, #36	; 0x24
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	4013      	ands	r3, r2
 800514e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005150:	68fb      	ldr	r3, [r7, #12]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800515e:	b480      	push	{r7}
 8005160:	b083      	sub	sp, #12
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	f003 0301 	and.w	r3, r3, #1
}
 800516e:	4618      	mov	r0, r3
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
	...

0800517c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	3301      	adds	r3, #1
 800518c:	60fb      	str	r3, [r7, #12]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4a13      	ldr	r2, [pc, #76]	; (80051e0 <USB_CoreReset+0x64>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d901      	bls.n	800519a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e01b      	b.n	80051d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	daf2      	bge.n	8005188 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	f043 0201 	orr.w	r2, r3, #1
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	3301      	adds	r3, #1
 80051b6:	60fb      	str	r3, [r7, #12]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	4a09      	ldr	r2, [pc, #36]	; (80051e0 <USB_CoreReset+0x64>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d901      	bls.n	80051c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e006      	b.n	80051d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	f003 0301 	and.w	r3, r3, #1
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d0f0      	beq.n	80051b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	00030d40 	.word	0x00030d40

080051e4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051e4:	b084      	sub	sp, #16
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b084      	sub	sp, #16
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
 80051ee:	f107 001c 	add.w	r0, r7, #28
 80051f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005200:	461a      	mov	r2, r3
 8005202:	2300      	movs	r3, #0
 8005204:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005216:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005222:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005232:	2b00      	cmp	r3, #0
 8005234:	d018      	beq.n	8005268 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005238:	2b01      	cmp	r3, #1
 800523a:	d10a      	bne.n	8005252 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800524a:	f043 0304 	orr.w	r3, r3, #4
 800524e:	6013      	str	r3, [r2, #0]
 8005250:	e014      	b.n	800527c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005260:	f023 0304 	bic.w	r3, r3, #4
 8005264:	6013      	str	r3, [r2, #0]
 8005266:	e009      	b.n	800527c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005276:	f023 0304 	bic.w	r3, r3, #4
 800527a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800527c:	2110      	movs	r1, #16
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7ff feb4 	bl	8004fec <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f7ff fed7 	bl	8005038 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800528a:	2300      	movs	r3, #0
 800528c:	60fb      	str	r3, [r7, #12]
 800528e:	e015      	b.n	80052bc <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	4413      	add	r3, r2
 8005298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800529c:	461a      	mov	r2, r3
 800529e:	f04f 33ff 	mov.w	r3, #4294967295
 80052a2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b0:	461a      	mov	r2, r3
 80052b2:	2300      	movs	r3, #0
 80052b4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	3301      	adds	r3, #1
 80052ba:	60fb      	str	r3, [r7, #12]
 80052bc:	6a3b      	ldr	r3, [r7, #32]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d3e5      	bcc.n	8005290 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80052c4:	2101      	movs	r1, #1
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f8ac 	bl	8005424 <USB_DriveVbus>

  HAL_Delay(200U);
 80052cc:	20c8      	movs	r0, #200	; 0xc8
 80052ce:	f7fc f91f 	bl	8001510 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f04f 32ff 	mov.w	r2, #4294967295
 80052de:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00b      	beq.n	8005304 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052f2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a14      	ldr	r2, [pc, #80]	; (8005348 <USB_HostInit+0x164>)
 80052f8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a13      	ldr	r2, [pc, #76]	; (800534c <USB_HostInit+0x168>)
 80052fe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005302:	e009      	b.n	8005318 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2280      	movs	r2, #128	; 0x80
 8005308:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a10      	ldr	r2, [pc, #64]	; (8005350 <USB_HostInit+0x16c>)
 800530e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a10      	ldr	r2, [pc, #64]	; (8005354 <USB_HostInit+0x170>)
 8005314:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531a:	2b00      	cmp	r3, #0
 800531c:	d105      	bne.n	800532a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	f043 0210 	orr.w	r2, r3, #16
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	699a      	ldr	r2, [r3, #24]
 800532e:	4b0a      	ldr	r3, [pc, #40]	; (8005358 <USB_HostInit+0x174>)
 8005330:	4313      	orrs	r3, r2
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005342:	b004      	add	sp, #16
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	01000200 	.word	0x01000200
 800534c:	00e00300 	.word	0x00e00300
 8005350:	00600080 	.word	0x00600080
 8005354:	004000e0 	.word	0x004000e0
 8005358:	a3200008 	.word	0xa3200008

0800535c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	460b      	mov	r3, r1
 8005366:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800537a:	f023 0303 	bic.w	r3, r3, #3
 800537e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	78fb      	ldrb	r3, [r7, #3]
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	68f9      	ldr	r1, [r7, #12]
 8005390:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005394:	4313      	orrs	r3, r2
 8005396:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005398:	78fb      	ldrb	r3, [r7, #3]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d107      	bne.n	80053ae <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053a4:	461a      	mov	r2, r3
 80053a6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80053aa:	6053      	str	r3, [r2, #4]
 80053ac:	e009      	b.n	80053c2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80053ae:	78fb      	ldrb	r3, [r7, #3]
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d106      	bne.n	80053c2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053ba:	461a      	mov	r2, r3
 80053bc:	f241 7370 	movw	r3, #6000	; 0x1770
 80053c0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3714      	adds	r7, #20
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80053dc:	2300      	movs	r3, #0
 80053de:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80053f0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80053fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053fe:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005400:	2064      	movs	r0, #100	; 0x64
 8005402:	f7fc f885 	bl	8001510 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800540e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005412:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005414:	200a      	movs	r0, #10
 8005416:	f7fc f87b 	bl	8001510 <HAL_Delay>

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	460b      	mov	r3, r1
 800542e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005434:	2300      	movs	r3, #0
 8005436:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005448:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d109      	bne.n	8005468 <USB_DriveVbus+0x44>
 8005454:	78fb      	ldrb	r3, [r7, #3]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d106      	bne.n	8005468 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005462:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005466:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800546e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005472:	d109      	bne.n	8005488 <USB_DriveVbus+0x64>
 8005474:	78fb      	ldrb	r3, [r7, #3]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d106      	bne.n	8005488 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005482:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005486:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005496:	b480      	push	{r7}
 8005498:	b085      	sub	sp, #20
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80054a2:	2300      	movs	r3, #0
 80054a4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	0c5b      	lsrs	r3, r3, #17
 80054b4:	f003 0303 	and.w	r3, r3, #3
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	b29b      	uxth	r3, r3
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
	...

080054e8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b087      	sub	sp, #28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	4608      	mov	r0, r1
 80054f2:	4611      	mov	r1, r2
 80054f4:	461a      	mov	r2, r3
 80054f6:	4603      	mov	r3, r0
 80054f8:	70fb      	strb	r3, [r7, #3]
 80054fa:	460b      	mov	r3, r1
 80054fc:	70bb      	strb	r3, [r7, #2]
 80054fe:	4613      	mov	r3, r2
 8005500:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800550a:	78fb      	ldrb	r3, [r7, #3]
 800550c:	015a      	lsls	r2, r3, #5
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	4413      	add	r3, r2
 8005512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005516:	461a      	mov	r2, r3
 8005518:	f04f 33ff 	mov.w	r3, #4294967295
 800551c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800551e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005522:	2b03      	cmp	r3, #3
 8005524:	d87e      	bhi.n	8005624 <USB_HC_Init+0x13c>
 8005526:	a201      	add	r2, pc, #4	; (adr r2, 800552c <USB_HC_Init+0x44>)
 8005528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552c:	0800553d 	.word	0x0800553d
 8005530:	080055e7 	.word	0x080055e7
 8005534:	0800553d 	.word	0x0800553d
 8005538:	080055a9 	.word	0x080055a9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800553c:	78fb      	ldrb	r3, [r7, #3]
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	4413      	add	r3, r2
 8005544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005548:	461a      	mov	r2, r3
 800554a:	f240 439d 	movw	r3, #1181	; 0x49d
 800554e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005550:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005554:	2b00      	cmp	r3, #0
 8005556:	da10      	bge.n	800557a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005558:	78fb      	ldrb	r3, [r7, #3]
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	4413      	add	r3, r2
 8005560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	78fa      	ldrb	r2, [r7, #3]
 8005568:	0151      	lsls	r1, r2, #5
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	440a      	add	r2, r1
 800556e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005576:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005578:	e057      	b.n	800562a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800557e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005582:	2b00      	cmp	r3, #0
 8005584:	d051      	beq.n	800562a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005586:	78fb      	ldrb	r3, [r7, #3]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	4413      	add	r3, r2
 800558e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	78fa      	ldrb	r2, [r7, #3]
 8005596:	0151      	lsls	r1, r2, #5
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	440a      	add	r2, r1
 800559c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055a0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80055a4:	60d3      	str	r3, [r2, #12]
      break;
 80055a6:	e040      	b.n	800562a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80055a8:	78fb      	ldrb	r3, [r7, #3]
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b4:	461a      	mov	r2, r3
 80055b6:	f240 639d 	movw	r3, #1693	; 0x69d
 80055ba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80055bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	da34      	bge.n	800562e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80055c4:	78fb      	ldrb	r3, [r7, #3]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	78fa      	ldrb	r2, [r7, #3]
 80055d4:	0151      	lsls	r1, r2, #5
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	440a      	add	r2, r1
 80055da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055e2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80055e4:	e023      	b.n	800562e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80055e6:	78fb      	ldrb	r3, [r7, #3]
 80055e8:	015a      	lsls	r2, r3, #5
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055f2:	461a      	mov	r2, r3
 80055f4:	f240 2325 	movw	r3, #549	; 0x225
 80055f8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80055fa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	da17      	bge.n	8005632 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005602:	78fb      	ldrb	r3, [r7, #3]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	4413      	add	r3, r2
 800560a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	78fa      	ldrb	r2, [r7, #3]
 8005612:	0151      	lsls	r1, r2, #5
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	440a      	add	r2, r1
 8005618:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800561c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005620:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005622:	e006      	b.n	8005632 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	75fb      	strb	r3, [r7, #23]
      break;
 8005628:	e004      	b.n	8005634 <USB_HC_Init+0x14c>
      break;
 800562a:	bf00      	nop
 800562c:	e002      	b.n	8005634 <USB_HC_Init+0x14c>
      break;
 800562e:	bf00      	nop
 8005630:	e000      	b.n	8005634 <USB_HC_Init+0x14c>
      break;
 8005632:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800563a:	699a      	ldr	r2, [r3, #24]
 800563c:	78fb      	ldrb	r3, [r7, #3]
 800563e:	f003 030f 	and.w	r3, r3, #15
 8005642:	2101      	movs	r1, #1
 8005644:	fa01 f303 	lsl.w	r3, r1, r3
 8005648:	68b9      	ldr	r1, [r7, #8]
 800564a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800564e:	4313      	orrs	r3, r2
 8005650:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800565e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005662:	2b00      	cmp	r3, #0
 8005664:	da03      	bge.n	800566e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800566a:	613b      	str	r3, [r7, #16]
 800566c:	e001      	b.n	8005672 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800566e:	2300      	movs	r3, #0
 8005670:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005672:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005676:	2b02      	cmp	r3, #2
 8005678:	d103      	bne.n	8005682 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800567a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800567e:	60fb      	str	r3, [r7, #12]
 8005680:	e001      	b.n	8005686 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005682:	2300      	movs	r3, #0
 8005684:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005686:	787b      	ldrb	r3, [r7, #1]
 8005688:	059b      	lsls	r3, r3, #22
 800568a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800568e:	78bb      	ldrb	r3, [r7, #2]
 8005690:	02db      	lsls	r3, r3, #11
 8005692:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005696:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005698:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800569c:	049b      	lsls	r3, r3, #18
 800569e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80056a2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80056a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80056a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80056aa:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80056b0:	78fb      	ldrb	r3, [r7, #3]
 80056b2:	0159      	lsls	r1, r3, #5
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	440b      	add	r3, r1
 80056b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056bc:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80056c2:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80056c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80056c8:	2b03      	cmp	r3, #3
 80056ca:	d10f      	bne.n	80056ec <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80056cc:	78fb      	ldrb	r3, [r7, #3]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	78fa      	ldrb	r2, [r7, #3]
 80056dc:	0151      	lsls	r1, r2, #5
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	440a      	add	r2, r1
 80056e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056ea:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80056ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	371c      	adds	r7, #28
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop

080056fc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b08c      	sub	sp, #48	; 0x30
 8005700:	af02      	add	r7, sp, #8
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	4613      	mov	r3, r2
 8005708:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	785b      	ldrb	r3, [r3, #1]
 8005712:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005714:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005718:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005722:	2b00      	cmp	r3, #0
 8005724:	d028      	beq.n	8005778 <USB_HC_StartXfer+0x7c>
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	791b      	ldrb	r3, [r3, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d124      	bne.n	8005778 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800572e:	79fb      	ldrb	r3, [r7, #7]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10b      	bne.n	800574c <USB_HC_StartXfer+0x50>
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	795b      	ldrb	r3, [r3, #5]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d107      	bne.n	800574c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	785b      	ldrb	r3, [r3, #1]
 8005740:	4619      	mov	r1, r3
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f000 fa30 	bl	8005ba8 <USB_DoPing>
      return HAL_OK;
 8005748:	2300      	movs	r3, #0
 800574a:	e114      	b.n	8005976 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 800574c:	79fb      	ldrb	r3, [r7, #7]
 800574e:	2b01      	cmp	r3, #1
 8005750:	d112      	bne.n	8005778 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	015a      	lsls	r2, r3, #5
 8005756:	6a3b      	ldr	r3, [r7, #32]
 8005758:	4413      	add	r3, r2
 800575a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	69fa      	ldr	r2, [r7, #28]
 8005762:	0151      	lsls	r1, r2, #5
 8005764:	6a3a      	ldr	r2, [r7, #32]
 8005766:	440a      	add	r2, r1
 8005768:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800576c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005770:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	2200      	movs	r2, #0
 8005776:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d018      	beq.n	80057b2 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	8912      	ldrh	r2, [r2, #8]
 8005788:	4413      	add	r3, r2
 800578a:	3b01      	subs	r3, #1
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	8912      	ldrh	r2, [r2, #8]
 8005790:	fbb3 f3f2 	udiv	r3, r3, r2
 8005794:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005796:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005798:	8b7b      	ldrh	r3, [r7, #26]
 800579a:	429a      	cmp	r2, r3
 800579c:	d90b      	bls.n	80057b6 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800579e:	8b7b      	ldrh	r3, [r7, #26]
 80057a0:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80057a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	8912      	ldrh	r2, [r2, #8]
 80057a8:	fb02 f203 	mul.w	r2, r2, r3
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	611a      	str	r2, [r3, #16]
 80057b0:	e001      	b.n	80057b6 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80057b2:	2301      	movs	r3, #1
 80057b4:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	78db      	ldrb	r3, [r3, #3]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d006      	beq.n	80057cc <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80057be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	8912      	ldrh	r2, [r2, #8]
 80057c4:	fb02 f203 	mul.w	r2, r2, r3
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80057d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80057d6:	04d9      	lsls	r1, r3, #19
 80057d8:	4b69      	ldr	r3, [pc, #420]	; (8005980 <USB_HC_StartXfer+0x284>)
 80057da:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80057dc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	7a9b      	ldrb	r3, [r3, #10]
 80057e2:	075b      	lsls	r3, r3, #29
 80057e4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80057e8:	69f9      	ldr	r1, [r7, #28]
 80057ea:	0148      	lsls	r0, r1, #5
 80057ec:	6a39      	ldr	r1, [r7, #32]
 80057ee:	4401      	add	r1, r0
 80057f0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80057f4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80057f6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80057f8:	79fb      	ldrb	r3, [r7, #7]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d009      	beq.n	8005812 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	68d9      	ldr	r1, [r3, #12]
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	015a      	lsls	r2, r3, #5
 8005806:	6a3b      	ldr	r3, [r7, #32]
 8005808:	4413      	add	r3, r2
 800580a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800580e:	460a      	mov	r2, r1
 8005810:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005812:	6a3b      	ldr	r3, [r7, #32]
 8005814:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f003 0301 	and.w	r3, r3, #1
 800581e:	2b00      	cmp	r3, #0
 8005820:	bf0c      	ite	eq
 8005822:	2301      	moveq	r3, #1
 8005824:	2300      	movne	r3, #0
 8005826:	b2db      	uxtb	r3, r3
 8005828:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	015a      	lsls	r2, r3, #5
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	4413      	add	r3, r2
 8005832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	69fa      	ldr	r2, [r7, #28]
 800583a:	0151      	lsls	r1, r2, #5
 800583c:	6a3a      	ldr	r2, [r7, #32]
 800583e:	440a      	add	r2, r1
 8005840:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005844:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005848:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	015a      	lsls	r2, r3, #5
 800584e:	6a3b      	ldr	r3, [r7, #32]
 8005850:	4413      	add	r3, r2
 8005852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	7e7b      	ldrb	r3, [r7, #25]
 800585a:	075b      	lsls	r3, r3, #29
 800585c:	69f9      	ldr	r1, [r7, #28]
 800585e:	0148      	lsls	r0, r1, #5
 8005860:	6a39      	ldr	r1, [r7, #32]
 8005862:	4401      	add	r1, r0
 8005864:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005868:	4313      	orrs	r3, r2
 800586a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	6a3b      	ldr	r3, [r7, #32]
 8005872:	4413      	add	r3, r2
 8005874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a42      	ldr	r2, [pc, #264]	; (8005984 <USB_HC_StartXfer+0x288>)
 800587c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800587e:	4b41      	ldr	r3, [pc, #260]	; (8005984 <USB_HC_StartXfer+0x288>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005886:	4a3f      	ldr	r2, [pc, #252]	; (8005984 <USB_HC_StartXfer+0x288>)
 8005888:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	78db      	ldrb	r3, [r3, #3]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d006      	beq.n	80058a0 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005892:	4b3c      	ldr	r3, [pc, #240]	; (8005984 <USB_HC_StartXfer+0x288>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800589a:	4a3a      	ldr	r2, [pc, #232]	; (8005984 <USB_HC_StartXfer+0x288>)
 800589c:	6013      	str	r3, [r2, #0]
 800589e:	e005      	b.n	80058ac <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80058a0:	4b38      	ldr	r3, [pc, #224]	; (8005984 <USB_HC_StartXfer+0x288>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058a8:	4a36      	ldr	r2, [pc, #216]	; (8005984 <USB_HC_StartXfer+0x288>)
 80058aa:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80058ac:	4b35      	ldr	r3, [pc, #212]	; (8005984 <USB_HC_StartXfer+0x288>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058b4:	4a33      	ldr	r2, [pc, #204]	; (8005984 <USB_HC_StartXfer+0x288>)
 80058b6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	6a3b      	ldr	r3, [r7, #32]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c4:	461a      	mov	r2, r3
 80058c6:	4b2f      	ldr	r3, [pc, #188]	; (8005984 <USB_HC_StartXfer+0x288>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80058cc:	79fb      	ldrb	r3, [r7, #7]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d001      	beq.n	80058d6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80058d2:	2300      	movs	r3, #0
 80058d4:	e04f      	b.n	8005976 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	78db      	ldrb	r3, [r3, #3]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d14a      	bne.n	8005974 <USB_HC_StartXfer+0x278>
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d046      	beq.n	8005974 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	79db      	ldrb	r3, [r3, #7]
 80058ea:	2b03      	cmp	r3, #3
 80058ec:	d830      	bhi.n	8005950 <USB_HC_StartXfer+0x254>
 80058ee:	a201      	add	r2, pc, #4	; (adr r2, 80058f4 <USB_HC_StartXfer+0x1f8>)
 80058f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f4:	08005905 	.word	0x08005905
 80058f8:	08005929 	.word	0x08005929
 80058fc:	08005905 	.word	0x08005905
 8005900:	08005929 	.word	0x08005929
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	3303      	adds	r3, #3
 800590a:	089b      	lsrs	r3, r3, #2
 800590c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800590e:	8afa      	ldrh	r2, [r7, #22]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005914:	b29b      	uxth	r3, r3
 8005916:	429a      	cmp	r2, r3
 8005918:	d91c      	bls.n	8005954 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	f043 0220 	orr.w	r2, r3, #32
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	619a      	str	r2, [r3, #24]
        }
        break;
 8005926:	e015      	b.n	8005954 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	3303      	adds	r3, #3
 800592e:	089b      	lsrs	r3, r3, #2
 8005930:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005932:	8afa      	ldrh	r2, [r7, #22]
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	b29b      	uxth	r3, r3
 800593e:	429a      	cmp	r2, r3
 8005940:	d90a      	bls.n	8005958 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	619a      	str	r2, [r3, #24]
        }
        break;
 800594e:	e003      	b.n	8005958 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005950:	bf00      	nop
 8005952:	e002      	b.n	800595a <USB_HC_StartXfer+0x25e>
        break;
 8005954:	bf00      	nop
 8005956:	e000      	b.n	800595a <USB_HC_StartXfer+0x25e>
        break;
 8005958:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	68d9      	ldr	r1, [r3, #12]
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	785a      	ldrb	r2, [r3, #1]
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	b298      	uxth	r0, r3
 8005968:	2300      	movs	r3, #0
 800596a:	9300      	str	r3, [sp, #0]
 800596c:	4603      	mov	r3, r0
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f7ff fb84 	bl	800507c <USB_WritePacket>
  }

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3728      	adds	r7, #40	; 0x28
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	1ff80000 	.word	0x1ff80000
 8005984:	20000310 	.word	0x20000310

08005988 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	b29b      	uxth	r3, r3
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3714      	adds	r7, #20
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b087      	sub	sp, #28
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
 80059b2:	460b      	mov	r3, r1
 80059b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80059ba:	78fb      	ldrb	r3, [r7, #3]
 80059bc:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80059be:	2300      	movs	r3, #0
 80059c0:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	0c9b      	lsrs	r3, r3, #18
 80059d2:	f003 0303 	and.w	r3, r3, #3
 80059d6:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d002      	beq.n	80059e4 <USB_HC_Halt+0x3a>
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d16c      	bne.n	8005abe <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	015a      	lsls	r2, r3, #5
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	4413      	add	r3, r2
 80059ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	0151      	lsls	r1, r2, #5
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	440a      	add	r2, r1
 80059fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a02:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a08:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d143      	bne.n	8005a98 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	015a      	lsls	r2, r3, #5
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	4413      	add	r3, r2
 8005a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	0151      	lsls	r1, r2, #5
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	440a      	add	r2, r1
 8005a26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a2e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	0151      	lsls	r1, r2, #5
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	440a      	add	r2, r1
 8005a46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a4e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	0151      	lsls	r1, r2, #5
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	440a      	add	r2, r1
 8005a66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a6e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	3301      	adds	r3, #1
 8005a74:	617b      	str	r3, [r7, #20]
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a7c:	d81d      	bhi.n	8005aba <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	015a      	lsls	r2, r3, #5
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	4413      	add	r3, r2
 8005a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a94:	d0ec      	beq.n	8005a70 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005a96:	e080      	b.n	8005b9a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	0151      	lsls	r1, r2, #5
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	440a      	add	r2, r1
 8005aae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ab6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005ab8:	e06f      	b.n	8005b9a <USB_HC_Halt+0x1f0>
          break;
 8005aba:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005abc:	e06d      	b.n	8005b9a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	0151      	lsls	r1, r2, #5
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	440a      	add	r2, r1
 8005ad4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ad8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005adc:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d143      	bne.n	8005b76 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	0151      	lsls	r1, r2, #5
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	440a      	add	r2, r1
 8005b04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b0c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	0151      	lsls	r1, r2, #5
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	440a      	add	r2, r1
 8005b24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b2c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	0151      	lsls	r1, r2, #5
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	440a      	add	r2, r1
 8005b44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b4c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	3301      	adds	r3, #1
 8005b52:	617b      	str	r3, [r7, #20]
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b5a:	d81d      	bhi.n	8005b98 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	015a      	lsls	r2, r3, #5
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	4413      	add	r3, r2
 8005b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b72:	d0ec      	beq.n	8005b4e <USB_HC_Halt+0x1a4>
 8005b74:	e011      	b.n	8005b9a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	0151      	lsls	r1, r2, #5
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	440a      	add	r2, r1
 8005b8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b94:	6013      	str	r3, [r2, #0]
 8005b96:	e000      	b.n	8005b9a <USB_HC_Halt+0x1f0>
          break;
 8005b98:	bf00      	nop
    }
  }

  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	371c      	adds	r7, #28
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b087      	sub	sp, #28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005bb8:	78fb      	ldrb	r3, [r7, #3]
 8005bba:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	04da      	lsls	r2, r3, #19
 8005bc4:	4b15      	ldr	r3, [pc, #84]	; (8005c1c <USB_DoPing+0x74>)
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	0151      	lsls	r1, r2, #5
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	440a      	add	r2, r1
 8005bd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bd8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005bf0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bf8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c06:	461a      	mov	r2, r3
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	371c      	adds	r7, #28
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	1ff80000 	.word	0x1ff80000

08005c20 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f7ff f99f 	bl	8004f74 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005c36:	2110      	movs	r1, #16
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7ff f9d7 	bl	8004fec <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7ff f9fa 	bl	8005038 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005c44:	2300      	movs	r3, #0
 8005c46:	613b      	str	r3, [r7, #16]
 8005c48:	e01f      	b.n	8005c8a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	015a      	lsls	r2, r3, #5
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c60:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c68:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c70:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	015a      	lsls	r2, r3, #5
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	4413      	add	r3, r2
 8005c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c7e:	461a      	mov	r2, r3
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	3301      	adds	r3, #1
 8005c88:	613b      	str	r3, [r7, #16]
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	2b0f      	cmp	r3, #15
 8005c8e:	d9dc      	bls.n	8005c4a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005c90:	2300      	movs	r3, #0
 8005c92:	613b      	str	r3, [r7, #16]
 8005c94:	e034      	b.n	8005d00 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cac:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cb4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005cbc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	015a      	lsls	r2, r3, #5
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cca:	461a      	mov	r2, r3
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	617b      	str	r3, [r7, #20]
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cdc:	d80c      	bhi.n	8005cf8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cf4:	d0ec      	beq.n	8005cd0 <USB_StopHost+0xb0>
 8005cf6:	e000      	b.n	8005cfa <USB_StopHost+0xda>
        break;
 8005cf8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	613b      	str	r3, [r7, #16]
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	2b0f      	cmp	r3, #15
 8005d04:	d9c7      	bls.n	8005c96 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d12:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f04f 32ff 	mov.w	r2, #4294967295
 8005d1a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f7ff f918 	bl	8004f52 <USB_EnableGlobalInt>

  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3718      	adds	r7, #24
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005d2c:	b590      	push	{r4, r7, lr}
 8005d2e:	b089      	sub	sp, #36	; 0x24
 8005d30:	af04      	add	r7, sp, #16
 8005d32:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005d34:	2301      	movs	r3, #1
 8005d36:	2202      	movs	r2, #2
 8005d38:	2102      	movs	r1, #2
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 fcba 	bl	80066b4 <USBH_FindInterface>
 8005d40:	4603      	mov	r3, r0
 8005d42:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005d44:	7bfb      	ldrb	r3, [r7, #15]
 8005d46:	2bff      	cmp	r3, #255	; 0xff
 8005d48:	d002      	beq.n	8005d50 <USBH_CDC_InterfaceInit+0x24>
 8005d4a:	7bfb      	ldrb	r3, [r7, #15]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d901      	bls.n	8005d54 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005d50:	2302      	movs	r3, #2
 8005d52:	e13d      	b.n	8005fd0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005d54:	7bfb      	ldrb	r3, [r7, #15]
 8005d56:	4619      	mov	r1, r3
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 fc8f 	bl	800667c <USBH_SelectInterface>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005d62:	7bbb      	ldrb	r3, [r7, #14]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005d68:	2302      	movs	r3, #2
 8005d6a:	e131      	b.n	8005fd0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005d72:	2050      	movs	r0, #80	; 0x50
 8005d74:	f005 fa16 	bl	800b1a4 <malloc>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d82:	69db      	ldr	r3, [r3, #28]
 8005d84:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d101      	bne.n	8005d90 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	e11f      	b.n	8005fd0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005d90:	2250      	movs	r2, #80	; 0x50
 8005d92:	2100      	movs	r1, #0
 8005d94:	68b8      	ldr	r0, [r7, #8]
 8005d96:	f005 fa20 	bl	800b1da <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	211a      	movs	r1, #26
 8005da0:	fb01 f303 	mul.w	r3, r1, r3
 8005da4:	4413      	add	r3, r2
 8005da6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	b25b      	sxtb	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	da15      	bge.n	8005dde <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005db2:	7bfb      	ldrb	r3, [r7, #15]
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	211a      	movs	r1, #26
 8005db8:	fb01 f303 	mul.w	r3, r1, r3
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005dc2:	781a      	ldrb	r2, [r3, #0]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	211a      	movs	r1, #26
 8005dce:	fb01 f303 	mul.w	r3, r1, r3
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005dd8:	881a      	ldrh	r2, [r3, #0]
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	785b      	ldrb	r3, [r3, #1]
 8005de2:	4619      	mov	r1, r3
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f002 f894 	bl	8007f12 <USBH_AllocPipe>
 8005dea:	4603      	mov	r3, r0
 8005dec:	461a      	mov	r2, r3
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	7819      	ldrb	r1, [r3, #0]
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	7858      	ldrb	r0, [r3, #1]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	8952      	ldrh	r2, [r2, #10]
 8005e0a:	9202      	str	r2, [sp, #8]
 8005e0c:	2203      	movs	r2, #3
 8005e0e:	9201      	str	r2, [sp, #4]
 8005e10:	9300      	str	r3, [sp, #0]
 8005e12:	4623      	mov	r3, r4
 8005e14:	4602      	mov	r2, r0
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f002 f84c 	bl	8007eb4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	2200      	movs	r2, #0
 8005e22:	4619      	mov	r1, r3
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f005 f90d 	bl	800b044 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	210a      	movs	r1, #10
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 fc3f 	bl	80066b4 <USBH_FindInterface>
 8005e36:	4603      	mov	r3, r0
 8005e38:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005e3a:	7bfb      	ldrb	r3, [r7, #15]
 8005e3c:	2bff      	cmp	r3, #255	; 0xff
 8005e3e:	d002      	beq.n	8005e46 <USBH_CDC_InterfaceInit+0x11a>
 8005e40:	7bfb      	ldrb	r3, [r7, #15]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d901      	bls.n	8005e4a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005e46:	2302      	movs	r3, #2
 8005e48:	e0c2      	b.n	8005fd0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005e4a:	7bfb      	ldrb	r3, [r7, #15]
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	211a      	movs	r1, #26
 8005e50:	fb01 f303 	mul.w	r3, r1, r3
 8005e54:	4413      	add	r3, r2
 8005e56:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	b25b      	sxtb	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	da16      	bge.n	8005e90 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005e62:	7bfb      	ldrb	r3, [r7, #15]
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	211a      	movs	r1, #26
 8005e68:	fb01 f303 	mul.w	r3, r1, r3
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e72:	781a      	ldrb	r2, [r3, #0]
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	211a      	movs	r1, #26
 8005e7e:	fb01 f303 	mul.w	r3, r1, r3
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005e88:	881a      	ldrh	r2, [r3, #0]
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	835a      	strh	r2, [r3, #26]
 8005e8e:	e015      	b.n	8005ebc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005e90:	7bfb      	ldrb	r3, [r7, #15]
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	211a      	movs	r1, #26
 8005e96:	fb01 f303 	mul.w	r3, r1, r3
 8005e9a:	4413      	add	r3, r2
 8005e9c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ea0:	781a      	ldrb	r2, [r3, #0]
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005ea6:	7bfb      	ldrb	r3, [r7, #15]
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	211a      	movs	r1, #26
 8005eac:	fb01 f303 	mul.w	r3, r1, r3
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005eb6:	881a      	ldrh	r2, [r3, #0]
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005ebc:	7bfb      	ldrb	r3, [r7, #15]
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	211a      	movs	r1, #26
 8005ec2:	fb01 f303 	mul.w	r3, r1, r3
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	b25b      	sxtb	r3, r3
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	da16      	bge.n	8005f02 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005ed4:	7bfb      	ldrb	r3, [r7, #15]
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	211a      	movs	r1, #26
 8005eda:	fb01 f303 	mul.w	r3, r1, r3
 8005ede:	4413      	add	r3, r2
 8005ee0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005ee4:	781a      	ldrb	r2, [r3, #0]
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005eea:	7bfb      	ldrb	r3, [r7, #15]
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	211a      	movs	r1, #26
 8005ef0:	fb01 f303 	mul.w	r3, r1, r3
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005efa:	881a      	ldrh	r2, [r3, #0]
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	835a      	strh	r2, [r3, #26]
 8005f00:	e015      	b.n	8005f2e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005f02:	7bfb      	ldrb	r3, [r7, #15]
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	211a      	movs	r1, #26
 8005f08:	fb01 f303 	mul.w	r3, r1, r3
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005f12:	781a      	ldrb	r2, [r3, #0]
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005f18:	7bfb      	ldrb	r3, [r7, #15]
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	211a      	movs	r1, #26
 8005f1e:	fb01 f303 	mul.w	r3, r1, r3
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005f28:	881a      	ldrh	r2, [r3, #0]
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	7b9b      	ldrb	r3, [r3, #14]
 8005f32:	4619      	mov	r1, r3
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f001 ffec 	bl	8007f12 <USBH_AllocPipe>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	7bdb      	ldrb	r3, [r3, #15]
 8005f46:	4619      	mov	r1, r3
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f001 ffe2 	bl	8007f12 <USBH_AllocPipe>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	461a      	mov	r2, r3
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	7b59      	ldrb	r1, [r3, #13]
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	7b98      	ldrb	r0, [r3, #14]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	8b12      	ldrh	r2, [r2, #24]
 8005f6e:	9202      	str	r2, [sp, #8]
 8005f70:	2202      	movs	r2, #2
 8005f72:	9201      	str	r2, [sp, #4]
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	4623      	mov	r3, r4
 8005f78:	4602      	mov	r2, r0
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f001 ff9a 	bl	8007eb4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	7b19      	ldrb	r1, [r3, #12]
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	7bd8      	ldrb	r0, [r3, #15]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	8b52      	ldrh	r2, [r2, #26]
 8005f98:	9202      	str	r2, [sp, #8]
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	9201      	str	r2, [sp, #4]
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	4623      	mov	r3, r4
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f001 ff85 	bl	8007eb4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	7b5b      	ldrb	r3, [r3, #13]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	4619      	mov	r1, r3
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f005 f842 	bl	800b044 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	7b1b      	ldrb	r3, [r3, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f005 f83b 	bl	800b044 <USBH_LL_SetToggle>

  return USBH_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3714      	adds	r7, #20
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd90      	pop	{r4, r7, pc}

08005fd8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fe6:	69db      	ldr	r3, [r3, #28]
 8005fe8:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00e      	beq.n	8006010 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f001 ff7a 	bl	8007ef2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	4619      	mov	r1, r3
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f001 ffa5 	bl	8007f54 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	7b1b      	ldrb	r3, [r3, #12]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00e      	beq.n	8006036 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	7b1b      	ldrb	r3, [r3, #12]
 800601c:	4619      	mov	r1, r3
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f001 ff67 	bl	8007ef2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	7b1b      	ldrb	r3, [r3, #12]
 8006028:	4619      	mov	r1, r3
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f001 ff92 	bl	8007f54 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2200      	movs	r2, #0
 8006034:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	7b5b      	ldrb	r3, [r3, #13]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00e      	beq.n	800605c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	7b5b      	ldrb	r3, [r3, #13]
 8006042:	4619      	mov	r1, r3
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f001 ff54 	bl	8007ef2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	7b5b      	ldrb	r3, [r3, #13]
 800604e:	4619      	mov	r1, r3
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f001 ff7f 	bl	8007f54 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006062:	69db      	ldr	r3, [r3, #28]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00b      	beq.n	8006080 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800606e:	69db      	ldr	r3, [r3, #28]
 8006070:	4618      	mov	r0, r3
 8006072:	f005 f89f 	bl	800b1b4 <free>
    phost->pActiveClass->pData = 0U;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800607c:	2200      	movs	r2, #0
 800607e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b084      	sub	sp, #16
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	3340      	adds	r3, #64	; 0x40
 80060a0:	4619      	mov	r1, r3
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f8b1 	bl	800620a <GetLineCoding>
 80060a8:	4603      	mov	r3, r0
 80060aa:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80060ac:	7afb      	ldrb	r3, [r7, #11]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d105      	bne.n	80060be <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80060b8:	2102      	movs	r1, #2
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80060be:	7afb      	ldrb	r3, [r7, #11]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80060d0:	2301      	movs	r3, #1
 80060d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80060d4:	2300      	movs	r3, #0
 80060d6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060de:	69db      	ldr	r3, [r3, #28]
 80060e0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80060e8:	2b04      	cmp	r3, #4
 80060ea:	d877      	bhi.n	80061dc <USBH_CDC_Process+0x114>
 80060ec:	a201      	add	r2, pc, #4	; (adr r2, 80060f4 <USBH_CDC_Process+0x2c>)
 80060ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f2:	bf00      	nop
 80060f4:	08006109 	.word	0x08006109
 80060f8:	0800610f 	.word	0x0800610f
 80060fc:	0800613f 	.word	0x0800613f
 8006100:	080061b3 	.word	0x080061b3
 8006104:	080061c1 	.word	0x080061c1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006108:	2300      	movs	r3, #0
 800610a:	73fb      	strb	r3, [r7, #15]
      break;
 800610c:	e06d      	b.n	80061ea <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006112:	4619      	mov	r1, r3
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 f897 	bl	8006248 <SetLineCoding>
 800611a:	4603      	mov	r3, r0
 800611c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800611e:	7bbb      	ldrb	r3, [r7, #14]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d104      	bne.n	800612e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	2202      	movs	r2, #2
 8006128:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800612c:	e058      	b.n	80061e0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800612e:	7bbb      	ldrb	r3, [r7, #14]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d055      	beq.n	80061e0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	2204      	movs	r2, #4
 8006138:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800613c:	e050      	b.n	80061e0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	3340      	adds	r3, #64	; 0x40
 8006142:	4619      	mov	r1, r3
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f860 	bl	800620a <GetLineCoding>
 800614a:	4603      	mov	r3, r0
 800614c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800614e:	7bbb      	ldrb	r3, [r7, #14]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d126      	bne.n	80061a2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006166:	791b      	ldrb	r3, [r3, #4]
 8006168:	429a      	cmp	r2, r3
 800616a:	d13b      	bne.n	80061e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006176:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006178:	429a      	cmp	r2, r3
 800617a:	d133      	bne.n	80061e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006186:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006188:	429a      	cmp	r2, r3
 800618a:	d12b      	bne.n	80061e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006194:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006196:	429a      	cmp	r2, r3
 8006198:	d124      	bne.n	80061e4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f984 	bl	80064a8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80061a0:	e020      	b.n	80061e4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80061a2:	7bbb      	ldrb	r3, [r7, #14]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d01d      	beq.n	80061e4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	2204      	movs	r2, #4
 80061ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80061b0:	e018      	b.n	80061e4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f867 	bl	8006286 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 f8f8 	bl	80063ae <CDC_ProcessReception>
      break;
 80061be:	e014      	b.n	80061ea <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80061c0:	2100      	movs	r1, #0
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f001 f953 	bl	800746e <USBH_ClrFeature>
 80061c8:	4603      	mov	r3, r0
 80061ca:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80061cc:	7bbb      	ldrb	r3, [r7, #14]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10a      	bne.n	80061e8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80061da:	e005      	b.n	80061e8 <USBH_CDC_Process+0x120>

    default:
      break;
 80061dc:	bf00      	nop
 80061de:	e004      	b.n	80061ea <USBH_CDC_Process+0x122>
      break;
 80061e0:	bf00      	nop
 80061e2:	e002      	b.n	80061ea <USBH_CDC_Process+0x122>
      break;
 80061e4:	bf00      	nop
 80061e6:	e000      	b.n	80061ea <USBH_CDC_Process+0x122>
      break;
 80061e8:	bf00      	nop

  }

  return status;
 80061ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	370c      	adds	r7, #12
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b082      	sub	sp, #8
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
 8006212:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	22a1      	movs	r2, #161	; 0xa1
 8006218:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2221      	movs	r2, #33	; 0x21
 800621e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2207      	movs	r2, #7
 8006230:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2207      	movs	r2, #7
 8006236:	4619      	mov	r1, r3
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f001 faf8 	bl	800782e <USBH_CtlReq>
 800623e:	4603      	mov	r3, r0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3708      	adds	r7, #8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2221      	movs	r2, #33	; 0x21
 8006256:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2220      	movs	r2, #32
 800625c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2207      	movs	r2, #7
 800626e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	2207      	movs	r2, #7
 8006274:	4619      	mov	r1, r3
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f001 fad9 	bl	800782e <USBH_CtlReq>
 800627c:	4603      	mov	r3, r0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3708      	adds	r7, #8
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b086      	sub	sp, #24
 800628a:	af02      	add	r7, sp, #8
 800628c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006298:	2300      	movs	r3, #0
 800629a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d002      	beq.n	80062ac <CDC_ProcessTransmission+0x26>
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d025      	beq.n	80062f6 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 80062aa:	e07c      	b.n	80063a6 <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	8b12      	ldrh	r2, [r2, #24]
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d90c      	bls.n	80062d2 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	69d9      	ldr	r1, [r3, #28]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	8b1a      	ldrh	r2, [r3, #24]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	7b58      	ldrb	r0, [r3, #13]
 80062c4:	2301      	movs	r3, #1
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	4603      	mov	r3, r0
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f001 fdaf 	bl	8007e2e <USBH_BulkSendData>
 80062d0:	e00c      	b.n	80062ec <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80062da:	b29a      	uxth	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	7b58      	ldrb	r0, [r3, #13]
 80062e0:	2301      	movs	r3, #1
 80062e2:	9300      	str	r3, [sp, #0]
 80062e4:	4603      	mov	r3, r0
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f001 fda1 	bl	8007e2e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2202      	movs	r2, #2
 80062f0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80062f4:	e057      	b.n	80063a6 <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	7b5b      	ldrb	r3, [r3, #13]
 80062fa:	4619      	mov	r1, r3
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f004 fe77 	bl	800aff0 <USBH_LL_GetURBState>
 8006302:	4603      	mov	r3, r0
 8006304:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006306:	7afb      	ldrb	r3, [r7, #11]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d136      	bne.n	800637a <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	8b12      	ldrh	r2, [r2, #24]
 8006314:	4293      	cmp	r3, r2
 8006316:	d90e      	bls.n	8006336 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	8b12      	ldrh	r2, [r2, #24]
 8006320:	1a9a      	subs	r2, r3, r2
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	8b12      	ldrh	r2, [r2, #24]
 800632e:	441a      	add	r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	61da      	str	r2, [r3, #28]
 8006334:	e002      	b.n	800633c <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006340:	2b00      	cmp	r3, #0
 8006342:	d004      	beq.n	800634e <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800634c:	e006      	b.n	800635c <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f892 	bl	8006480 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2204      	movs	r2, #4
 8006360:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006370:	2200      	movs	r2, #0
 8006372:	4619      	mov	r1, r3
 8006374:	f001 ffa2 	bl	80082bc <osMessagePut>
      break;
 8006378:	e014      	b.n	80063a4 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 800637a:	7afb      	ldrb	r3, [r7, #11]
 800637c:	2b02      	cmp	r3, #2
 800637e:	d111      	bne.n	80063a4 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2204      	movs	r2, #4
 800638c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800639c:	2200      	movs	r2, #0
 800639e:	4619      	mov	r1, r3
 80063a0:	f001 ff8c 	bl	80082bc <osMessagePut>
      break;
 80063a4:	bf00      	nop
  }
}
 80063a6:	bf00      	nop
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b086      	sub	sp, #24
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063bc:	69db      	ldr	r3, [r3, #28]
 80063be:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80063c0:	2300      	movs	r3, #0
 80063c2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80063ca:	2b03      	cmp	r3, #3
 80063cc:	d002      	beq.n	80063d4 <CDC_ProcessReception+0x26>
 80063ce:	2b04      	cmp	r3, #4
 80063d0:	d00e      	beq.n	80063f0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80063d2:	e051      	b.n	8006478 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	6a19      	ldr	r1, [r3, #32]
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	8b5a      	ldrh	r2, [r3, #26]
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	7b1b      	ldrb	r3, [r3, #12]
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f001 fd49 	bl	8007e78 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	2204      	movs	r2, #4
 80063ea:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80063ee:	e043      	b.n	8006478 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	7b1b      	ldrb	r3, [r3, #12]
 80063f4:	4619      	mov	r1, r3
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f004 fdfa 	bl	800aff0 <USBH_LL_GetURBState>
 80063fc:	4603      	mov	r3, r0
 80063fe:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006400:	7cfb      	ldrb	r3, [r7, #19]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d137      	bne.n	8006476 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	7b1b      	ldrb	r3, [r3, #12]
 800640a:	4619      	mov	r1, r3
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f004 fd5d 	bl	800aecc <USBH_LL_GetLastXferSize>
 8006412:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	429a      	cmp	r2, r3
 800641c:	d016      	beq.n	800644c <CDC_ProcessReception+0x9e>
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	8b5b      	ldrh	r3, [r3, #26]
 8006422:	461a      	mov	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	4293      	cmp	r3, r2
 8006428:	d910      	bls.n	800644c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	1ad2      	subs	r2, r2, r3
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	6a1a      	ldr	r2, [r3, #32]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	441a      	add	r2, r3
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	2203      	movs	r2, #3
 8006446:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800644a:	e006      	b.n	800645a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 f81d 	bl	8006494 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2204      	movs	r2, #4
 800645e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800646e:	2200      	movs	r2, #0
 8006470:	4619      	mov	r1, r3
 8006472:	f001 ff23 	bl	80082bc <osMessagePut>
      break;
 8006476:	bf00      	nop
  }
}
 8006478:	bf00      	nop
 800647a:	3718      	adds	r7, #24
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80064bc:	b5b0      	push	{r4, r5, r7, lr}
 80064be:	b090      	sub	sp, #64	; 0x40
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	4613      	mov	r3, r2
 80064c8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d101      	bne.n	80064d4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80064d0:	2302      	movs	r3, #2
 80064d2:	e04d      	b.n	8006570 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	79fa      	ldrb	r2, [r7, #7]
 80064d8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f000 f847 	bl	8006580 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d003      	beq.n	8006520 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8006520:	4b15      	ldr	r3, [pc, #84]	; (8006578 <USBH_Init+0xbc>)
 8006522:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8006526:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006528:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800652c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006530:	2100      	movs	r1, #0
 8006532:	4618      	mov	r0, r3
 8006534:	f001 fe98 	bl	8008268 <osMessageCreate>
 8006538:	4602      	mov	r2, r0
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8006540:	4b0e      	ldr	r3, [pc, #56]	; (800657c <USBH_Init+0xc0>)
 8006542:	f107 0414 	add.w	r4, r7, #20
 8006546:	461d      	mov	r5, r3
 8006548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800654a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800654c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006550:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8006554:	f107 0314 	add.w	r3, r7, #20
 8006558:	68f9      	ldr	r1, [r7, #12]
 800655a:	4618      	mov	r0, r3
 800655c:	f001 fd6d 	bl	800803a <osThreadCreate>
 8006560:	4602      	mov	r2, r0
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f004 fbfd 	bl	800ad68 <USBH_LL_Init>

  return USBH_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3740      	adds	r7, #64	; 0x40
 8006574:	46bd      	mov	sp, r7
 8006576:	bdb0      	pop	{r4, r5, r7, pc}
 8006578:	0800b3fc 	.word	0x0800b3fc
 800657c:	0800b418 	.word	0x0800b418

08006580 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006588:	2300      	movs	r3, #0
 800658a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800658c:	2300      	movs	r3, #0
 800658e:	60fb      	str	r3, [r7, #12]
 8006590:	e009      	b.n	80065a6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	33e0      	adds	r3, #224	; 0xe0
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4413      	add	r3, r2
 800659c:	2200      	movs	r2, #0
 800659e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	3301      	adds	r3, #1
 80065a4:	60fb      	str	r3, [r7, #12]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2b0e      	cmp	r3, #14
 80065aa:	d9f2      	bls.n	8006592 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80065ac:	2300      	movs	r3, #0
 80065ae:	60fb      	str	r3, [r7, #12]
 80065b0:	e009      	b.n	80065c6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	4413      	add	r3, r2
 80065b8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80065bc:	2200      	movs	r2, #0
 80065be:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	3301      	adds	r3, #1
 80065c4:	60fb      	str	r3, [r7, #12]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065cc:	d3f1      	bcc.n	80065b2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2201      	movs	r2, #1
 80065de:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2240      	movs	r2, #64	; 0x40
 80065f2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3714      	adds	r7, #20
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006632:	2300      	movs	r3, #0
 8006634:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d016      	beq.n	800666a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10e      	bne.n	8006664 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800664c:	1c59      	adds	r1, r3, #1
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	33de      	adds	r3, #222	; 0xde
 8006658:	6839      	ldr	r1, [r7, #0]
 800665a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800665e:	2300      	movs	r3, #0
 8006660:	73fb      	strb	r3, [r7, #15]
 8006662:	e004      	b.n	800666e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006664:	2302      	movs	r3, #2
 8006666:	73fb      	strb	r3, [r7, #15]
 8006668:	e001      	b.n	800666e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800666a:	2302      	movs	r3, #2
 800666c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800666e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006670:	4618      	mov	r0, r3
 8006672:	3714      	adds	r7, #20
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	460b      	mov	r3, r1
 8006686:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006688:	2300      	movs	r3, #0
 800668a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006692:	78fa      	ldrb	r2, [r7, #3]
 8006694:	429a      	cmp	r2, r3
 8006696:	d204      	bcs.n	80066a2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	78fa      	ldrb	r2, [r7, #3]
 800669c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80066a0:	e001      	b.n	80066a6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80066a2:	2302      	movs	r3, #2
 80066a4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80066a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3714      	adds	r7, #20
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b087      	sub	sp, #28
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	4608      	mov	r0, r1
 80066be:	4611      	mov	r1, r2
 80066c0:	461a      	mov	r2, r3
 80066c2:	4603      	mov	r3, r0
 80066c4:	70fb      	strb	r3, [r7, #3]
 80066c6:	460b      	mov	r3, r1
 80066c8:	70bb      	strb	r3, [r7, #2]
 80066ca:	4613      	mov	r3, r2
 80066cc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80066ce:	2300      	movs	r3, #0
 80066d0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80066d2:	2300      	movs	r3, #0
 80066d4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80066dc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80066de:	e025      	b.n	800672c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80066e0:	7dfb      	ldrb	r3, [r7, #23]
 80066e2:	221a      	movs	r2, #26
 80066e4:	fb02 f303 	mul.w	r3, r2, r3
 80066e8:	3308      	adds	r3, #8
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	4413      	add	r3, r2
 80066ee:	3302      	adds	r3, #2
 80066f0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	795b      	ldrb	r3, [r3, #5]
 80066f6:	78fa      	ldrb	r2, [r7, #3]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d002      	beq.n	8006702 <USBH_FindInterface+0x4e>
 80066fc:	78fb      	ldrb	r3, [r7, #3]
 80066fe:	2bff      	cmp	r3, #255	; 0xff
 8006700:	d111      	bne.n	8006726 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006706:	78ba      	ldrb	r2, [r7, #2]
 8006708:	429a      	cmp	r2, r3
 800670a:	d002      	beq.n	8006712 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800670c:	78bb      	ldrb	r3, [r7, #2]
 800670e:	2bff      	cmp	r3, #255	; 0xff
 8006710:	d109      	bne.n	8006726 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006716:	787a      	ldrb	r2, [r7, #1]
 8006718:	429a      	cmp	r2, r3
 800671a:	d002      	beq.n	8006722 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800671c:	787b      	ldrb	r3, [r7, #1]
 800671e:	2bff      	cmp	r3, #255	; 0xff
 8006720:	d101      	bne.n	8006726 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006722:	7dfb      	ldrb	r3, [r7, #23]
 8006724:	e006      	b.n	8006734 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006726:	7dfb      	ldrb	r3, [r7, #23]
 8006728:	3301      	adds	r3, #1
 800672a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800672c:	7dfb      	ldrb	r3, [r7, #23]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d9d6      	bls.n	80066e0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006732:	23ff      	movs	r3, #255	; 0xff
}
 8006734:	4618      	mov	r0, r3
 8006736:	371c      	adds	r7, #28
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f004 fb49 	bl	800ade0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800674e:	2101      	movs	r1, #1
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f004 fc60 	bl	800b016 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3708      	adds	r7, #8
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b088      	sub	sp, #32
 8006764:	af04      	add	r7, sp, #16
 8006766:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006768:	2302      	movs	r3, #2
 800676a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800676c:	2300      	movs	r3, #0
 800676e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006776:	b2db      	uxtb	r3, r3
 8006778:	2b01      	cmp	r3, #1
 800677a:	d102      	bne.n	8006782 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2203      	movs	r2, #3
 8006780:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b0b      	cmp	r3, #11
 800678a:	f200 823c 	bhi.w	8006c06 <USBH_Process+0x4a6>
 800678e:	a201      	add	r2, pc, #4	; (adr r2, 8006794 <USBH_Process+0x34>)
 8006790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006794:	080067c5 	.word	0x080067c5
 8006798:	08006813 	.word	0x08006813
 800679c:	08006897 	.word	0x08006897
 80067a0:	08006b85 	.word	0x08006b85
 80067a4:	08006c07 	.word	0x08006c07
 80067a8:	08006957 	.word	0x08006957
 80067ac:	08006b0f 	.word	0x08006b0f
 80067b0:	080069a9 	.word	0x080069a9
 80067b4:	080069e5 	.word	0x080069e5
 80067b8:	08006a1f 	.word	0x08006a1f
 80067bc:	08006a67 	.word	0x08006a67
 80067c0:	08006b6d 	.word	0x08006b6d
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f000 821c 	beq.w	8006c0a <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80067d8:	20c8      	movs	r0, #200	; 0xc8
 80067da:	f004 fc66 	bl	800b0aa <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f004 fb59 	bl	800ae96 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006808:	2200      	movs	r2, #0
 800680a:	4619      	mov	r1, r3
 800680c:	f001 fd56 	bl	80082bc <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006810:	e1fb      	b.n	8006c0a <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006818:	2b01      	cmp	r3, #1
 800681a:	d107      	bne.n	800682c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2202      	movs	r2, #2
 8006828:	701a      	strb	r2, [r3, #0]
 800682a:	e025      	b.n	8006878 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006832:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006836:	d914      	bls.n	8006862 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800683e:	3301      	adds	r3, #1
 8006840:	b2da      	uxtb	r2, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800684e:	2b03      	cmp	r3, #3
 8006850:	d903      	bls.n	800685a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	220d      	movs	r2, #13
 8006856:	701a      	strb	r2, [r3, #0]
 8006858:	e00e      	b.n	8006878 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	701a      	strb	r2, [r3, #0]
 8006860:	e00a      	b.n	8006878 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006868:	f103 020a 	add.w	r2, r3, #10
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006872:	200a      	movs	r0, #10
 8006874:	f004 fc19 	bl	800b0aa <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800688c:	2200      	movs	r2, #0
 800688e:	4619      	mov	r1, r3
 8006890:	f001 fd14 	bl	80082bc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006894:	e1c0      	b.n	8006c18 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800689c:	2b00      	cmp	r3, #0
 800689e:	d005      	beq.n	80068ac <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068a6:	2104      	movs	r1, #4
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80068ac:	2064      	movs	r0, #100	; 0x64
 80068ae:	f004 fbfc 	bl	800b0aa <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f004 faca 	bl	800ae4c <USBH_LL_GetSpeed>
 80068b8:	4603      	mov	r3, r0
 80068ba:	461a      	mov	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2205      	movs	r2, #5
 80068c6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80068c8:	2100      	movs	r1, #0
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f001 fb21 	bl	8007f12 <USBH_AllocPipe>
 80068d0:	4603      	mov	r3, r0
 80068d2:	461a      	mov	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80068d8:	2180      	movs	r1, #128	; 0x80
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f001 fb19 	bl	8007f12 <USBH_AllocPipe>
 80068e0:	4603      	mov	r3, r0
 80068e2:	461a      	mov	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	7919      	ldrb	r1, [r3, #4]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80068fc:	b292      	uxth	r2, r2
 80068fe:	9202      	str	r2, [sp, #8]
 8006900:	2200      	movs	r2, #0
 8006902:	9201      	str	r2, [sp, #4]
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	4603      	mov	r3, r0
 8006908:	2280      	movs	r2, #128	; 0x80
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f001 fad2 	bl	8007eb4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	7959      	ldrb	r1, [r3, #5]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006924:	b292      	uxth	r2, r2
 8006926:	9202      	str	r2, [sp, #8]
 8006928:	2200      	movs	r2, #0
 800692a:	9201      	str	r2, [sp, #4]
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	4603      	mov	r3, r0
 8006930:	2200      	movs	r2, #0
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f001 fabe 	bl	8007eb4 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800694c:	2200      	movs	r2, #0
 800694e:	4619      	mov	r1, r3
 8006950:	f001 fcb4 	bl	80082bc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006954:	e160      	b.n	8006c18 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f964 	bl	8006c24 <USBH_HandleEnum>
 800695c:	4603      	mov	r3, r0
 800695e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006960:	7bbb      	ldrb	r3, [r7, #14]
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b00      	cmp	r3, #0
 8006966:	f040 8152 	bne.w	8006c0e <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006978:	2b01      	cmp	r3, #1
 800697a:	d103      	bne.n	8006984 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2208      	movs	r2, #8
 8006980:	701a      	strb	r2, [r3, #0]
 8006982:	e002      	b.n	800698a <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2207      	movs	r2, #7
 8006988:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2205      	movs	r2, #5
 800698e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800699e:	2200      	movs	r2, #0
 80069a0:	4619      	mov	r1, r3
 80069a2:	f001 fc8b 	bl	80082bc <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80069a6:	e132      	b.n	8006c0e <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f000 812f 	beq.w	8006c12 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069ba:	2101      	movs	r1, #1
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2208      	movs	r2, #8
 80069c4:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2205      	movs	r2, #5
 80069ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80069da:	2200      	movs	r2, #0
 80069dc:	4619      	mov	r1, r3
 80069de:	f001 fc6d 	bl	80082bc <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80069e2:	e116      	b.n	8006c12 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	4619      	mov	r1, r3
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fcf6 	bl	80073e0 <USBH_SetCfg>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d102      	bne.n	8006a00 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2209      	movs	r2, #9
 80069fe:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006a14:	2200      	movs	r2, #0
 8006a16:	4619      	mov	r1, r3
 8006a18:	f001 fc50 	bl	80082bc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006a1c:	e0fc      	b.n	8006c18 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006a24:	f003 0320 	and.w	r3, r3, #32
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00a      	beq.n	8006a42 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006a2c:	2101      	movs	r1, #1
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fcf9 	bl	8007426 <USBH_SetFeature>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d106      	bne.n	8006a48 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	220a      	movs	r2, #10
 8006a3e:	701a      	strb	r2, [r3, #0]
 8006a40:	e002      	b.n	8006a48 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	220a      	movs	r2, #10
 8006a46:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	4619      	mov	r1, r3
 8006a60:	f001 fc2c 	bl	80082bc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006a64:	e0d8      	b.n	8006c18 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d03f      	beq.n	8006af0 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006a78:	2300      	movs	r3, #0
 8006a7a:	73fb      	strb	r3, [r7, #15]
 8006a7c:	e016      	b.n	8006aac <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006a7e:	7bfa      	ldrb	r2, [r7, #15]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	32de      	adds	r2, #222	; 0xde
 8006a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a88:	791a      	ldrb	r2, [r3, #4]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d108      	bne.n	8006aa6 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006a94:	7bfa      	ldrb	r2, [r7, #15]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	32de      	adds	r2, #222	; 0xde
 8006a9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006aa4:	e005      	b.n	8006ab2 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006aa6:	7bfb      	ldrb	r3, [r7, #15]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	73fb      	strb	r3, [r7, #15]
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d0e5      	beq.n	8006a7e <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d016      	beq.n	8006aea <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	4798      	blx	r3
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d109      	bne.n	8006ae2 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2206      	movs	r2, #6
 8006ad2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ada:	2103      	movs	r1, #3
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	4798      	blx	r3
 8006ae0:	e006      	b.n	8006af0 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	220d      	movs	r2, #13
 8006ae6:	701a      	strb	r2, [r3, #0]
 8006ae8:	e002      	b.n	8006af0 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	220d      	movs	r2, #13
 8006aee:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2205      	movs	r2, #5
 8006af4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006b04:	2200      	movs	r2, #0
 8006b06:	4619      	mov	r1, r3
 8006b08:	f001 fbd8 	bl	80082bc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006b0c:	e084      	b.n	8006c18 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d017      	beq.n	8006b48 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	4798      	blx	r3
 8006b24:	4603      	mov	r3, r0
 8006b26:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006b28:	7bbb      	ldrb	r3, [r7, #14]
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d103      	bne.n	8006b38 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	220b      	movs	r2, #11
 8006b34:	701a      	strb	r2, [r3, #0]
 8006b36:	e00a      	b.n	8006b4e <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 8006b38:	7bbb      	ldrb	r3, [r7, #14]
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d106      	bne.n	8006b4e <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	220d      	movs	r2, #13
 8006b44:	701a      	strb	r2, [r3, #0]
 8006b46:	e002      	b.n	8006b4e <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	220d      	movs	r2, #13
 8006b4c:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2205      	movs	r2, #5
 8006b52:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006b62:	2200      	movs	r2, #0
 8006b64:	4619      	mov	r1, r3
 8006b66:	f001 fba9 	bl	80082bc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006b6a:	e055      	b.n	8006c18 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d04f      	beq.n	8006c16 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	4798      	blx	r3
      }
      break;
 8006b82:	e048      	b.n	8006c16 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f7ff fcf7 	bl	8006580 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d009      	beq.n	8006bb0 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d005      	beq.n	8006bc6 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bc0:	2105      	movs	r1, #5
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d107      	bne.n	8006be2 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f7ff fdb0 	bl	8006740 <USBH_Start>
 8006be0:	e002      	b.n	8006be8 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f004 f8fc 	bl	800ade0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	4619      	mov	r1, r3
 8006c00:	f001 fb5c 	bl	80082bc <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006c04:	e008      	b.n	8006c18 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 8006c06:	bf00      	nop
 8006c08:	e006      	b.n	8006c18 <USBH_Process+0x4b8>
      break;
 8006c0a:	bf00      	nop
 8006c0c:	e004      	b.n	8006c18 <USBH_Process+0x4b8>
      break;
 8006c0e:	bf00      	nop
 8006c10:	e002      	b.n	8006c18 <USBH_Process+0x4b8>
    break;
 8006c12:	bf00      	nop
 8006c14:	e000      	b.n	8006c18 <USBH_Process+0x4b8>
      break;
 8006c16:	bf00      	nop
  }
  return USBH_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop

08006c24 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b088      	sub	sp, #32
 8006c28:	af04      	add	r7, sp, #16
 8006c2a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006c30:	2301      	movs	r3, #1
 8006c32:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	785b      	ldrb	r3, [r3, #1]
 8006c38:	2b07      	cmp	r3, #7
 8006c3a:	f200 8208 	bhi.w	800704e <USBH_HandleEnum+0x42a>
 8006c3e:	a201      	add	r2, pc, #4	; (adr r2, 8006c44 <USBH_HandleEnum+0x20>)
 8006c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c44:	08006c65 	.word	0x08006c65
 8006c48:	08006d23 	.word	0x08006d23
 8006c4c:	08006d8d 	.word	0x08006d8d
 8006c50:	08006e1b 	.word	0x08006e1b
 8006c54:	08006e85 	.word	0x08006e85
 8006c58:	08006ef5 	.word	0x08006ef5
 8006c5c:	08006f91 	.word	0x08006f91
 8006c60:	0800700f 	.word	0x0800700f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006c64:	2108      	movs	r1, #8
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 faea 	bl	8007240 <USBH_Get_DevDesc>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c70:	7bbb      	ldrb	r3, [r7, #14]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d130      	bne.n	8006cd8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	7919      	ldrb	r1, [r3, #4]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006c9a:	b292      	uxth	r2, r2
 8006c9c:	9202      	str	r2, [sp, #8]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	9201      	str	r2, [sp, #4]
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2280      	movs	r2, #128	; 0x80
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f001 f903 	bl	8007eb4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	7959      	ldrb	r1, [r3, #5]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006cc2:	b292      	uxth	r2, r2
 8006cc4:	9202      	str	r2, [sp, #8]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	9201      	str	r2, [sp, #4]
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2200      	movs	r2, #0
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f001 f8ef 	bl	8007eb4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006cd6:	e1bc      	b.n	8007052 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006cd8:	7bbb      	ldrb	r3, [r7, #14]
 8006cda:	2b03      	cmp	r3, #3
 8006cdc:	f040 81b9 	bne.w	8007052 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	b2da      	uxtb	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006cf6:	2b03      	cmp	r3, #3
 8006cf8:	d903      	bls.n	8006d02 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	220d      	movs	r2, #13
 8006cfe:	701a      	strb	r2, [r3, #0]
      break;
 8006d00:	e1a7      	b.n	8007052 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	795b      	ldrb	r3, [r3, #5]
 8006d06:	4619      	mov	r1, r3
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f001 f923 	bl	8007f54 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	791b      	ldrb	r3, [r3, #4]
 8006d12:	4619      	mov	r1, r3
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f001 f91d 	bl	8007f54 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	701a      	strb	r2, [r3, #0]
      break;
 8006d20:	e197      	b.n	8007052 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006d22:	2112      	movs	r1, #18
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fa8b 	bl	8007240 <USBH_Get_DevDesc>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d2e:	7bbb      	ldrb	r3, [r7, #14]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d103      	bne.n	8006d3c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2202      	movs	r2, #2
 8006d38:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006d3a:	e18c      	b.n	8007056 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d3c:	7bbb      	ldrb	r3, [r7, #14]
 8006d3e:	2b03      	cmp	r3, #3
 8006d40:	f040 8189 	bne.w	8007056 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	b2da      	uxtb	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d5a:	2b03      	cmp	r3, #3
 8006d5c:	d903      	bls.n	8006d66 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	220d      	movs	r2, #13
 8006d62:	701a      	strb	r2, [r3, #0]
      break;
 8006d64:	e177      	b.n	8007056 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	795b      	ldrb	r3, [r3, #5]
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f001 f8f1 	bl	8007f54 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	791b      	ldrb	r3, [r3, #4]
 8006d76:	4619      	mov	r1, r3
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f001 f8eb 	bl	8007f54 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	701a      	strb	r2, [r3, #0]
      break;
 8006d8a:	e164      	b.n	8007056 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006d8c:	2101      	movs	r1, #1
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fb02 	bl	8007398 <USBH_SetAddress>
 8006d94:	4603      	mov	r3, r0
 8006d96:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d98:	7bbb      	ldrb	r3, [r7, #14]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d132      	bne.n	8006e04 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006d9e:	2002      	movs	r0, #2
 8006da0:	f004 f983 	bl	800b0aa <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2203      	movs	r2, #3
 8006db0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	7919      	ldrb	r1, [r3, #4]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006dc6:	b292      	uxth	r2, r2
 8006dc8:	9202      	str	r2, [sp, #8]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	9201      	str	r2, [sp, #4]
 8006dce:	9300      	str	r3, [sp, #0]
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2280      	movs	r2, #128	; 0x80
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f001 f86d 	bl	8007eb4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	7959      	ldrb	r1, [r3, #5]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006dee:	b292      	uxth	r2, r2
 8006df0:	9202      	str	r2, [sp, #8]
 8006df2:	2200      	movs	r2, #0
 8006df4:	9201      	str	r2, [sp, #4]
 8006df6:	9300      	str	r3, [sp, #0]
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f001 f859 	bl	8007eb4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006e02:	e12a      	b.n	800705a <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e04:	7bbb      	ldrb	r3, [r7, #14]
 8006e06:	2b03      	cmp	r3, #3
 8006e08:	f040 8127 	bne.w	800705a <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	220d      	movs	r2, #13
 8006e10:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	705a      	strb	r2, [r3, #1]
      break;
 8006e18:	e11f      	b.n	800705a <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006e1a:	2109      	movs	r1, #9
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 fa37 	bl	8007290 <USBH_Get_CfgDesc>
 8006e22:	4603      	mov	r3, r0
 8006e24:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e26:	7bbb      	ldrb	r3, [r7, #14]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d103      	bne.n	8006e34 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2204      	movs	r2, #4
 8006e30:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006e32:	e114      	b.n	800705e <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e34:	7bbb      	ldrb	r3, [r7, #14]
 8006e36:	2b03      	cmp	r3, #3
 8006e38:	f040 8111 	bne.w	800705e <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e42:	3301      	adds	r3, #1
 8006e44:	b2da      	uxtb	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e52:	2b03      	cmp	r3, #3
 8006e54:	d903      	bls.n	8006e5e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	220d      	movs	r2, #13
 8006e5a:	701a      	strb	r2, [r3, #0]
      break;
 8006e5c:	e0ff      	b.n	800705e <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	795b      	ldrb	r3, [r3, #5]
 8006e62:	4619      	mov	r1, r3
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f001 f875 	bl	8007f54 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	791b      	ldrb	r3, [r3, #4]
 8006e6e:	4619      	mov	r1, r3
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f001 f86f 	bl	8007f54 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	701a      	strb	r2, [r3, #0]
      break;
 8006e82:	e0ec      	b.n	800705e <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 f9ff 	bl	8007290 <USBH_Get_CfgDesc>
 8006e92:	4603      	mov	r3, r0
 8006e94:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e96:	7bbb      	ldrb	r3, [r7, #14]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d103      	bne.n	8006ea4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2205      	movs	r2, #5
 8006ea0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006ea2:	e0de      	b.n	8007062 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ea4:	7bbb      	ldrb	r3, [r7, #14]
 8006ea6:	2b03      	cmp	r3, #3
 8006ea8:	f040 80db 	bne.w	8007062 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	b2da      	uxtb	r2, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ec2:	2b03      	cmp	r3, #3
 8006ec4:	d903      	bls.n	8006ece <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	220d      	movs	r2, #13
 8006eca:	701a      	strb	r2, [r3, #0]
      break;
 8006ecc:	e0c9      	b.n	8007062 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	795b      	ldrb	r3, [r3, #5]
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f001 f83d 	bl	8007f54 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	791b      	ldrb	r3, [r3, #4]
 8006ede:	4619      	mov	r1, r3
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f001 f837 	bl	8007f54 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	701a      	strb	r2, [r3, #0]
      break;
 8006ef2:	e0b6      	b.n	8007062 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d036      	beq.n	8006f6c <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006f0a:	23ff      	movs	r3, #255	; 0xff
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f9e3 	bl	80072d8 <USBH_Get_StringDesc>
 8006f12:	4603      	mov	r3, r0
 8006f14:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006f16:	7bbb      	ldrb	r3, [r7, #14]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d111      	bne.n	8006f40 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2206      	movs	r2, #6
 8006f20:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2205      	movs	r2, #5
 8006f26:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006f36:	2200      	movs	r2, #0
 8006f38:	4619      	mov	r1, r3
 8006f3a:	f001 f9bf 	bl	80082bc <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006f3e:	e092      	b.n	8007066 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f40:	7bbb      	ldrb	r3, [r7, #14]
 8006f42:	2b03      	cmp	r3, #3
 8006f44:	f040 808f 	bne.w	8007066 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2206      	movs	r2, #6
 8006f4c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2205      	movs	r2, #5
 8006f52:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006f62:	2200      	movs	r2, #0
 8006f64:	4619      	mov	r1, r3
 8006f66:	f001 f9a9 	bl	80082bc <osMessagePut>
      break;
 8006f6a:	e07c      	b.n	8007066 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2206      	movs	r2, #6
 8006f70:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2205      	movs	r2, #5
 8006f76:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006f86:	2200      	movs	r2, #0
 8006f88:	4619      	mov	r1, r3
 8006f8a:	f001 f997 	bl	80082bc <osMessagePut>
      break;
 8006f8e:	e06a      	b.n	8007066 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d027      	beq.n	8006fea <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006fa6:	23ff      	movs	r3, #255	; 0xff
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 f995 	bl	80072d8 <USBH_Get_StringDesc>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006fb2:	7bbb      	ldrb	r3, [r7, #14]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d103      	bne.n	8006fc0 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2207      	movs	r2, #7
 8006fbc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006fbe:	e054      	b.n	800706a <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006fc0:	7bbb      	ldrb	r3, [r7, #14]
 8006fc2:	2b03      	cmp	r3, #3
 8006fc4:	d151      	bne.n	800706a <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2207      	movs	r2, #7
 8006fca:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2205      	movs	r2, #5
 8006fd0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	f001 f96a 	bl	80082bc <osMessagePut>
      break;
 8006fe8:	e03f      	b.n	800706a <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2207      	movs	r2, #7
 8006fee:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2205      	movs	r2, #5
 8006ff4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007004:	2200      	movs	r2, #0
 8007006:	4619      	mov	r1, r3
 8007008:	f001 f958 	bl	80082bc <osMessagePut>
      break;
 800700c:	e02d      	b.n	800706a <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007014:	2b00      	cmp	r3, #0
 8007016:	d017      	beq.n	8007048 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007024:	23ff      	movs	r3, #255	; 0xff
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f956 	bl	80072d8 <USBH_Get_StringDesc>
 800702c:	4603      	mov	r3, r0
 800702e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007030:	7bbb      	ldrb	r3, [r7, #14]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d102      	bne.n	800703c <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007036:	2300      	movs	r3, #0
 8007038:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800703a:	e018      	b.n	800706e <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800703c:	7bbb      	ldrb	r3, [r7, #14]
 800703e:	2b03      	cmp	r3, #3
 8007040:	d115      	bne.n	800706e <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8007042:	2300      	movs	r3, #0
 8007044:	73fb      	strb	r3, [r7, #15]
      break;
 8007046:	e012      	b.n	800706e <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8007048:	2300      	movs	r3, #0
 800704a:	73fb      	strb	r3, [r7, #15]
      break;
 800704c:	e00f      	b.n	800706e <USBH_HandleEnum+0x44a>

    default:
      break;
 800704e:	bf00      	nop
 8007050:	e00e      	b.n	8007070 <USBH_HandleEnum+0x44c>
      break;
 8007052:	bf00      	nop
 8007054:	e00c      	b.n	8007070 <USBH_HandleEnum+0x44c>
      break;
 8007056:	bf00      	nop
 8007058:	e00a      	b.n	8007070 <USBH_HandleEnum+0x44c>
      break;
 800705a:	bf00      	nop
 800705c:	e008      	b.n	8007070 <USBH_HandleEnum+0x44c>
      break;
 800705e:	bf00      	nop
 8007060:	e006      	b.n	8007070 <USBH_HandleEnum+0x44c>
      break;
 8007062:	bf00      	nop
 8007064:	e004      	b.n	8007070 <USBH_HandleEnum+0x44c>
      break;
 8007066:	bf00      	nop
 8007068:	e002      	b.n	8007070 <USBH_HandleEnum+0x44c>
      break;
 800706a:	bf00      	nop
 800706c:	e000      	b.n	8007070 <USBH_HandleEnum+0x44c>
      break;
 800706e:	bf00      	nop
  }
  return Status;
 8007070:	7bfb      	ldrb	r3, [r7, #15]
}
 8007072:	4618      	mov	r0, r3
 8007074:	3710      	adds	r7, #16
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop

0800707c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	683a      	ldr	r2, [r7, #0]
 800708a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800708e:	bf00      	nop
 8007090:	370c      	adds	r7, #12
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr

0800709a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b082      	sub	sp, #8
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80070a8:	1c5a      	adds	r2, r3, #1
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 f804 	bl	80070be <USBH_HandleSof>
}
 80070b6:	bf00      	nop
 80070b8:	3708      	adds	r7, #8
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b082      	sub	sp, #8
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b0b      	cmp	r3, #11
 80070ce:	d10a      	bne.n	80070e6 <USBH_HandleSof+0x28>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d005      	beq.n	80070e6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070e0:	699b      	ldr	r3, [r3, #24]
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	4798      	blx	r3
  }
}
 80070e6:	bf00      	nop
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b082      	sub	sp, #8
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2201      	movs	r2, #1
 8007102:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007112:	2200      	movs	r2, #0
 8007114:	4619      	mov	r1, r3
 8007116:	f001 f8d1 	bl	80082bc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800711a:	bf00      	nop
}
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007122:	b480      	push	{r7}
 8007124:	b083      	sub	sp, #12
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007132:	bf00      	nop
}
 8007134:	370c      	adds	r7, #12
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr

0800713e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b082      	sub	sp, #8
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2201      	movs	r2, #1
 800714a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2201      	movs	r2, #1
 8007162:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007172:	2200      	movs	r2, #0
 8007174:	4619      	mov	r1, r3
 8007176:	f001 f8a1 	bl	80082bc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3708      	adds	r7, #8
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b082      	sub	sp, #8
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f003 fe36 	bl	800ae16 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	791b      	ldrb	r3, [r3, #4]
 80071ae:	4619      	mov	r1, r3
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 fecf 	bl	8007f54 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	795b      	ldrb	r3, [r3, #5]
 80071ba:	4619      	mov	r1, r3
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 fec9 	bl	8007f54 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80071d6:	2200      	movs	r2, #0
 80071d8:	4619      	mov	r1, r3
 80071da:	f001 f86f 	bl	80082bc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b086      	sub	sp, #24
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 80071f6:	f107 030c 	add.w	r3, r7, #12
 80071fa:	f04f 32ff 	mov.w	r2, #4294967295
 80071fe:	4618      	mov	r0, r3
 8007200:	f001 f89c 	bl	800833c <osMessageGet>
    if (event.status == osEventMessage)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2b10      	cmp	r3, #16
 8007208:	d1f2      	bne.n	80071f0 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f7ff faa8 	bl	8006760 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8007210:	e7ee      	b.n	80071f0 <USBH_Process_OS+0x8>

08007212 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b082      	sub	sp, #8
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2201      	movs	r2, #1
 800721e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800722e:	2200      	movs	r2, #0
 8007230:	4619      	mov	r1, r3
 8007232:	f001 f843 	bl	80082bc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3708      	adds	r7, #8
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af02      	add	r7, sp, #8
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	460b      	mov	r3, r1
 800724a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007252:	78fb      	ldrb	r3, [r7, #3]
 8007254:	b29b      	uxth	r3, r3
 8007256:	9300      	str	r3, [sp, #0]
 8007258:	4613      	mov	r3, r2
 800725a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800725e:	2100      	movs	r1, #0
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f864 	bl	800732e <USBH_GetDescriptor>
 8007266:	4603      	mov	r3, r0
 8007268:	73fb      	strb	r3, [r7, #15]
 800726a:	7bfb      	ldrb	r3, [r7, #15]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10a      	bne.n	8007286 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800727c:	78fa      	ldrb	r2, [r7, #3]
 800727e:	b292      	uxth	r2, r2
 8007280:	4619      	mov	r1, r3
 8007282:	f000 f918 	bl	80074b6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007286:	7bfb      	ldrb	r3, [r7, #15]
}
 8007288:	4618      	mov	r0, r3
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007290:	b580      	push	{r7, lr}
 8007292:	b086      	sub	sp, #24
 8007294:	af02      	add	r7, sp, #8
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	460b      	mov	r3, r1
 800729a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	331c      	adds	r3, #28
 80072a0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80072a2:	887b      	ldrh	r3, [r7, #2]
 80072a4:	9300      	str	r3, [sp, #0]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072ac:	2100      	movs	r1, #0
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 f83d 	bl	800732e <USBH_GetDescriptor>
 80072b4:	4603      	mov	r3, r0
 80072b6:	72fb      	strb	r3, [r7, #11]
 80072b8:	7afb      	ldrb	r3, [r7, #11]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d107      	bne.n	80072ce <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80072c4:	887a      	ldrh	r2, [r7, #2]
 80072c6:	68f9      	ldr	r1, [r7, #12]
 80072c8:	4618      	mov	r0, r3
 80072ca:	f000 f964 	bl	8007596 <USBH_ParseCfgDesc>
  }

  return status;
 80072ce:	7afb      	ldrb	r3, [r7, #11]
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3710      	adds	r7, #16
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b088      	sub	sp, #32
 80072dc:	af02      	add	r7, sp, #8
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	607a      	str	r2, [r7, #4]
 80072e2:	461a      	mov	r2, r3
 80072e4:	460b      	mov	r3, r1
 80072e6:	72fb      	strb	r3, [r7, #11]
 80072e8:	4613      	mov	r3, r2
 80072ea:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80072ec:	7afb      	ldrb	r3, [r7, #11]
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80072f4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80072fc:	893b      	ldrh	r3, [r7, #8]
 80072fe:	9300      	str	r3, [sp, #0]
 8007300:	460b      	mov	r3, r1
 8007302:	2100      	movs	r1, #0
 8007304:	68f8      	ldr	r0, [r7, #12]
 8007306:	f000 f812 	bl	800732e <USBH_GetDescriptor>
 800730a:	4603      	mov	r3, r0
 800730c:	75fb      	strb	r3, [r7, #23]
 800730e:	7dfb      	ldrb	r3, [r7, #23]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d107      	bne.n	8007324 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800731a:	893a      	ldrh	r2, [r7, #8]
 800731c:	6879      	ldr	r1, [r7, #4]
 800731e:	4618      	mov	r0, r3
 8007320:	f000 fa37 	bl	8007792 <USBH_ParseStringDesc>
  }

  return status;
 8007324:	7dfb      	ldrb	r3, [r7, #23]
}
 8007326:	4618      	mov	r0, r3
 8007328:	3718      	adds	r7, #24
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b084      	sub	sp, #16
 8007332:	af00      	add	r7, sp, #0
 8007334:	60f8      	str	r0, [r7, #12]
 8007336:	607b      	str	r3, [r7, #4]
 8007338:	460b      	mov	r3, r1
 800733a:	72fb      	strb	r3, [r7, #11]
 800733c:	4613      	mov	r3, r2
 800733e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	789b      	ldrb	r3, [r3, #2]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d11c      	bne.n	8007382 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007348:	7afb      	ldrb	r3, [r7, #11]
 800734a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800734e:	b2da      	uxtb	r2, r3
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2206      	movs	r2, #6
 8007358:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	893a      	ldrh	r2, [r7, #8]
 800735e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007360:	893b      	ldrh	r3, [r7, #8]
 8007362:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007366:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800736a:	d104      	bne.n	8007376 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f240 4209 	movw	r2, #1033	; 0x409
 8007372:	829a      	strh	r2, [r3, #20]
 8007374:	e002      	b.n	800737c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	8b3a      	ldrh	r2, [r7, #24]
 8007380:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007382:	8b3b      	ldrh	r3, [r7, #24]
 8007384:	461a      	mov	r2, r3
 8007386:	6879      	ldr	r1, [r7, #4]
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f000 fa50 	bl	800782e <USBH_CtlReq>
 800738e:	4603      	mov	r3, r0
}
 8007390:	4618      	mov	r0, r3
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	460b      	mov	r3, r1
 80073a2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	789b      	ldrb	r3, [r3, #2]
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d10f      	bne.n	80073cc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2205      	movs	r2, #5
 80073b6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80073b8:	78fb      	ldrb	r3, [r7, #3]
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80073cc:	2200      	movs	r2, #0
 80073ce:	2100      	movs	r1, #0
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 fa2c 	bl	800782e <USBH_CtlReq>
 80073d6:	4603      	mov	r3, r0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3708      	adds	r7, #8
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	460b      	mov	r3, r1
 80073ea:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	789b      	ldrb	r3, [r3, #2]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d10e      	bne.n	8007412 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2209      	movs	r2, #9
 80073fe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	887a      	ldrh	r2, [r7, #2]
 8007404:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007412:	2200      	movs	r2, #0
 8007414:	2100      	movs	r1, #0
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fa09 	bl	800782e <USBH_CtlReq>
 800741c:	4603      	mov	r3, r0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3708      	adds	r7, #8
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b082      	sub	sp, #8
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
 800742e:	460b      	mov	r3, r1
 8007430:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	789b      	ldrb	r3, [r3, #2]
 8007436:	2b01      	cmp	r3, #1
 8007438:	d10f      	bne.n	800745a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2203      	movs	r2, #3
 8007444:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007446:	78fb      	ldrb	r3, [r7, #3]
 8007448:	b29a      	uxth	r2, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800745a:	2200      	movs	r2, #0
 800745c:	2100      	movs	r1, #0
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f9e5 	bl	800782e <USBH_CtlReq>
 8007464:	4603      	mov	r3, r0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3708      	adds	r7, #8
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b082      	sub	sp, #8
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	460b      	mov	r3, r1
 8007478:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	789b      	ldrb	r3, [r3, #2]
 800747e:	2b01      	cmp	r3, #1
 8007480:	d10f      	bne.n	80074a2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2202      	movs	r2, #2
 8007486:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007494:	78fb      	ldrb	r3, [r7, #3]
 8007496:	b29a      	uxth	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80074a2:	2200      	movs	r2, #0
 80074a4:	2100      	movs	r1, #0
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f9c1 	bl	800782e <USBH_CtlReq>
 80074ac:	4603      	mov	r3, r0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3708      	adds	r7, #8
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80074b6:	b480      	push	{r7}
 80074b8:	b085      	sub	sp, #20
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	60f8      	str	r0, [r7, #12]
 80074be:	60b9      	str	r1, [r7, #8]
 80074c0:	4613      	mov	r3, r2
 80074c2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	781a      	ldrb	r2, [r3, #0]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	785a      	ldrb	r2, [r3, #1]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	3302      	adds	r3, #2
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	b29a      	uxth	r2, r3
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	3303      	adds	r3, #3
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	021b      	lsls	r3, r3, #8
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	4313      	orrs	r3, r2
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	791a      	ldrb	r2, [r3, #4]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	795a      	ldrb	r2, [r3, #5]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	799a      	ldrb	r2, [r3, #6]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	79da      	ldrb	r2, [r3, #7]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007510:	88fb      	ldrh	r3, [r7, #6]
 8007512:	2b08      	cmp	r3, #8
 8007514:	d939      	bls.n	800758a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	3308      	adds	r3, #8
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	b29a      	uxth	r2, r3
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	3309      	adds	r3, #9
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	b29b      	uxth	r3, r3
 8007526:	021b      	lsls	r3, r3, #8
 8007528:	b29b      	uxth	r3, r3
 800752a:	4313      	orrs	r3, r2
 800752c:	b29a      	uxth	r2, r3
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	330a      	adds	r3, #10
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	b29a      	uxth	r2, r3
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	330b      	adds	r3, #11
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	b29b      	uxth	r3, r3
 8007542:	021b      	lsls	r3, r3, #8
 8007544:	b29b      	uxth	r3, r3
 8007546:	4313      	orrs	r3, r2
 8007548:	b29a      	uxth	r2, r3
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	330c      	adds	r3, #12
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	b29a      	uxth	r2, r3
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	330d      	adds	r3, #13
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	b29b      	uxth	r3, r3
 800755e:	021b      	lsls	r3, r3, #8
 8007560:	b29b      	uxth	r3, r3
 8007562:	4313      	orrs	r3, r2
 8007564:	b29a      	uxth	r2, r3
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	7b9a      	ldrb	r2, [r3, #14]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	7bda      	ldrb	r2, [r3, #15]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	7c1a      	ldrb	r2, [r3, #16]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	7c5a      	ldrb	r2, [r3, #17]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	745a      	strb	r2, [r3, #17]
  }
}
 800758a:	bf00      	nop
 800758c:	3714      	adds	r7, #20
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr

08007596 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b08a      	sub	sp, #40	; 0x28
 800759a:	af00      	add	r7, sp, #0
 800759c:	60f8      	str	r0, [r7, #12]
 800759e:	60b9      	str	r1, [r7, #8]
 80075a0:	4613      	mov	r3, r2
 80075a2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80075a8:	2300      	movs	r3, #0
 80075aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80075ae:	2300      	movs	r3, #0
 80075b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	781a      	ldrb	r2, [r3, #0]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	785a      	ldrb	r2, [r3, #1]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	3302      	adds	r3, #2
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	3303      	adds	r3, #3
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	021b      	lsls	r3, r3, #8
 80075da:	b29b      	uxth	r3, r3
 80075dc:	4313      	orrs	r3, r2
 80075de:	b29a      	uxth	r2, r3
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	791a      	ldrb	r2, [r3, #4]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	795a      	ldrb	r2, [r3, #5]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	799a      	ldrb	r2, [r3, #6]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	79da      	ldrb	r2, [r3, #7]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	7a1a      	ldrb	r2, [r3, #8]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800760c:	88fb      	ldrh	r3, [r7, #6]
 800760e:	2b09      	cmp	r3, #9
 8007610:	d95f      	bls.n	80076d2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007612:	2309      	movs	r3, #9
 8007614:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007616:	2300      	movs	r3, #0
 8007618:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800761a:	e051      	b.n	80076c0 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800761c:	f107 0316 	add.w	r3, r7, #22
 8007620:	4619      	mov	r1, r3
 8007622:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007624:	f000 f8e8 	bl	80077f8 <USBH_GetNextDesc>
 8007628:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800762a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762c:	785b      	ldrb	r3, [r3, #1]
 800762e:	2b04      	cmp	r3, #4
 8007630:	d146      	bne.n	80076c0 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007632:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007636:	221a      	movs	r2, #26
 8007638:	fb02 f303 	mul.w	r3, r2, r3
 800763c:	3308      	adds	r3, #8
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	4413      	add	r3, r2
 8007642:	3302      	adds	r3, #2
 8007644:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007646:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007648:	69f8      	ldr	r0, [r7, #28]
 800764a:	f000 f846 	bl	80076da <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800764e:	2300      	movs	r3, #0
 8007650:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007654:	2300      	movs	r3, #0
 8007656:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007658:	e022      	b.n	80076a0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800765a:	f107 0316 	add.w	r3, r7, #22
 800765e:	4619      	mov	r1, r3
 8007660:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007662:	f000 f8c9 	bl	80077f8 <USBH_GetNextDesc>
 8007666:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766a:	785b      	ldrb	r3, [r3, #1]
 800766c:	2b05      	cmp	r3, #5
 800766e:	d117      	bne.n	80076a0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007670:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007674:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007678:	3201      	adds	r2, #1
 800767a:	00d2      	lsls	r2, r2, #3
 800767c:	211a      	movs	r1, #26
 800767e:	fb01 f303 	mul.w	r3, r1, r3
 8007682:	4413      	add	r3, r2
 8007684:	3308      	adds	r3, #8
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	4413      	add	r3, r2
 800768a:	3304      	adds	r3, #4
 800768c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800768e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007690:	69b8      	ldr	r0, [r7, #24]
 8007692:	f000 f851 	bl	8007738 <USBH_ParseEPDesc>
            ep_ix++;
 8007696:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800769a:	3301      	adds	r3, #1
 800769c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	791b      	ldrb	r3, [r3, #4]
 80076a4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d204      	bcs.n	80076b6 <USBH_ParseCfgDesc+0x120>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	885a      	ldrh	r2, [r3, #2]
 80076b0:	8afb      	ldrh	r3, [r7, #22]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d8d1      	bhi.n	800765a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80076b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076ba:	3301      	adds	r3, #1
 80076bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80076c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d804      	bhi.n	80076d2 <USBH_ParseCfgDesc+0x13c>
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	885a      	ldrh	r2, [r3, #2]
 80076cc:	8afb      	ldrh	r3, [r7, #22]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d8a4      	bhi.n	800761c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80076d2:	bf00      	nop
 80076d4:	3728      	adds	r7, #40	; 0x28
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80076da:	b480      	push	{r7}
 80076dc:	b083      	sub	sp, #12
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
 80076e2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	781a      	ldrb	r2, [r3, #0]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	785a      	ldrb	r2, [r3, #1]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	789a      	ldrb	r2, [r3, #2]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	78da      	ldrb	r2, [r3, #3]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	791a      	ldrb	r2, [r3, #4]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	795a      	ldrb	r2, [r3, #5]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	799a      	ldrb	r2, [r3, #6]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	79da      	ldrb	r2, [r3, #7]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	7a1a      	ldrb	r2, [r3, #8]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	721a      	strb	r2, [r3, #8]
}
 800772c:	bf00      	nop
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	781a      	ldrb	r2, [r3, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	785a      	ldrb	r2, [r3, #1]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	789a      	ldrb	r2, [r3, #2]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	78da      	ldrb	r2, [r3, #3]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	3304      	adds	r3, #4
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	b29a      	uxth	r2, r3
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	3305      	adds	r3, #5
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	b29b      	uxth	r3, r3
 8007772:	021b      	lsls	r3, r3, #8
 8007774:	b29b      	uxth	r3, r3
 8007776:	4313      	orrs	r3, r2
 8007778:	b29a      	uxth	r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	799a      	ldrb	r2, [r3, #6]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	719a      	strb	r2, [r3, #6]
}
 8007786:	bf00      	nop
 8007788:	370c      	adds	r7, #12
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr

08007792 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007792:	b480      	push	{r7}
 8007794:	b087      	sub	sp, #28
 8007796:	af00      	add	r7, sp, #0
 8007798:	60f8      	str	r0, [r7, #12]
 800779a:	60b9      	str	r1, [r7, #8]
 800779c:	4613      	mov	r3, r2
 800779e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	3301      	adds	r3, #1
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	2b03      	cmp	r3, #3
 80077a8:	d120      	bne.n	80077ec <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	1e9a      	subs	r2, r3, #2
 80077b0:	88fb      	ldrh	r3, [r7, #6]
 80077b2:	4293      	cmp	r3, r2
 80077b4:	bf28      	it	cs
 80077b6:	4613      	movcs	r3, r2
 80077b8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	3302      	adds	r3, #2
 80077be:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80077c0:	2300      	movs	r3, #0
 80077c2:	82fb      	strh	r3, [r7, #22]
 80077c4:	e00b      	b.n	80077de <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80077c6:	8afb      	ldrh	r3, [r7, #22]
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	4413      	add	r3, r2
 80077cc:	781a      	ldrb	r2, [r3, #0]
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	701a      	strb	r2, [r3, #0]
      pdest++;
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	3301      	adds	r3, #1
 80077d6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80077d8:	8afb      	ldrh	r3, [r7, #22]
 80077da:	3302      	adds	r3, #2
 80077dc:	82fb      	strh	r3, [r7, #22]
 80077de:	8afa      	ldrh	r2, [r7, #22]
 80077e0:	8abb      	ldrh	r3, [r7, #20]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d3ef      	bcc.n	80077c6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	2200      	movs	r2, #0
 80077ea:	701a      	strb	r2, [r3, #0]
  }
}
 80077ec:	bf00      	nop
 80077ee:	371c      	adds	r7, #28
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b085      	sub	sp, #20
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	881a      	ldrh	r2, [r3, #0]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	b29b      	uxth	r3, r3
 800780c:	4413      	add	r3, r2
 800780e:	b29a      	uxth	r2, r3
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4413      	add	r3, r2
 800781e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007820:	68fb      	ldr	r3, [r7, #12]
}
 8007822:	4618      	mov	r0, r3
 8007824:	3714      	adds	r7, #20
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr

0800782e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b086      	sub	sp, #24
 8007832:	af00      	add	r7, sp, #0
 8007834:	60f8      	str	r0, [r7, #12]
 8007836:	60b9      	str	r1, [r7, #8]
 8007838:	4613      	mov	r3, r2
 800783a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800783c:	2301      	movs	r3, #1
 800783e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	789b      	ldrb	r3, [r3, #2]
 8007844:	2b01      	cmp	r3, #1
 8007846:	d002      	beq.n	800784e <USBH_CtlReq+0x20>
 8007848:	2b02      	cmp	r3, #2
 800784a:	d01d      	beq.n	8007888 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800784c:	e043      	b.n	80078d6 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	68ba      	ldr	r2, [r7, #8]
 8007852:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	88fa      	ldrh	r2, [r7, #6]
 8007858:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2201      	movs	r2, #1
 800785e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2202      	movs	r2, #2
 8007864:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007866:	2301      	movs	r3, #1
 8007868:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2203      	movs	r2, #3
 800786e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800787e:	2200      	movs	r2, #0
 8007880:	4619      	mov	r1, r3
 8007882:	f000 fd1b 	bl	80082bc <osMessagePut>
      break;
 8007886:	e026      	b.n	80078d6 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8007888:	68f8      	ldr	r0, [r7, #12]
 800788a:	f000 f829 	bl	80078e0 <USBH_HandleControl>
 800788e:	4603      	mov	r3, r0
 8007890:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007892:	7dfb      	ldrb	r3, [r7, #23]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d002      	beq.n	800789e <USBH_CtlReq+0x70>
 8007898:	7dfb      	ldrb	r3, [r7, #23]
 800789a:	2b03      	cmp	r3, #3
 800789c:	d106      	bne.n	80078ac <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2201      	movs	r2, #1
 80078a2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2200      	movs	r2, #0
 80078a8:	761a      	strb	r2, [r3, #24]
 80078aa:	e005      	b.n	80078b8 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 80078ac:	7dfb      	ldrb	r3, [r7, #23]
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d102      	bne.n	80078b8 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2201      	movs	r2, #1
 80078b6:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2203      	movs	r2, #3
 80078bc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80078cc:	2200      	movs	r2, #0
 80078ce:	4619      	mov	r1, r3
 80078d0:	f000 fcf4 	bl	80082bc <osMessagePut>
      break;
 80078d4:	bf00      	nop
  }
  return status;
 80078d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3718      	adds	r7, #24
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b086      	sub	sp, #24
 80078e4:	af02      	add	r7, sp, #8
 80078e6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80078e8:	2301      	movs	r3, #1
 80078ea:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80078ec:	2300      	movs	r3, #0
 80078ee:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	7e1b      	ldrb	r3, [r3, #24]
 80078f4:	3b01      	subs	r3, #1
 80078f6:	2b0a      	cmp	r3, #10
 80078f8:	f200 822b 	bhi.w	8007d52 <USBH_HandleControl+0x472>
 80078fc:	a201      	add	r2, pc, #4	; (adr r2, 8007904 <USBH_HandleControl+0x24>)
 80078fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007902:	bf00      	nop
 8007904:	08007931 	.word	0x08007931
 8007908:	0800794b 	.word	0x0800794b
 800790c:	080079ed 	.word	0x080079ed
 8007910:	08007a13 	.word	0x08007a13
 8007914:	08007a9f 	.word	0x08007a9f
 8007918:	08007acb 	.word	0x08007acb
 800791c:	08007b8d 	.word	0x08007b8d
 8007920:	08007baf 	.word	0x08007baf
 8007924:	08007c41 	.word	0x08007c41
 8007928:	08007c69 	.word	0x08007c69
 800792c:	08007cfb 	.word	0x08007cfb
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f103 0110 	add.w	r1, r3, #16
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	795b      	ldrb	r3, [r3, #5]
 800793a:	461a      	mov	r2, r3
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fa19 	bl	8007d74 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2202      	movs	r2, #2
 8007946:	761a      	strb	r2, [r3, #24]
      break;
 8007948:	e20e      	b.n	8007d68 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	795b      	ldrb	r3, [r3, #5]
 800794e:	4619      	mov	r1, r3
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f003 fb4d 	bl	800aff0 <USBH_LL_GetURBState>
 8007956:	4603      	mov	r3, r0
 8007958:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800795a:	7bbb      	ldrb	r3, [r7, #14]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d12c      	bne.n	80079ba <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	7c1b      	ldrb	r3, [r3, #16]
 8007964:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007968:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	8adb      	ldrh	r3, [r3, #22]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00a      	beq.n	8007988 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007972:	7b7b      	ldrb	r3, [r7, #13]
 8007974:	2b80      	cmp	r3, #128	; 0x80
 8007976:	d103      	bne.n	8007980 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2203      	movs	r2, #3
 800797c:	761a      	strb	r2, [r3, #24]
 800797e:	e00d      	b.n	800799c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2205      	movs	r2, #5
 8007984:	761a      	strb	r2, [r3, #24]
 8007986:	e009      	b.n	800799c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8007988:	7b7b      	ldrb	r3, [r7, #13]
 800798a:	2b80      	cmp	r3, #128	; 0x80
 800798c:	d103      	bne.n	8007996 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2209      	movs	r2, #9
 8007992:	761a      	strb	r2, [r3, #24]
 8007994:	e002      	b.n	800799c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2207      	movs	r2, #7
 800799a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2203      	movs	r2, #3
 80079a0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80079b0:	2200      	movs	r2, #0
 80079b2:	4619      	mov	r1, r3
 80079b4:	f000 fc82 	bl	80082bc <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80079b8:	e1cd      	b.n	8007d56 <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80079ba:	7bbb      	ldrb	r3, [r7, #14]
 80079bc:	2b04      	cmp	r3, #4
 80079be:	d003      	beq.n	80079c8 <USBH_HandleControl+0xe8>
 80079c0:	7bbb      	ldrb	r3, [r7, #14]
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	f040 81c7 	bne.w	8007d56 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	220b      	movs	r2, #11
 80079cc:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2203      	movs	r2, #3
 80079d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80079e2:	2200      	movs	r2, #0
 80079e4:	4619      	mov	r1, r3
 80079e6:	f000 fc69 	bl	80082bc <osMessagePut>
      break;
 80079ea:	e1b4      	b.n	8007d56 <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079f2:	b29a      	uxth	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6899      	ldr	r1, [r3, #8]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	899a      	ldrh	r2, [r3, #12]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	791b      	ldrb	r3, [r3, #4]
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f000 f9f4 	bl	8007df2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2204      	movs	r2, #4
 8007a0e:	761a      	strb	r2, [r3, #24]
      break;
 8007a10:	e1aa      	b.n	8007d68 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	791b      	ldrb	r3, [r3, #4]
 8007a16:	4619      	mov	r1, r3
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f003 fae9 	bl	800aff0 <USBH_LL_GetURBState>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007a22:	7bbb      	ldrb	r3, [r7, #14]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d110      	bne.n	8007a4a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2209      	movs	r2, #9
 8007a2c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2203      	movs	r2, #3
 8007a32:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007a42:	2200      	movs	r2, #0
 8007a44:	4619      	mov	r1, r3
 8007a46:	f000 fc39 	bl	80082bc <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007a4a:	7bbb      	ldrb	r3, [r7, #14]
 8007a4c:	2b05      	cmp	r3, #5
 8007a4e:	d110      	bne.n	8007a72 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007a50:	2303      	movs	r3, #3
 8007a52:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2203      	movs	r2, #3
 8007a58:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007a68:	2200      	movs	r2, #0
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	f000 fc26 	bl	80082bc <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007a70:	e173      	b.n	8007d5a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8007a72:	7bbb      	ldrb	r3, [r7, #14]
 8007a74:	2b04      	cmp	r3, #4
 8007a76:	f040 8170 	bne.w	8007d5a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	220b      	movs	r2, #11
 8007a7e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2203      	movs	r2, #3
 8007a84:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007a94:	2200      	movs	r2, #0
 8007a96:	4619      	mov	r1, r3
 8007a98:	f000 fc10 	bl	80082bc <osMessagePut>
      break;
 8007a9c:	e15d      	b.n	8007d5a <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6899      	ldr	r1, [r3, #8]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	899a      	ldrh	r2, [r3, #12]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	7958      	ldrb	r0, [r3, #5]
 8007aaa:	2301      	movs	r3, #1
 8007aac:	9300      	str	r3, [sp, #0]
 8007aae:	4603      	mov	r3, r0
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 f979 	bl	8007da8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007abc:	b29a      	uxth	r2, r3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2206      	movs	r2, #6
 8007ac6:	761a      	strb	r2, [r3, #24]
      break;
 8007ac8:	e14e      	b.n	8007d68 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	795b      	ldrb	r3, [r3, #5]
 8007ace:	4619      	mov	r1, r3
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f003 fa8d 	bl	800aff0 <USBH_LL_GetURBState>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007ada:	7bbb      	ldrb	r3, [r7, #14]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d111      	bne.n	8007b04 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2207      	movs	r2, #7
 8007ae4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2203      	movs	r2, #3
 8007aea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007afa:	2200      	movs	r2, #0
 8007afc:	4619      	mov	r1, r3
 8007afe:	f000 fbdd 	bl	80082bc <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007b02:	e12c      	b.n	8007d5e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 8007b04:	7bbb      	ldrb	r3, [r7, #14]
 8007b06:	2b05      	cmp	r3, #5
 8007b08:	d113      	bne.n	8007b32 <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	220c      	movs	r2, #12
 8007b0e:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007b10:	2303      	movs	r3, #3
 8007b12:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2203      	movs	r2, #3
 8007b18:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007b28:	2200      	movs	r2, #0
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	f000 fbc6 	bl	80082bc <osMessagePut>
      break;
 8007b30:	e115      	b.n	8007d5e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007b32:	7bbb      	ldrb	r3, [r7, #14]
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d111      	bne.n	8007b5c <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2205      	movs	r2, #5
 8007b3c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2203      	movs	r2, #3
 8007b42:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007b52:	2200      	movs	r2, #0
 8007b54:	4619      	mov	r1, r3
 8007b56:	f000 fbb1 	bl	80082bc <osMessagePut>
      break;
 8007b5a:	e100      	b.n	8007d5e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 8007b5c:	7bbb      	ldrb	r3, [r7, #14]
 8007b5e:	2b04      	cmp	r3, #4
 8007b60:	f040 80fd 	bne.w	8007d5e <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	220b      	movs	r2, #11
 8007b68:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007b6a:	2302      	movs	r3, #2
 8007b6c:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2203      	movs	r2, #3
 8007b72:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007b82:	2200      	movs	r2, #0
 8007b84:	4619      	mov	r1, r3
 8007b86:	f000 fb99 	bl	80082bc <osMessagePut>
      break;
 8007b8a:	e0e8      	b.n	8007d5e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	791b      	ldrb	r3, [r3, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	2100      	movs	r1, #0
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 f92c 	bl	8007df2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ba0:	b29a      	uxth	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2208      	movs	r2, #8
 8007baa:	761a      	strb	r2, [r3, #24]

      break;
 8007bac:	e0dc      	b.n	8007d68 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	791b      	ldrb	r3, [r3, #4]
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f003 fa1b 	bl	800aff0 <USBH_LL_GetURBState>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007bbe:	7bbb      	ldrb	r3, [r7, #14]
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d113      	bne.n	8007bec <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	220d      	movs	r2, #13
 8007bc8:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2203      	movs	r2, #3
 8007bd2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007be2:	2200      	movs	r2, #0
 8007be4:	4619      	mov	r1, r3
 8007be6:	f000 fb69 	bl	80082bc <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007bea:	e0ba      	b.n	8007d62 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 8007bec:	7bbb      	ldrb	r3, [r7, #14]
 8007bee:	2b04      	cmp	r3, #4
 8007bf0:	d111      	bne.n	8007c16 <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	220b      	movs	r2, #11
 8007bf6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2203      	movs	r2, #3
 8007bfc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	4619      	mov	r1, r3
 8007c10:	f000 fb54 	bl	80082bc <osMessagePut>
      break;
 8007c14:	e0a5      	b.n	8007d62 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 8007c16:	7bbb      	ldrb	r3, [r7, #14]
 8007c18:	2b05      	cmp	r3, #5
 8007c1a:	f040 80a2 	bne.w	8007d62 <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2203      	movs	r2, #3
 8007c26:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007c36:	2200      	movs	r2, #0
 8007c38:	4619      	mov	r1, r3
 8007c3a:	f000 fb3f 	bl	80082bc <osMessagePut>
      break;
 8007c3e:	e090      	b.n	8007d62 <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	795a      	ldrb	r2, [r3, #5]
 8007c44:	2301      	movs	r3, #1
 8007c46:	9300      	str	r3, [sp, #0]
 8007c48:	4613      	mov	r3, r2
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 f8aa 	bl	8007da8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	220a      	movs	r2, #10
 8007c64:	761a      	strb	r2, [r3, #24]
      break;
 8007c66:	e07f      	b.n	8007d68 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	795b      	ldrb	r3, [r3, #5]
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f003 f9be 	bl	800aff0 <USBH_LL_GetURBState>
 8007c74:	4603      	mov	r3, r0
 8007c76:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007c78:	7bbb      	ldrb	r3, [r7, #14]
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d113      	bne.n	8007ca6 <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	220d      	movs	r2, #13
 8007c86:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2203      	movs	r2, #3
 8007c8c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	f000 fb0c 	bl	80082bc <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007ca4:	e05f      	b.n	8007d66 <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007ca6:	7bbb      	ldrb	r3, [r7, #14]
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d111      	bne.n	8007cd0 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2209      	movs	r2, #9
 8007cb0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2203      	movs	r2, #3
 8007cb6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	4619      	mov	r1, r3
 8007cca:	f000 faf7 	bl	80082bc <osMessagePut>
      break;
 8007cce:	e04a      	b.n	8007d66 <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 8007cd0:	7bbb      	ldrb	r3, [r7, #14]
 8007cd2:	2b04      	cmp	r3, #4
 8007cd4:	d147      	bne.n	8007d66 <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	220b      	movs	r2, #11
 8007cda:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2203      	movs	r2, #3
 8007ce0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	f000 fae2 	bl	80082bc <osMessagePut>
      break;
 8007cf8:	e035      	b.n	8007d66 <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	7e5b      	ldrb	r3, [r3, #25]
 8007cfe:	3301      	adds	r3, #1
 8007d00:	b2da      	uxtb	r2, r3
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	765a      	strb	r2, [r3, #25]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	7e5b      	ldrb	r3, [r3, #25]
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d806      	bhi.n	8007d1c <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2201      	movs	r2, #1
 8007d12:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007d1a:	e025      	b.n	8007d68 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d22:	2106      	movs	r1, #6
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	795b      	ldrb	r3, [r3, #5]
 8007d32:	4619      	mov	r1, r3
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 f90d 	bl	8007f54 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	791b      	ldrb	r3, [r3, #4]
 8007d3e:	4619      	mov	r1, r3
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 f907 	bl	8007f54 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007d4c:	2302      	movs	r3, #2
 8007d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8007d50:	e00a      	b.n	8007d68 <USBH_HandleControl+0x488>

    default:
      break;
 8007d52:	bf00      	nop
 8007d54:	e008      	b.n	8007d68 <USBH_HandleControl+0x488>
      break;
 8007d56:	bf00      	nop
 8007d58:	e006      	b.n	8007d68 <USBH_HandleControl+0x488>
      break;
 8007d5a:	bf00      	nop
 8007d5c:	e004      	b.n	8007d68 <USBH_HandleControl+0x488>
      break;
 8007d5e:	bf00      	nop
 8007d60:	e002      	b.n	8007d68 <USBH_HandleControl+0x488>
      break;
 8007d62:	bf00      	nop
 8007d64:	e000      	b.n	8007d68 <USBH_HandleControl+0x488>
      break;
 8007d66:	bf00      	nop
  }

  return status;
 8007d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop

08007d74 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b088      	sub	sp, #32
 8007d78:	af04      	add	r7, sp, #16
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007d82:	79f9      	ldrb	r1, [r7, #7]
 8007d84:	2300      	movs	r3, #0
 8007d86:	9303      	str	r3, [sp, #12]
 8007d88:	2308      	movs	r3, #8
 8007d8a:	9302      	str	r3, [sp, #8]
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	9301      	str	r3, [sp, #4]
 8007d90:	2300      	movs	r3, #0
 8007d92:	9300      	str	r3, [sp, #0]
 8007d94:	2300      	movs	r3, #0
 8007d96:	2200      	movs	r2, #0
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f003 f8f8 	bl	800af8e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b088      	sub	sp, #32
 8007dac:	af04      	add	r7, sp, #16
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	4611      	mov	r1, r2
 8007db4:	461a      	mov	r2, r3
 8007db6:	460b      	mov	r3, r1
 8007db8:	80fb      	strh	r3, [r7, #6]
 8007dba:	4613      	mov	r3, r2
 8007dbc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d001      	beq.n	8007dcc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007dcc:	7979      	ldrb	r1, [r7, #5]
 8007dce:	7e3b      	ldrb	r3, [r7, #24]
 8007dd0:	9303      	str	r3, [sp, #12]
 8007dd2:	88fb      	ldrh	r3, [r7, #6]
 8007dd4:	9302      	str	r3, [sp, #8]
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	9301      	str	r3, [sp, #4]
 8007dda:	2301      	movs	r3, #1
 8007ddc:	9300      	str	r3, [sp, #0]
 8007dde:	2300      	movs	r3, #0
 8007de0:	2200      	movs	r2, #0
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f003 f8d3 	bl	800af8e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b088      	sub	sp, #32
 8007df6:	af04      	add	r7, sp, #16
 8007df8:	60f8      	str	r0, [r7, #12]
 8007dfa:	60b9      	str	r1, [r7, #8]
 8007dfc:	4611      	mov	r1, r2
 8007dfe:	461a      	mov	r2, r3
 8007e00:	460b      	mov	r3, r1
 8007e02:	80fb      	strh	r3, [r7, #6]
 8007e04:	4613      	mov	r3, r2
 8007e06:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007e08:	7979      	ldrb	r1, [r7, #5]
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	9303      	str	r3, [sp, #12]
 8007e0e:	88fb      	ldrh	r3, [r7, #6]
 8007e10:	9302      	str	r3, [sp, #8]
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	9301      	str	r3, [sp, #4]
 8007e16:	2301      	movs	r3, #1
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f003 f8b5 	bl	800af8e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007e24:	2300      	movs	r3, #0

}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b088      	sub	sp, #32
 8007e32:	af04      	add	r7, sp, #16
 8007e34:	60f8      	str	r0, [r7, #12]
 8007e36:	60b9      	str	r1, [r7, #8]
 8007e38:	4611      	mov	r1, r2
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	80fb      	strh	r3, [r7, #6]
 8007e40:	4613      	mov	r3, r2
 8007e42:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d001      	beq.n	8007e52 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007e52:	7979      	ldrb	r1, [r7, #5]
 8007e54:	7e3b      	ldrb	r3, [r7, #24]
 8007e56:	9303      	str	r3, [sp, #12]
 8007e58:	88fb      	ldrh	r3, [r7, #6]
 8007e5a:	9302      	str	r3, [sp, #8]
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	9301      	str	r3, [sp, #4]
 8007e60:	2301      	movs	r3, #1
 8007e62:	9300      	str	r3, [sp, #0]
 8007e64:	2302      	movs	r3, #2
 8007e66:	2200      	movs	r2, #0
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f003 f890 	bl	800af8e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b088      	sub	sp, #32
 8007e7c:	af04      	add	r7, sp, #16
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	4611      	mov	r1, r2
 8007e84:	461a      	mov	r2, r3
 8007e86:	460b      	mov	r3, r1
 8007e88:	80fb      	strh	r3, [r7, #6]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007e8e:	7979      	ldrb	r1, [r7, #5]
 8007e90:	2300      	movs	r3, #0
 8007e92:	9303      	str	r3, [sp, #12]
 8007e94:	88fb      	ldrh	r3, [r7, #6]
 8007e96:	9302      	str	r3, [sp, #8]
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	9301      	str	r3, [sp, #4]
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	9300      	str	r3, [sp, #0]
 8007ea0:	2302      	movs	r3, #2
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f003 f872 	bl	800af8e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b086      	sub	sp, #24
 8007eb8:	af04      	add	r7, sp, #16
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	4608      	mov	r0, r1
 8007ebe:	4611      	mov	r1, r2
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	70fb      	strb	r3, [r7, #3]
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	70bb      	strb	r3, [r7, #2]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007ece:	7878      	ldrb	r0, [r7, #1]
 8007ed0:	78ba      	ldrb	r2, [r7, #2]
 8007ed2:	78f9      	ldrb	r1, [r7, #3]
 8007ed4:	8b3b      	ldrh	r3, [r7, #24]
 8007ed6:	9302      	str	r3, [sp, #8]
 8007ed8:	7d3b      	ldrb	r3, [r7, #20]
 8007eda:	9301      	str	r3, [sp, #4]
 8007edc:	7c3b      	ldrb	r3, [r7, #16]
 8007ede:	9300      	str	r3, [sp, #0]
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f003 f805 	bl	800aef2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b082      	sub	sp, #8
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
 8007efa:	460b      	mov	r3, r1
 8007efc:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007efe:	78fb      	ldrb	r3, [r7, #3]
 8007f00:	4619      	mov	r1, r3
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f003 f824 	bl	800af50 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3708      	adds	r7, #8
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b084      	sub	sp, #16
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f836 	bl	8007f90 <USBH_GetFreePipe>
 8007f24:	4603      	mov	r3, r0
 8007f26:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007f28:	89fb      	ldrh	r3, [r7, #14]
 8007f2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d00a      	beq.n	8007f48 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007f32:	78fa      	ldrb	r2, [r7, #3]
 8007f34:	89fb      	ldrh	r3, [r7, #14]
 8007f36:	f003 030f 	and.w	r3, r3, #15
 8007f3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f3e:	6879      	ldr	r1, [r7, #4]
 8007f40:	33e0      	adds	r3, #224	; 0xe0
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	440b      	add	r3, r1
 8007f46:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007f48:	89fb      	ldrh	r3, [r7, #14]
 8007f4a:	b2db      	uxtb	r3, r3
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007f60:	78fb      	ldrb	r3, [r7, #3]
 8007f62:	2b0a      	cmp	r3, #10
 8007f64:	d80d      	bhi.n	8007f82 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007f66:	78fb      	ldrb	r3, [r7, #3]
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	33e0      	adds	r3, #224	; 0xe0
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	4413      	add	r3, r2
 8007f70:	685a      	ldr	r2, [r3, #4]
 8007f72:	78fb      	ldrb	r3, [r7, #3]
 8007f74:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007f78:	6879      	ldr	r1, [r7, #4]
 8007f7a:	33e0      	adds	r3, #224	; 0xe0
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	440b      	add	r3, r1
 8007f80:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	73fb      	strb	r3, [r7, #15]
 8007fa0:	e00f      	b.n	8007fc2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007fa2:	7bfb      	ldrb	r3, [r7, #15]
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	33e0      	adds	r3, #224	; 0xe0
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	4413      	add	r3, r2
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d102      	bne.n	8007fbc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007fb6:	7bfb      	ldrb	r3, [r7, #15]
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	e007      	b.n	8007fcc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007fbc:	7bfb      	ldrb	r3, [r7, #15]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	73fb      	strb	r3, [r7, #15]
 8007fc2:	7bfb      	ldrb	r3, [r7, #15]
 8007fc4:	2b0a      	cmp	r3, #10
 8007fc6:	d9ec      	bls.n	8007fa2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007fc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3714      	adds	r7, #20
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b085      	sub	sp, #20
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	4603      	mov	r3, r0
 8007fe0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007fe6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007fea:	2b84      	cmp	r3, #132	; 0x84
 8007fec:	d005      	beq.n	8007ffa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007fee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	4413      	add	r3, r2
 8007ff6:	3303      	adds	r3, #3
 8007ff8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3714      	adds	r7, #20
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800800e:	f3ef 8305 	mrs	r3, IPSR
 8008012:	607b      	str	r3, [r7, #4]
  return(result);
 8008014:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008016:	2b00      	cmp	r3, #0
 8008018:	bf14      	ite	ne
 800801a:	2301      	movne	r3, #1
 800801c:	2300      	moveq	r3, #0
 800801e:	b2db      	uxtb	r3, r3
}
 8008020:	4618      	mov	r0, r3
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008030:	f001 fb4a 	bl	80096c8 <vTaskStartScheduler>
  
  return osOK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	bd80      	pop	{r7, pc}

0800803a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800803a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800803c:	b089      	sub	sp, #36	; 0x24
 800803e:	af04      	add	r7, sp, #16
 8008040:	6078      	str	r0, [r7, #4]
 8008042:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	695b      	ldr	r3, [r3, #20]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d020      	beq.n	800808e <osThreadCreate+0x54>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	699b      	ldr	r3, [r3, #24]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d01c      	beq.n	800808e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	685c      	ldr	r4, [r3, #4]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681d      	ldr	r5, [r3, #0]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	691e      	ldr	r6, [r3, #16]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008066:	4618      	mov	r0, r3
 8008068:	f7ff ffb6 	bl	8007fd8 <makeFreeRtosPriority>
 800806c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	695b      	ldr	r3, [r3, #20]
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008076:	9202      	str	r2, [sp, #8]
 8008078:	9301      	str	r3, [sp, #4]
 800807a:	9100      	str	r1, [sp, #0]
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	4632      	mov	r2, r6
 8008080:	4629      	mov	r1, r5
 8008082:	4620      	mov	r0, r4
 8008084:	f001 f95d 	bl	8009342 <xTaskCreateStatic>
 8008088:	4603      	mov	r3, r0
 800808a:	60fb      	str	r3, [r7, #12]
 800808c:	e01c      	b.n	80080c8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	685c      	ldr	r4, [r3, #4]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800809a:	b29e      	uxth	r6, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7ff ff98 	bl	8007fd8 <makeFreeRtosPriority>
 80080a8:	4602      	mov	r2, r0
 80080aa:	f107 030c 	add.w	r3, r7, #12
 80080ae:	9301      	str	r3, [sp, #4]
 80080b0:	9200      	str	r2, [sp, #0]
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	4632      	mov	r2, r6
 80080b6:	4629      	mov	r1, r5
 80080b8:	4620      	mov	r0, r4
 80080ba:	f001 f99c 	bl	80093f6 <xTaskCreate>
 80080be:	4603      	mov	r3, r0
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d001      	beq.n	80080c8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80080c4:	2300      	movs	r3, #0
 80080c6:	e000      	b.n	80080ca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80080c8:	68fb      	ldr	r3, [r7, #12]
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3714      	adds	r7, #20
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080080d2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b084      	sub	sp, #16
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d001      	beq.n	80080e8 <osDelay+0x16>
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	e000      	b.n	80080ea <osDelay+0x18>
 80080e8:	2301      	movs	r3, #1
 80080ea:	4618      	mov	r0, r3
 80080ec:	f001 fab8 	bl	8009660 <vTaskDelay>
  
  return osOK;
 80080f0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3710      	adds	r7, #16
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b086      	sub	sp, #24
 80080fe:	af02      	add	r7, sp, #8
 8008100:	6078      	str	r0, [r7, #4]
 8008102:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d010      	beq.n	800812e <osSemaphoreCreate+0x34>
    if (count == 1) {
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	2b01      	cmp	r3, #1
 8008110:	d10b      	bne.n	800812a <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	685a      	ldr	r2, [r3, #4]
 8008116:	2303      	movs	r3, #3
 8008118:	9300      	str	r3, [sp, #0]
 800811a:	4613      	mov	r3, r2
 800811c:	2200      	movs	r2, #0
 800811e:	2100      	movs	r1, #0
 8008120:	2001      	movs	r0, #1
 8008122:	f000 fa9b 	bl	800865c <xQueueGenericCreateStatic>
 8008126:	4603      	mov	r3, r0
 8008128:	e016      	b.n	8008158 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800812a:	2300      	movs	r3, #0
 800812c:	e014      	b.n	8008158 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	2b01      	cmp	r3, #1
 8008132:	d110      	bne.n	8008156 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8008134:	2203      	movs	r2, #3
 8008136:	2100      	movs	r1, #0
 8008138:	2001      	movs	r0, #1
 800813a:	f000 fb02 	bl	8008742 <xQueueGenericCreate>
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d005      	beq.n	8008152 <osSemaphoreCreate+0x58>
 8008146:	2300      	movs	r3, #0
 8008148:	2200      	movs	r2, #0
 800814a:	2100      	movs	r1, #0
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f000 fb57 	bl	8008800 <xQueueGenericSend>
      return sema;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	e000      	b.n	8008158 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8008156:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800816a:	2300      	movs	r3, #0
 800816c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d101      	bne.n	8008178 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8008174:	2380      	movs	r3, #128	; 0x80
 8008176:	e03a      	b.n	80081ee <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8008178:	2300      	movs	r3, #0
 800817a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008182:	d103      	bne.n	800818c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8008184:	f04f 33ff 	mov.w	r3, #4294967295
 8008188:	60fb      	str	r3, [r7, #12]
 800818a:	e009      	b.n	80081a0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d006      	beq.n	80081a0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d101      	bne.n	80081a0 <osSemaphoreWait+0x40>
      ticks = 1;
 800819c:	2301      	movs	r3, #1
 800819e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80081a0:	f7ff ff32 	bl	8008008 <inHandlerMode>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d017      	beq.n	80081da <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80081aa:	f107 0308 	add.w	r3, r7, #8
 80081ae:	461a      	mov	r2, r3
 80081b0:	2100      	movs	r1, #0
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 ff20 	bl	8008ff8 <xQueueReceiveFromISR>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d001      	beq.n	80081c2 <osSemaphoreWait+0x62>
      return osErrorOS;
 80081be:	23ff      	movs	r3, #255	; 0xff
 80081c0:	e015      	b.n	80081ee <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d011      	beq.n	80081ec <osSemaphoreWait+0x8c>
 80081c8:	4b0b      	ldr	r3, [pc, #44]	; (80081f8 <osSemaphoreWait+0x98>)
 80081ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081ce:	601a      	str	r2, [r3, #0]
 80081d0:	f3bf 8f4f 	dsb	sy
 80081d4:	f3bf 8f6f 	isb	sy
 80081d8:	e008      	b.n	80081ec <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80081da:	68f9      	ldr	r1, [r7, #12]
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 fe03 	bl	8008de8 <xQueueSemaphoreTake>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d001      	beq.n	80081ec <osSemaphoreWait+0x8c>
    return osErrorOS;
 80081e8:	23ff      	movs	r3, #255	; 0xff
 80081ea:	e000      	b.n	80081ee <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3710      	adds	r7, #16
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	e000ed04 	.word	0xe000ed04

080081fc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008204:	2300      	movs	r3, #0
 8008206:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008208:	2300      	movs	r3, #0
 800820a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800820c:	f7ff fefc 	bl	8008008 <inHandlerMode>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d016      	beq.n	8008244 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008216:	f107 0308 	add.w	r3, r7, #8
 800821a:	4619      	mov	r1, r3
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 fc7d 	bl	8008b1c <xQueueGiveFromISR>
 8008222:	4603      	mov	r3, r0
 8008224:	2b01      	cmp	r3, #1
 8008226:	d001      	beq.n	800822c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8008228:	23ff      	movs	r3, #255	; 0xff
 800822a:	e017      	b.n	800825c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d013      	beq.n	800825a <osSemaphoreRelease+0x5e>
 8008232:	4b0c      	ldr	r3, [pc, #48]	; (8008264 <osSemaphoreRelease+0x68>)
 8008234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008238:	601a      	str	r2, [r3, #0]
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	f3bf 8f6f 	isb	sy
 8008242:	e00a      	b.n	800825a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8008244:	2300      	movs	r3, #0
 8008246:	2200      	movs	r2, #0
 8008248:	2100      	movs	r1, #0
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 fad8 	bl	8008800 <xQueueGenericSend>
 8008250:	4603      	mov	r3, r0
 8008252:	2b01      	cmp	r3, #1
 8008254:	d001      	beq.n	800825a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8008256:	23ff      	movs	r3, #255	; 0xff
 8008258:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800825a:	68fb      	ldr	r3, [r7, #12]
}
 800825c:	4618      	mov	r0, r3
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	e000ed04 	.word	0xe000ed04

08008268 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008268:	b590      	push	{r4, r7, lr}
 800826a:	b085      	sub	sp, #20
 800826c:	af02      	add	r7, sp, #8
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d012      	beq.n	80082a0 <osMessageCreate+0x38>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d00e      	beq.n	80082a0 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6818      	ldr	r0, [r3, #0]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6859      	ldr	r1, [r3, #4]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	689a      	ldr	r2, [r3, #8]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	68dc      	ldr	r4, [r3, #12]
 8008292:	2300      	movs	r3, #0
 8008294:	9300      	str	r3, [sp, #0]
 8008296:	4623      	mov	r3, r4
 8008298:	f000 f9e0 	bl	800865c <xQueueGenericCreateStatic>
 800829c:	4603      	mov	r3, r0
 800829e:	e008      	b.n	80082b2 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6818      	ldr	r0, [r3, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	4619      	mov	r1, r3
 80082ac:	f000 fa49 	bl	8008742 <xQueueGenericCreate>
 80082b0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	370c      	adds	r7, #12
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd90      	pop	{r4, r7, pc}
	...

080082bc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b086      	sub	sp, #24
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80082c8:	2300      	movs	r3, #0
 80082ca:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d101      	bne.n	80082da <osMessagePut+0x1e>
    ticks = 1;
 80082d6:	2301      	movs	r3, #1
 80082d8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80082da:	f7ff fe95 	bl	8008008 <inHandlerMode>
 80082de:	4603      	mov	r3, r0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d018      	beq.n	8008316 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80082e4:	f107 0210 	add.w	r2, r7, #16
 80082e8:	f107 0108 	add.w	r1, r7, #8
 80082ec:	2300      	movs	r3, #0
 80082ee:	68f8      	ldr	r0, [r7, #12]
 80082f0:	f000 fb80 	bl	80089f4 <xQueueGenericSendFromISR>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d001      	beq.n	80082fe <osMessagePut+0x42>
      return osErrorOS;
 80082fa:	23ff      	movs	r3, #255	; 0xff
 80082fc:	e018      	b.n	8008330 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d014      	beq.n	800832e <osMessagePut+0x72>
 8008304:	4b0c      	ldr	r3, [pc, #48]	; (8008338 <osMessagePut+0x7c>)
 8008306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800830a:	601a      	str	r2, [r3, #0]
 800830c:	f3bf 8f4f 	dsb	sy
 8008310:	f3bf 8f6f 	isb	sy
 8008314:	e00b      	b.n	800832e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008316:	f107 0108 	add.w	r1, r7, #8
 800831a:	2300      	movs	r3, #0
 800831c:	697a      	ldr	r2, [r7, #20]
 800831e:	68f8      	ldr	r0, [r7, #12]
 8008320:	f000 fa6e 	bl	8008800 <xQueueGenericSend>
 8008324:	4603      	mov	r3, r0
 8008326:	2b01      	cmp	r3, #1
 8008328:	d001      	beq.n	800832e <osMessagePut+0x72>
      return osErrorOS;
 800832a:	23ff      	movs	r3, #255	; 0xff
 800832c:	e000      	b.n	8008330 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3718      	adds	r7, #24
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	e000ed04 	.word	0xe000ed04

0800833c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800833c:	b590      	push	{r4, r7, lr}
 800833e:	b08b      	sub	sp, #44	; 0x2c
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800834c:	2300      	movs	r3, #0
 800834e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d10a      	bne.n	800836c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8008356:	2380      	movs	r3, #128	; 0x80
 8008358:	617b      	str	r3, [r7, #20]
    return event;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	461c      	mov	r4, r3
 800835e:	f107 0314 	add.w	r3, r7, #20
 8008362:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008366:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800836a:	e054      	b.n	8008416 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800836c:	2300      	movs	r3, #0
 800836e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8008370:	2300      	movs	r3, #0
 8008372:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800837a:	d103      	bne.n	8008384 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800837c:	f04f 33ff 	mov.w	r3, #4294967295
 8008380:	627b      	str	r3, [r7, #36]	; 0x24
 8008382:	e009      	b.n	8008398 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d006      	beq.n	8008398 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800838e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008390:	2b00      	cmp	r3, #0
 8008392:	d101      	bne.n	8008398 <osMessageGet+0x5c>
      ticks = 1;
 8008394:	2301      	movs	r3, #1
 8008396:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8008398:	f7ff fe36 	bl	8008008 <inHandlerMode>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d01c      	beq.n	80083dc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80083a2:	f107 0220 	add.w	r2, r7, #32
 80083a6:	f107 0314 	add.w	r3, r7, #20
 80083aa:	3304      	adds	r3, #4
 80083ac:	4619      	mov	r1, r3
 80083ae:	68b8      	ldr	r0, [r7, #8]
 80083b0:	f000 fe22 	bl	8008ff8 <xQueueReceiveFromISR>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d102      	bne.n	80083c0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80083ba:	2310      	movs	r3, #16
 80083bc:	617b      	str	r3, [r7, #20]
 80083be:	e001      	b.n	80083c4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80083c0:	2300      	movs	r3, #0
 80083c2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80083c4:	6a3b      	ldr	r3, [r7, #32]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d01d      	beq.n	8008406 <osMessageGet+0xca>
 80083ca:	4b15      	ldr	r3, [pc, #84]	; (8008420 <osMessageGet+0xe4>)
 80083cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083d0:	601a      	str	r2, [r3, #0]
 80083d2:	f3bf 8f4f 	dsb	sy
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	e014      	b.n	8008406 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80083dc:	f107 0314 	add.w	r3, r7, #20
 80083e0:	3304      	adds	r3, #4
 80083e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083e4:	4619      	mov	r1, r3
 80083e6:	68b8      	ldr	r0, [r7, #8]
 80083e8:	f000 fc22 	bl	8008c30 <xQueueReceive>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d102      	bne.n	80083f8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80083f2:	2310      	movs	r3, #16
 80083f4:	617b      	str	r3, [r7, #20]
 80083f6:	e006      	b.n	8008406 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80083f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d101      	bne.n	8008402 <osMessageGet+0xc6>
 80083fe:	2300      	movs	r3, #0
 8008400:	e000      	b.n	8008404 <osMessageGet+0xc8>
 8008402:	2340      	movs	r3, #64	; 0x40
 8008404:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	461c      	mov	r4, r3
 800840a:	f107 0314 	add.w	r3, r7, #20
 800840e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008412:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008416:	68f8      	ldr	r0, [r7, #12]
 8008418:	372c      	adds	r7, #44	; 0x2c
 800841a:	46bd      	mov	sp, r7
 800841c:	bd90      	pop	{r4, r7, pc}
 800841e:	bf00      	nop
 8008420:	e000ed04 	.word	0xe000ed04

08008424 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f103 0208 	add.w	r2, r3, #8
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f04f 32ff 	mov.w	r2, #4294967295
 800843c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f103 0208 	add.w	r2, r3, #8
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f103 0208 	add.w	r2, r3, #8
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008458:	bf00      	nop
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008472:	bf00      	nop
 8008474:	370c      	adds	r7, #12
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr

0800847e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800847e:	b480      	push	{r7}
 8008480:	b085      	sub	sp, #20
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
 8008486:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	689a      	ldr	r2, [r3, #8]
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	683a      	ldr	r2, [r7, #0]
 80084a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	683a      	ldr	r2, [r7, #0]
 80084a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	1c5a      	adds	r2, r3, #1
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	601a      	str	r2, [r3, #0]
}
 80084ba:	bf00      	nop
 80084bc:	3714      	adds	r7, #20
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr

080084c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084c6:	b480      	push	{r7}
 80084c8:	b085      	sub	sp, #20
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
 80084ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084dc:	d103      	bne.n	80084e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	60fb      	str	r3, [r7, #12]
 80084e4:	e00c      	b.n	8008500 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	3308      	adds	r3, #8
 80084ea:	60fb      	str	r3, [r7, #12]
 80084ec:	e002      	b.n	80084f4 <vListInsert+0x2e>
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	60fb      	str	r3, [r7, #12]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	68ba      	ldr	r2, [r7, #8]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d2f6      	bcs.n	80084ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	685a      	ldr	r2, [r3, #4]
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	683a      	ldr	r2, [r7, #0]
 800850e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	683a      	ldr	r2, [r7, #0]
 800851a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	1c5a      	adds	r2, r3, #1
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	601a      	str	r2, [r3, #0]
}
 800852c:	bf00      	nop
 800852e:	3714      	adds	r7, #20
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008538:	b480      	push	{r7}
 800853a:	b085      	sub	sp, #20
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	6892      	ldr	r2, [r2, #8]
 800854e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	6852      	ldr	r2, [r2, #4]
 8008558:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	429a      	cmp	r2, r3
 8008562:	d103      	bne.n	800856c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	689a      	ldr	r2, [r3, #8]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	1e5a      	subs	r2, r3, #1
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
}
 8008580:	4618      	mov	r0, r3
 8008582:	3714      	adds	r7, #20
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d109      	bne.n	80085b4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80085a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a4:	f383 8811 	msr	BASEPRI, r3
 80085a8:	f3bf 8f6f 	isb	sy
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	60bb      	str	r3, [r7, #8]
 80085b2:	e7fe      	b.n	80085b2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80085b4:	f001 ffda 	bl	800a56c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085c0:	68f9      	ldr	r1, [r7, #12]
 80085c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80085c4:	fb01 f303 	mul.w	r3, r1, r3
 80085c8:	441a      	add	r2, r3
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2200      	movs	r2, #0
 80085d2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085e4:	3b01      	subs	r3, #1
 80085e6:	68f9      	ldr	r1, [r7, #12]
 80085e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80085ea:	fb01 f303 	mul.w	r3, r1, r3
 80085ee:	441a      	add	r2, r3
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	22ff      	movs	r2, #255	; 0xff
 80085f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	22ff      	movs	r2, #255	; 0xff
 8008600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d114      	bne.n	8008634 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d01a      	beq.n	8008648 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	3310      	adds	r3, #16
 8008616:	4618      	mov	r0, r3
 8008618:	f001 fa94 	bl	8009b44 <xTaskRemoveFromEventList>
 800861c:	4603      	mov	r3, r0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d012      	beq.n	8008648 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008622:	4b0d      	ldr	r3, [pc, #52]	; (8008658 <xQueueGenericReset+0xcc>)
 8008624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008628:	601a      	str	r2, [r3, #0]
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	f3bf 8f6f 	isb	sy
 8008632:	e009      	b.n	8008648 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	3310      	adds	r3, #16
 8008638:	4618      	mov	r0, r3
 800863a:	f7ff fef3 	bl	8008424 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	3324      	adds	r3, #36	; 0x24
 8008642:	4618      	mov	r0, r3
 8008644:	f7ff feee 	bl	8008424 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008648:	f001 ffbe 	bl	800a5c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800864c:	2301      	movs	r3, #1
}
 800864e:	4618      	mov	r0, r3
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	e000ed04 	.word	0xe000ed04

0800865c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800865c:	b580      	push	{r7, lr}
 800865e:	b08e      	sub	sp, #56	; 0x38
 8008660:	af02      	add	r7, sp, #8
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	607a      	str	r2, [r7, #4]
 8008668:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d109      	bne.n	8008684 <xQueueGenericCreateStatic+0x28>
 8008670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008674:	f383 8811 	msr	BASEPRI, r3
 8008678:	f3bf 8f6f 	isb	sy
 800867c:	f3bf 8f4f 	dsb	sy
 8008680:	62bb      	str	r3, [r7, #40]	; 0x28
 8008682:	e7fe      	b.n	8008682 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d109      	bne.n	800869e <xQueueGenericCreateStatic+0x42>
 800868a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868e:	f383 8811 	msr	BASEPRI, r3
 8008692:	f3bf 8f6f 	isb	sy
 8008696:	f3bf 8f4f 	dsb	sy
 800869a:	627b      	str	r3, [r7, #36]	; 0x24
 800869c:	e7fe      	b.n	800869c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d002      	beq.n	80086aa <xQueueGenericCreateStatic+0x4e>
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d001      	beq.n	80086ae <xQueueGenericCreateStatic+0x52>
 80086aa:	2301      	movs	r3, #1
 80086ac:	e000      	b.n	80086b0 <xQueueGenericCreateStatic+0x54>
 80086ae:	2300      	movs	r3, #0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d109      	bne.n	80086c8 <xQueueGenericCreateStatic+0x6c>
 80086b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b8:	f383 8811 	msr	BASEPRI, r3
 80086bc:	f3bf 8f6f 	isb	sy
 80086c0:	f3bf 8f4f 	dsb	sy
 80086c4:	623b      	str	r3, [r7, #32]
 80086c6:	e7fe      	b.n	80086c6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d102      	bne.n	80086d4 <xQueueGenericCreateStatic+0x78>
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d101      	bne.n	80086d8 <xQueueGenericCreateStatic+0x7c>
 80086d4:	2301      	movs	r3, #1
 80086d6:	e000      	b.n	80086da <xQueueGenericCreateStatic+0x7e>
 80086d8:	2300      	movs	r3, #0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d109      	bne.n	80086f2 <xQueueGenericCreateStatic+0x96>
 80086de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e2:	f383 8811 	msr	BASEPRI, r3
 80086e6:	f3bf 8f6f 	isb	sy
 80086ea:	f3bf 8f4f 	dsb	sy
 80086ee:	61fb      	str	r3, [r7, #28]
 80086f0:	e7fe      	b.n	80086f0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80086f2:	2348      	movs	r3, #72	; 0x48
 80086f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	2b48      	cmp	r3, #72	; 0x48
 80086fa:	d009      	beq.n	8008710 <xQueueGenericCreateStatic+0xb4>
 80086fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008700:	f383 8811 	msr	BASEPRI, r3
 8008704:	f3bf 8f6f 	isb	sy
 8008708:	f3bf 8f4f 	dsb	sy
 800870c:	61bb      	str	r3, [r7, #24]
 800870e:	e7fe      	b.n	800870e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008710:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008718:	2b00      	cmp	r3, #0
 800871a:	d00d      	beq.n	8008738 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800871c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871e:	2201      	movs	r2, #1
 8008720:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008724:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800872a:	9300      	str	r3, [sp, #0]
 800872c:	4613      	mov	r3, r2
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	68b9      	ldr	r1, [r7, #8]
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	f000 f844 	bl	80087c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800873a:	4618      	mov	r0, r3
 800873c:	3730      	adds	r7, #48	; 0x30
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008742:	b580      	push	{r7, lr}
 8008744:	b08a      	sub	sp, #40	; 0x28
 8008746:	af02      	add	r7, sp, #8
 8008748:	60f8      	str	r0, [r7, #12]
 800874a:	60b9      	str	r1, [r7, #8]
 800874c:	4613      	mov	r3, r2
 800874e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d109      	bne.n	800876a <xQueueGenericCreate+0x28>
 8008756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875a:	f383 8811 	msr	BASEPRI, r3
 800875e:	f3bf 8f6f 	isb	sy
 8008762:	f3bf 8f4f 	dsb	sy
 8008766:	613b      	str	r3, [r7, #16]
 8008768:	e7fe      	b.n	8008768 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d102      	bne.n	8008776 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008770:	2300      	movs	r3, #0
 8008772:	61fb      	str	r3, [r7, #28]
 8008774:	e004      	b.n	8008780 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	68ba      	ldr	r2, [r7, #8]
 800877a:	fb02 f303 	mul.w	r3, r2, r3
 800877e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	3348      	adds	r3, #72	; 0x48
 8008784:	4618      	mov	r0, r3
 8008786:	f002 f80b 	bl	800a7a0 <pvPortMalloc>
 800878a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800878c:	69bb      	ldr	r3, [r7, #24]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d011      	beq.n	80087b6 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	3348      	adds	r3, #72	; 0x48
 800879a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800879c:	69bb      	ldr	r3, [r7, #24]
 800879e:	2200      	movs	r2, #0
 80087a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80087a4:	79fa      	ldrb	r2, [r7, #7]
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	9300      	str	r3, [sp, #0]
 80087aa:	4613      	mov	r3, r2
 80087ac:	697a      	ldr	r2, [r7, #20]
 80087ae:	68b9      	ldr	r1, [r7, #8]
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f000 f805 	bl	80087c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80087b6:	69bb      	ldr	r3, [r7, #24]
	}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3720      	adds	r7, #32
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	607a      	str	r2, [r7, #4]
 80087cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d103      	bne.n	80087dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80087d4:	69bb      	ldr	r3, [r7, #24]
 80087d6:	69ba      	ldr	r2, [r7, #24]
 80087d8:	601a      	str	r2, [r3, #0]
 80087da:	e002      	b.n	80087e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80087e2:	69bb      	ldr	r3, [r7, #24]
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	68ba      	ldr	r2, [r7, #8]
 80087ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80087ee:	2101      	movs	r1, #1
 80087f0:	69b8      	ldr	r0, [r7, #24]
 80087f2:	f7ff fecb 	bl	800858c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80087f6:	bf00      	nop
 80087f8:	3710      	adds	r7, #16
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
	...

08008800 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b08e      	sub	sp, #56	; 0x38
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]
 800880c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800880e:	2300      	movs	r3, #0
 8008810:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008818:	2b00      	cmp	r3, #0
 800881a:	d109      	bne.n	8008830 <xQueueGenericSend+0x30>
 800881c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008820:	f383 8811 	msr	BASEPRI, r3
 8008824:	f3bf 8f6f 	isb	sy
 8008828:	f3bf 8f4f 	dsb	sy
 800882c:	62bb      	str	r3, [r7, #40]	; 0x28
 800882e:	e7fe      	b.n	800882e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d103      	bne.n	800883e <xQueueGenericSend+0x3e>
 8008836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883a:	2b00      	cmp	r3, #0
 800883c:	d101      	bne.n	8008842 <xQueueGenericSend+0x42>
 800883e:	2301      	movs	r3, #1
 8008840:	e000      	b.n	8008844 <xQueueGenericSend+0x44>
 8008842:	2300      	movs	r3, #0
 8008844:	2b00      	cmp	r3, #0
 8008846:	d109      	bne.n	800885c <xQueueGenericSend+0x5c>
 8008848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884c:	f383 8811 	msr	BASEPRI, r3
 8008850:	f3bf 8f6f 	isb	sy
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	627b      	str	r3, [r7, #36]	; 0x24
 800885a:	e7fe      	b.n	800885a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	2b02      	cmp	r3, #2
 8008860:	d103      	bne.n	800886a <xQueueGenericSend+0x6a>
 8008862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008866:	2b01      	cmp	r3, #1
 8008868:	d101      	bne.n	800886e <xQueueGenericSend+0x6e>
 800886a:	2301      	movs	r3, #1
 800886c:	e000      	b.n	8008870 <xQueueGenericSend+0x70>
 800886e:	2300      	movs	r3, #0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d109      	bne.n	8008888 <xQueueGenericSend+0x88>
 8008874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008878:	f383 8811 	msr	BASEPRI, r3
 800887c:	f3bf 8f6f 	isb	sy
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	623b      	str	r3, [r7, #32]
 8008886:	e7fe      	b.n	8008886 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008888:	f001 fb12 	bl	8009eb0 <xTaskGetSchedulerState>
 800888c:	4603      	mov	r3, r0
 800888e:	2b00      	cmp	r3, #0
 8008890:	d102      	bne.n	8008898 <xQueueGenericSend+0x98>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d101      	bne.n	800889c <xQueueGenericSend+0x9c>
 8008898:	2301      	movs	r3, #1
 800889a:	e000      	b.n	800889e <xQueueGenericSend+0x9e>
 800889c:	2300      	movs	r3, #0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d109      	bne.n	80088b6 <xQueueGenericSend+0xb6>
 80088a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a6:	f383 8811 	msr	BASEPRI, r3
 80088aa:	f3bf 8f6f 	isb	sy
 80088ae:	f3bf 8f4f 	dsb	sy
 80088b2:	61fb      	str	r3, [r7, #28]
 80088b4:	e7fe      	b.n	80088b4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80088b6:	f001 fe59 	bl	800a56c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80088ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d302      	bcc.n	80088cc <xQueueGenericSend+0xcc>
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	d129      	bne.n	8008920 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088cc:	683a      	ldr	r2, [r7, #0]
 80088ce:	68b9      	ldr	r1, [r7, #8]
 80088d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088d2:	f000 fc26 	bl	8009122 <prvCopyDataToQueue>
 80088d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d010      	beq.n	8008902 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e2:	3324      	adds	r3, #36	; 0x24
 80088e4:	4618      	mov	r0, r3
 80088e6:	f001 f92d 	bl	8009b44 <xTaskRemoveFromEventList>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d013      	beq.n	8008918 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80088f0:	4b3f      	ldr	r3, [pc, #252]	; (80089f0 <xQueueGenericSend+0x1f0>)
 80088f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088f6:	601a      	str	r2, [r3, #0]
 80088f8:	f3bf 8f4f 	dsb	sy
 80088fc:	f3bf 8f6f 	isb	sy
 8008900:	e00a      	b.n	8008918 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008904:	2b00      	cmp	r3, #0
 8008906:	d007      	beq.n	8008918 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008908:	4b39      	ldr	r3, [pc, #228]	; (80089f0 <xQueueGenericSend+0x1f0>)
 800890a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800890e:	601a      	str	r2, [r3, #0]
 8008910:	f3bf 8f4f 	dsb	sy
 8008914:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008918:	f001 fe56 	bl	800a5c8 <vPortExitCritical>
				return pdPASS;
 800891c:	2301      	movs	r3, #1
 800891e:	e063      	b.n	80089e8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d103      	bne.n	800892e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008926:	f001 fe4f 	bl	800a5c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800892a:	2300      	movs	r3, #0
 800892c:	e05c      	b.n	80089e8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800892e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008930:	2b00      	cmp	r3, #0
 8008932:	d106      	bne.n	8008942 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008934:	f107 0314 	add.w	r3, r7, #20
 8008938:	4618      	mov	r0, r3
 800893a:	f001 f965 	bl	8009c08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800893e:	2301      	movs	r3, #1
 8008940:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008942:	f001 fe41 	bl	800a5c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008946:	f000 ff1d 	bl	8009784 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800894a:	f001 fe0f 	bl	800a56c <vPortEnterCritical>
 800894e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008950:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008954:	b25b      	sxtb	r3, r3
 8008956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800895a:	d103      	bne.n	8008964 <xQueueGenericSend+0x164>
 800895c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800895e:	2200      	movs	r2, #0
 8008960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008966:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800896a:	b25b      	sxtb	r3, r3
 800896c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008970:	d103      	bne.n	800897a <xQueueGenericSend+0x17a>
 8008972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008974:	2200      	movs	r2, #0
 8008976:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800897a:	f001 fe25 	bl	800a5c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800897e:	1d3a      	adds	r2, r7, #4
 8008980:	f107 0314 	add.w	r3, r7, #20
 8008984:	4611      	mov	r1, r2
 8008986:	4618      	mov	r0, r3
 8008988:	f001 f954 	bl	8009c34 <xTaskCheckForTimeOut>
 800898c:	4603      	mov	r3, r0
 800898e:	2b00      	cmp	r3, #0
 8008990:	d124      	bne.n	80089dc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008992:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008994:	f000 fcbd 	bl	8009312 <prvIsQueueFull>
 8008998:	4603      	mov	r3, r0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d018      	beq.n	80089d0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800899e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a0:	3310      	adds	r3, #16
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	4611      	mov	r1, r2
 80089a6:	4618      	mov	r0, r3
 80089a8:	f001 f8a8 	bl	8009afc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80089ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089ae:	f000 fc48 	bl	8009242 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80089b2:	f000 fef5 	bl	80097a0 <xTaskResumeAll>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f47f af7c 	bne.w	80088b6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80089be:	4b0c      	ldr	r3, [pc, #48]	; (80089f0 <xQueueGenericSend+0x1f0>)
 80089c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089c4:	601a      	str	r2, [r3, #0]
 80089c6:	f3bf 8f4f 	dsb	sy
 80089ca:	f3bf 8f6f 	isb	sy
 80089ce:	e772      	b.n	80088b6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80089d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089d2:	f000 fc36 	bl	8009242 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089d6:	f000 fee3 	bl	80097a0 <xTaskResumeAll>
 80089da:	e76c      	b.n	80088b6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80089dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089de:	f000 fc30 	bl	8009242 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089e2:	f000 fedd 	bl	80097a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80089e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3738      	adds	r7, #56	; 0x38
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}
 80089f0:	e000ed04 	.word	0xe000ed04

080089f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b08e      	sub	sp, #56	; 0x38
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
 8008a00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d109      	bne.n	8008a20 <xQueueGenericSendFromISR+0x2c>
 8008a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a10:	f383 8811 	msr	BASEPRI, r3
 8008a14:	f3bf 8f6f 	isb	sy
 8008a18:	f3bf 8f4f 	dsb	sy
 8008a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8008a1e:	e7fe      	b.n	8008a1e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d103      	bne.n	8008a2e <xQueueGenericSendFromISR+0x3a>
 8008a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d101      	bne.n	8008a32 <xQueueGenericSendFromISR+0x3e>
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e000      	b.n	8008a34 <xQueueGenericSendFromISR+0x40>
 8008a32:	2300      	movs	r3, #0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d109      	bne.n	8008a4c <xQueueGenericSendFromISR+0x58>
 8008a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3c:	f383 8811 	msr	BASEPRI, r3
 8008a40:	f3bf 8f6f 	isb	sy
 8008a44:	f3bf 8f4f 	dsb	sy
 8008a48:	623b      	str	r3, [r7, #32]
 8008a4a:	e7fe      	b.n	8008a4a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	d103      	bne.n	8008a5a <xQueueGenericSendFromISR+0x66>
 8008a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d101      	bne.n	8008a5e <xQueueGenericSendFromISR+0x6a>
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e000      	b.n	8008a60 <xQueueGenericSendFromISR+0x6c>
 8008a5e:	2300      	movs	r3, #0
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d109      	bne.n	8008a78 <xQueueGenericSendFromISR+0x84>
 8008a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a68:	f383 8811 	msr	BASEPRI, r3
 8008a6c:	f3bf 8f6f 	isb	sy
 8008a70:	f3bf 8f4f 	dsb	sy
 8008a74:	61fb      	str	r3, [r7, #28]
 8008a76:	e7fe      	b.n	8008a76 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a78:	f001 fe54 	bl	800a724 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008a7c:	f3ef 8211 	mrs	r2, BASEPRI
 8008a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a84:	f383 8811 	msr	BASEPRI, r3
 8008a88:	f3bf 8f6f 	isb	sy
 8008a8c:	f3bf 8f4f 	dsb	sy
 8008a90:	61ba      	str	r2, [r7, #24]
 8008a92:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008a94:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a96:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d302      	bcc.n	8008aaa <xQueueGenericSendFromISR+0xb6>
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	d12c      	bne.n	8008b04 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ab0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ab4:	683a      	ldr	r2, [r7, #0]
 8008ab6:	68b9      	ldr	r1, [r7, #8]
 8008ab8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008aba:	f000 fb32 	bl	8009122 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008abe:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac6:	d112      	bne.n	8008aee <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d016      	beq.n	8008afe <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad2:	3324      	adds	r3, #36	; 0x24
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f001 f835 	bl	8009b44 <xTaskRemoveFromEventList>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00e      	beq.n	8008afe <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00b      	beq.n	8008afe <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	601a      	str	r2, [r3, #0]
 8008aec:	e007      	b.n	8008afe <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008aee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008af2:	3301      	adds	r3, #1
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	b25a      	sxtb	r2, r3
 8008af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008afe:	2301      	movs	r3, #1
 8008b00:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008b02:	e001      	b.n	8008b08 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008b04:	2300      	movs	r3, #0
 8008b06:	637b      	str	r3, [r7, #52]	; 0x34
 8008b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3738      	adds	r7, #56	; 0x38
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b08e      	sub	sp, #56	; 0x38
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
 8008b24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d109      	bne.n	8008b44 <xQueueGiveFromISR+0x28>
	__asm volatile
 8008b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	623b      	str	r3, [r7, #32]
 8008b42:	e7fe      	b.n	8008b42 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d009      	beq.n	8008b60 <xQueueGiveFromISR+0x44>
 8008b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b50:	f383 8811 	msr	BASEPRI, r3
 8008b54:	f3bf 8f6f 	isb	sy
 8008b58:	f3bf 8f4f 	dsb	sy
 8008b5c:	61fb      	str	r3, [r7, #28]
 8008b5e:	e7fe      	b.n	8008b5e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d103      	bne.n	8008b70 <xQueueGiveFromISR+0x54>
 8008b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d101      	bne.n	8008b74 <xQueueGiveFromISR+0x58>
 8008b70:	2301      	movs	r3, #1
 8008b72:	e000      	b.n	8008b76 <xQueueGiveFromISR+0x5a>
 8008b74:	2300      	movs	r3, #0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d109      	bne.n	8008b8e <xQueueGiveFromISR+0x72>
 8008b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7e:	f383 8811 	msr	BASEPRI, r3
 8008b82:	f3bf 8f6f 	isb	sy
 8008b86:	f3bf 8f4f 	dsb	sy
 8008b8a:	61bb      	str	r3, [r7, #24]
 8008b8c:	e7fe      	b.n	8008b8c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b8e:	f001 fdc9 	bl	800a724 <vPortValidateInterruptPriority>
	__asm volatile
 8008b92:	f3ef 8211 	mrs	r2, BASEPRI
 8008b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9a:	f383 8811 	msr	BASEPRI, r3
 8008b9e:	f3bf 8f6f 	isb	sy
 8008ba2:	f3bf 8f4f 	dsb	sy
 8008ba6:	617a      	str	r2, [r7, #20]
 8008ba8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008baa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008bac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d22b      	bcs.n	8008c16 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bca:	1c5a      	adds	r2, r3, #1
 8008bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bce:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008bd0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bd8:	d112      	bne.n	8008c00 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d016      	beq.n	8008c10 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be4:	3324      	adds	r3, #36	; 0x24
 8008be6:	4618      	mov	r0, r3
 8008be8:	f000 ffac 	bl	8009b44 <xTaskRemoveFromEventList>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d00e      	beq.n	8008c10 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d00b      	beq.n	8008c10 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	601a      	str	r2, [r3, #0]
 8008bfe:	e007      	b.n	8008c10 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c04:	3301      	adds	r3, #1
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	b25a      	sxtb	r2, r3
 8008c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008c10:	2301      	movs	r3, #1
 8008c12:	637b      	str	r3, [r7, #52]	; 0x34
 8008c14:	e001      	b.n	8008c1a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008c16:	2300      	movs	r3, #0
 8008c18:	637b      	str	r3, [r7, #52]	; 0x34
 8008c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3738      	adds	r7, #56	; 0x38
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
	...

08008c30 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b08c      	sub	sp, #48	; 0x30
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d109      	bne.n	8008c5e <xQueueReceive+0x2e>
	__asm volatile
 8008c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c4e:	f383 8811 	msr	BASEPRI, r3
 8008c52:	f3bf 8f6f 	isb	sy
 8008c56:	f3bf 8f4f 	dsb	sy
 8008c5a:	623b      	str	r3, [r7, #32]
 8008c5c:	e7fe      	b.n	8008c5c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d103      	bne.n	8008c6c <xQueueReceive+0x3c>
 8008c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d101      	bne.n	8008c70 <xQueueReceive+0x40>
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e000      	b.n	8008c72 <xQueueReceive+0x42>
 8008c70:	2300      	movs	r3, #0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d109      	bne.n	8008c8a <xQueueReceive+0x5a>
 8008c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7a:	f383 8811 	msr	BASEPRI, r3
 8008c7e:	f3bf 8f6f 	isb	sy
 8008c82:	f3bf 8f4f 	dsb	sy
 8008c86:	61fb      	str	r3, [r7, #28]
 8008c88:	e7fe      	b.n	8008c88 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c8a:	f001 f911 	bl	8009eb0 <xTaskGetSchedulerState>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d102      	bne.n	8008c9a <xQueueReceive+0x6a>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d101      	bne.n	8008c9e <xQueueReceive+0x6e>
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e000      	b.n	8008ca0 <xQueueReceive+0x70>
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d109      	bne.n	8008cb8 <xQueueReceive+0x88>
 8008ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca8:	f383 8811 	msr	BASEPRI, r3
 8008cac:	f3bf 8f6f 	isb	sy
 8008cb0:	f3bf 8f4f 	dsb	sy
 8008cb4:	61bb      	str	r3, [r7, #24]
 8008cb6:	e7fe      	b.n	8008cb6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008cb8:	f001 fc58 	bl	800a56c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d01f      	beq.n	8008d08 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008cc8:	68b9      	ldr	r1, [r7, #8]
 8008cca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ccc:	f000 fa93 	bl	80091f6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd2:	1e5a      	subs	r2, r3, #1
 8008cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cda:	691b      	ldr	r3, [r3, #16]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00f      	beq.n	8008d00 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce2:	3310      	adds	r3, #16
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f000 ff2d 	bl	8009b44 <xTaskRemoveFromEventList>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d007      	beq.n	8008d00 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008cf0:	4b3c      	ldr	r3, [pc, #240]	; (8008de4 <xQueueReceive+0x1b4>)
 8008cf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cf6:	601a      	str	r2, [r3, #0]
 8008cf8:	f3bf 8f4f 	dsb	sy
 8008cfc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008d00:	f001 fc62 	bl	800a5c8 <vPortExitCritical>
				return pdPASS;
 8008d04:	2301      	movs	r3, #1
 8008d06:	e069      	b.n	8008ddc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d103      	bne.n	8008d16 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d0e:	f001 fc5b 	bl	800a5c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008d12:	2300      	movs	r3, #0
 8008d14:	e062      	b.n	8008ddc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d106      	bne.n	8008d2a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d1c:	f107 0310 	add.w	r3, r7, #16
 8008d20:	4618      	mov	r0, r3
 8008d22:	f000 ff71 	bl	8009c08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d26:	2301      	movs	r3, #1
 8008d28:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d2a:	f001 fc4d 	bl	800a5c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d2e:	f000 fd29 	bl	8009784 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d32:	f001 fc1b 	bl	800a56c <vPortEnterCritical>
 8008d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d3c:	b25b      	sxtb	r3, r3
 8008d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d42:	d103      	bne.n	8008d4c <xQueueReceive+0x11c>
 8008d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d46:	2200      	movs	r2, #0
 8008d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d52:	b25b      	sxtb	r3, r3
 8008d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d58:	d103      	bne.n	8008d62 <xQueueReceive+0x132>
 8008d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d62:	f001 fc31 	bl	800a5c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d66:	1d3a      	adds	r2, r7, #4
 8008d68:	f107 0310 	add.w	r3, r7, #16
 8008d6c:	4611      	mov	r1, r2
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f000 ff60 	bl	8009c34 <xTaskCheckForTimeOut>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d123      	bne.n	8008dc2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d7c:	f000 fab3 	bl	80092e6 <prvIsQueueEmpty>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d017      	beq.n	8008db6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d88:	3324      	adds	r3, #36	; 0x24
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	4611      	mov	r1, r2
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f000 feb4 	bl	8009afc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d96:	f000 fa54 	bl	8009242 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d9a:	f000 fd01 	bl	80097a0 <xTaskResumeAll>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d189      	bne.n	8008cb8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8008da4:	4b0f      	ldr	r3, [pc, #60]	; (8008de4 <xQueueReceive+0x1b4>)
 8008da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008daa:	601a      	str	r2, [r3, #0]
 8008dac:	f3bf 8f4f 	dsb	sy
 8008db0:	f3bf 8f6f 	isb	sy
 8008db4:	e780      	b.n	8008cb8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008db6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008db8:	f000 fa43 	bl	8009242 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008dbc:	f000 fcf0 	bl	80097a0 <xTaskResumeAll>
 8008dc0:	e77a      	b.n	8008cb8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008dc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dc4:	f000 fa3d 	bl	8009242 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008dc8:	f000 fcea 	bl	80097a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008dcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dce:	f000 fa8a 	bl	80092e6 <prvIsQueueEmpty>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	f43f af6f 	beq.w	8008cb8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008dda:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3730      	adds	r7, #48	; 0x30
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	e000ed04 	.word	0xe000ed04

08008de8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b08e      	sub	sp, #56	; 0x38
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008df2:	2300      	movs	r3, #0
 8008df4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d109      	bne.n	8008e18 <xQueueSemaphoreTake+0x30>
 8008e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e08:	f383 8811 	msr	BASEPRI, r3
 8008e0c:	f3bf 8f6f 	isb	sy
 8008e10:	f3bf 8f4f 	dsb	sy
 8008e14:	623b      	str	r3, [r7, #32]
 8008e16:	e7fe      	b.n	8008e16 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d009      	beq.n	8008e34 <xQueueSemaphoreTake+0x4c>
 8008e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e24:	f383 8811 	msr	BASEPRI, r3
 8008e28:	f3bf 8f6f 	isb	sy
 8008e2c:	f3bf 8f4f 	dsb	sy
 8008e30:	61fb      	str	r3, [r7, #28]
 8008e32:	e7fe      	b.n	8008e32 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e34:	f001 f83c 	bl	8009eb0 <xTaskGetSchedulerState>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d102      	bne.n	8008e44 <xQueueSemaphoreTake+0x5c>
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d101      	bne.n	8008e48 <xQueueSemaphoreTake+0x60>
 8008e44:	2301      	movs	r3, #1
 8008e46:	e000      	b.n	8008e4a <xQueueSemaphoreTake+0x62>
 8008e48:	2300      	movs	r3, #0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d109      	bne.n	8008e62 <xQueueSemaphoreTake+0x7a>
 8008e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e52:	f383 8811 	msr	BASEPRI, r3
 8008e56:	f3bf 8f6f 	isb	sy
 8008e5a:	f3bf 8f4f 	dsb	sy
 8008e5e:	61bb      	str	r3, [r7, #24]
 8008e60:	e7fe      	b.n	8008e60 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e62:	f001 fb83 	bl	800a56c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e6a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d024      	beq.n	8008ebc <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e74:	1e5a      	subs	r2, r3, #1
 8008e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e78:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d104      	bne.n	8008e8c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008e82:	f001 f9cf 	bl	800a224 <pvTaskIncrementMutexHeldCount>
 8008e86:	4602      	mov	r2, r0
 8008e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e8a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e8e:	691b      	ldr	r3, [r3, #16]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d00f      	beq.n	8008eb4 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e96:	3310      	adds	r3, #16
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f000 fe53 	bl	8009b44 <xTaskRemoveFromEventList>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d007      	beq.n	8008eb4 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008ea4:	4b53      	ldr	r3, [pc, #332]	; (8008ff4 <xQueueSemaphoreTake+0x20c>)
 8008ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eaa:	601a      	str	r2, [r3, #0]
 8008eac:	f3bf 8f4f 	dsb	sy
 8008eb0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008eb4:	f001 fb88 	bl	800a5c8 <vPortExitCritical>
				return pdPASS;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e096      	b.n	8008fea <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d110      	bne.n	8008ee4 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d009      	beq.n	8008edc <xQueueSemaphoreTake+0xf4>
 8008ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ecc:	f383 8811 	msr	BASEPRI, r3
 8008ed0:	f3bf 8f6f 	isb	sy
 8008ed4:	f3bf 8f4f 	dsb	sy
 8008ed8:	617b      	str	r3, [r7, #20]
 8008eda:	e7fe      	b.n	8008eda <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008edc:	f001 fb74 	bl	800a5c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	e082      	b.n	8008fea <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d106      	bne.n	8008ef8 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008eea:	f107 030c 	add.w	r3, r7, #12
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f000 fe8a 	bl	8009c08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ef8:	f001 fb66 	bl	800a5c8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008efc:	f000 fc42 	bl	8009784 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f00:	f001 fb34 	bl	800a56c <vPortEnterCritical>
 8008f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f0a:	b25b      	sxtb	r3, r3
 8008f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f10:	d103      	bne.n	8008f1a <xQueueSemaphoreTake+0x132>
 8008f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f14:	2200      	movs	r2, #0
 8008f16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f20:	b25b      	sxtb	r3, r3
 8008f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f26:	d103      	bne.n	8008f30 <xQueueSemaphoreTake+0x148>
 8008f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f30:	f001 fb4a 	bl	800a5c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f34:	463a      	mov	r2, r7
 8008f36:	f107 030c 	add.w	r3, r7, #12
 8008f3a:	4611      	mov	r1, r2
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f000 fe79 	bl	8009c34 <xTaskCheckForTimeOut>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d132      	bne.n	8008fae <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f4a:	f000 f9cc 	bl	80092e6 <prvIsQueueEmpty>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d026      	beq.n	8008fa2 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d109      	bne.n	8008f70 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8008f5c:	f001 fb06 	bl	800a56c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	4618      	mov	r0, r3
 8008f66:	f000 ffc1 	bl	8009eec <xTaskPriorityInherit>
 8008f6a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008f6c:	f001 fb2c 	bl	800a5c8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f72:	3324      	adds	r3, #36	; 0x24
 8008f74:	683a      	ldr	r2, [r7, #0]
 8008f76:	4611      	mov	r1, r2
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f000 fdbf 	bl	8009afc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008f7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f80:	f000 f95f 	bl	8009242 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008f84:	f000 fc0c 	bl	80097a0 <xTaskResumeAll>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	f47f af69 	bne.w	8008e62 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8008f90:	4b18      	ldr	r3, [pc, #96]	; (8008ff4 <xQueueSemaphoreTake+0x20c>)
 8008f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f96:	601a      	str	r2, [r3, #0]
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	f3bf 8f6f 	isb	sy
 8008fa0:	e75f      	b.n	8008e62 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008fa2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fa4:	f000 f94d 	bl	8009242 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008fa8:	f000 fbfa 	bl	80097a0 <xTaskResumeAll>
 8008fac:	e759      	b.n	8008e62 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008fae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fb0:	f000 f947 	bl	8009242 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008fb4:	f000 fbf4 	bl	80097a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008fb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fba:	f000 f994 	bl	80092e6 <prvIsQueueEmpty>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	f43f af4e 	beq.w	8008e62 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d00d      	beq.n	8008fe8 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8008fcc:	f001 face 	bl	800a56c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008fd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fd2:	f000 f88e 	bl	80090f2 <prvGetDisinheritPriorityAfterTimeout>
 8008fd6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f001 f888 	bl	800a0f4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008fe4:	f001 faf0 	bl	800a5c8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008fe8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3738      	adds	r7, #56	; 0x38
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	e000ed04 	.word	0xe000ed04

08008ff8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b08e      	sub	sp, #56	; 0x38
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900a:	2b00      	cmp	r3, #0
 800900c:	d109      	bne.n	8009022 <xQueueReceiveFromISR+0x2a>
 800900e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009012:	f383 8811 	msr	BASEPRI, r3
 8009016:	f3bf 8f6f 	isb	sy
 800901a:	f3bf 8f4f 	dsb	sy
 800901e:	623b      	str	r3, [r7, #32]
 8009020:	e7fe      	b.n	8009020 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d103      	bne.n	8009030 <xQueueReceiveFromISR+0x38>
 8009028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800902c:	2b00      	cmp	r3, #0
 800902e:	d101      	bne.n	8009034 <xQueueReceiveFromISR+0x3c>
 8009030:	2301      	movs	r3, #1
 8009032:	e000      	b.n	8009036 <xQueueReceiveFromISR+0x3e>
 8009034:	2300      	movs	r3, #0
 8009036:	2b00      	cmp	r3, #0
 8009038:	d109      	bne.n	800904e <xQueueReceiveFromISR+0x56>
 800903a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903e:	f383 8811 	msr	BASEPRI, r3
 8009042:	f3bf 8f6f 	isb	sy
 8009046:	f3bf 8f4f 	dsb	sy
 800904a:	61fb      	str	r3, [r7, #28]
 800904c:	e7fe      	b.n	800904c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800904e:	f001 fb69 	bl	800a724 <vPortValidateInterruptPriority>
	__asm volatile
 8009052:	f3ef 8211 	mrs	r2, BASEPRI
 8009056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905a:	f383 8811 	msr	BASEPRI, r3
 800905e:	f3bf 8f6f 	isb	sy
 8009062:	f3bf 8f4f 	dsb	sy
 8009066:	61ba      	str	r2, [r7, #24]
 8009068:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800906a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800906c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800906e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009072:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009076:	2b00      	cmp	r3, #0
 8009078:	d02f      	beq.n	80090da <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800907a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009084:	68b9      	ldr	r1, [r7, #8]
 8009086:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009088:	f000 f8b5 	bl	80091f6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800908c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908e:	1e5a      	subs	r2, r3, #1
 8009090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009092:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009094:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800909c:	d112      	bne.n	80090c4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800909e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a0:	691b      	ldr	r3, [r3, #16]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d016      	beq.n	80090d4 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a8:	3310      	adds	r3, #16
 80090aa:	4618      	mov	r0, r3
 80090ac:	f000 fd4a 	bl	8009b44 <xTaskRemoveFromEventList>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d00e      	beq.n	80090d4 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d00b      	beq.n	80090d4 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2201      	movs	r2, #1
 80090c0:	601a      	str	r2, [r3, #0]
 80090c2:	e007      	b.n	80090d4 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80090c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090c8:	3301      	adds	r3, #1
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	b25a      	sxtb	r2, r3
 80090ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80090d4:	2301      	movs	r3, #1
 80090d6:	637b      	str	r3, [r7, #52]	; 0x34
 80090d8:	e001      	b.n	80090de <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80090da:	2300      	movs	r3, #0
 80090dc:	637b      	str	r3, [r7, #52]	; 0x34
 80090de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80090e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3738      	adds	r7, #56	; 0x38
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80090f2:	b480      	push	{r7}
 80090f4:	b085      	sub	sp, #20
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d006      	beq.n	8009110 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f1c3 0307 	rsb	r3, r3, #7
 800910c:	60fb      	str	r3, [r7, #12]
 800910e:	e001      	b.n	8009114 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009110:	2300      	movs	r3, #0
 8009112:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009114:	68fb      	ldr	r3, [r7, #12]
	}
 8009116:	4618      	mov	r0, r3
 8009118:	3714      	adds	r7, #20
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr

08009122 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009122:	b580      	push	{r7, lr}
 8009124:	b086      	sub	sp, #24
 8009126:	af00      	add	r7, sp, #0
 8009128:	60f8      	str	r0, [r7, #12]
 800912a:	60b9      	str	r1, [r7, #8]
 800912c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800912e:	2300      	movs	r3, #0
 8009130:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009136:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800913c:	2b00      	cmp	r3, #0
 800913e:	d10d      	bne.n	800915c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d14d      	bne.n	80091e4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	4618      	mov	r0, r3
 800914e:	f000 ff4d 	bl	8009fec <xTaskPriorityDisinherit>
 8009152:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2200      	movs	r2, #0
 8009158:	609a      	str	r2, [r3, #8]
 800915a:	e043      	b.n	80091e4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d119      	bne.n	8009196 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	6858      	ldr	r0, [r3, #4]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800916a:	461a      	mov	r2, r3
 800916c:	68b9      	ldr	r1, [r7, #8]
 800916e:	f002 f829 	bl	800b1c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	685a      	ldr	r2, [r3, #4]
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800917a:	441a      	add	r2, r3
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	685a      	ldr	r2, [r3, #4]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	429a      	cmp	r2, r3
 800918a:	d32b      	bcc.n	80091e4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	605a      	str	r2, [r3, #4]
 8009194:	e026      	b.n	80091e4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	68d8      	ldr	r0, [r3, #12]
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800919e:	461a      	mov	r2, r3
 80091a0:	68b9      	ldr	r1, [r7, #8]
 80091a2:	f002 f80f 	bl	800b1c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	68da      	ldr	r2, [r3, #12]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ae:	425b      	negs	r3, r3
 80091b0:	441a      	add	r2, r3
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	68da      	ldr	r2, [r3, #12]
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d207      	bcs.n	80091d2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	689a      	ldr	r2, [r3, #8]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ca:	425b      	negs	r3, r3
 80091cc:	441a      	add	r2, r3
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	d105      	bne.n	80091e4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d002      	beq.n	80091e4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	3b01      	subs	r3, #1
 80091e2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	1c5a      	adds	r2, r3, #1
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80091ec:	697b      	ldr	r3, [r7, #20]
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3718      	adds	r7, #24
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}

080091f6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80091f6:	b580      	push	{r7, lr}
 80091f8:	b082      	sub	sp, #8
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
 80091fe:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009204:	2b00      	cmp	r3, #0
 8009206:	d018      	beq.n	800923a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	68da      	ldr	r2, [r3, #12]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009210:	441a      	add	r2, r3
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	68da      	ldr	r2, [r3, #12]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	429a      	cmp	r2, r3
 8009220:	d303      	bcc.n	800922a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	68d9      	ldr	r1, [r3, #12]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009232:	461a      	mov	r2, r3
 8009234:	6838      	ldr	r0, [r7, #0]
 8009236:	f001 ffc5 	bl	800b1c4 <memcpy>
	}
}
 800923a:	bf00      	nop
 800923c:	3708      	adds	r7, #8
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}

08009242 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b084      	sub	sp, #16
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800924a:	f001 f98f 	bl	800a56c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009254:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009256:	e011      	b.n	800927c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800925c:	2b00      	cmp	r3, #0
 800925e:	d012      	beq.n	8009286 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	3324      	adds	r3, #36	; 0x24
 8009264:	4618      	mov	r0, r3
 8009266:	f000 fc6d 	bl	8009b44 <xTaskRemoveFromEventList>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d001      	beq.n	8009274 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009270:	f000 fd40 	bl	8009cf4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009274:	7bfb      	ldrb	r3, [r7, #15]
 8009276:	3b01      	subs	r3, #1
 8009278:	b2db      	uxtb	r3, r3
 800927a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800927c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009280:	2b00      	cmp	r3, #0
 8009282:	dce9      	bgt.n	8009258 <prvUnlockQueue+0x16>
 8009284:	e000      	b.n	8009288 <prvUnlockQueue+0x46>
					break;
 8009286:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	22ff      	movs	r2, #255	; 0xff
 800928c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009290:	f001 f99a 	bl	800a5c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009294:	f001 f96a 	bl	800a56c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800929e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80092a0:	e011      	b.n	80092c6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	691b      	ldr	r3, [r3, #16]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d012      	beq.n	80092d0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	3310      	adds	r3, #16
 80092ae:	4618      	mov	r0, r3
 80092b0:	f000 fc48 	bl	8009b44 <xTaskRemoveFromEventList>
 80092b4:	4603      	mov	r3, r0
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d001      	beq.n	80092be <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80092ba:	f000 fd1b 	bl	8009cf4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80092be:	7bbb      	ldrb	r3, [r7, #14]
 80092c0:	3b01      	subs	r3, #1
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80092c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	dce9      	bgt.n	80092a2 <prvUnlockQueue+0x60>
 80092ce:	e000      	b.n	80092d2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80092d0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	22ff      	movs	r2, #255	; 0xff
 80092d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80092da:	f001 f975 	bl	800a5c8 <vPortExitCritical>
}
 80092de:	bf00      	nop
 80092e0:	3710      	adds	r7, #16
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}

080092e6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b084      	sub	sp, #16
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80092ee:	f001 f93d 	bl	800a56c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d102      	bne.n	8009300 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80092fa:	2301      	movs	r3, #1
 80092fc:	60fb      	str	r3, [r7, #12]
 80092fe:	e001      	b.n	8009304 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009300:	2300      	movs	r3, #0
 8009302:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009304:	f001 f960 	bl	800a5c8 <vPortExitCritical>

	return xReturn;
 8009308:	68fb      	ldr	r3, [r7, #12]
}
 800930a:	4618      	mov	r0, r3
 800930c:	3710      	adds	r7, #16
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}

08009312 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b084      	sub	sp, #16
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800931a:	f001 f927 	bl	800a56c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009326:	429a      	cmp	r2, r3
 8009328:	d102      	bne.n	8009330 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800932a:	2301      	movs	r3, #1
 800932c:	60fb      	str	r3, [r7, #12]
 800932e:	e001      	b.n	8009334 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009330:	2300      	movs	r3, #0
 8009332:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009334:	f001 f948 	bl	800a5c8 <vPortExitCritical>

	return xReturn;
 8009338:	68fb      	ldr	r3, [r7, #12]
}
 800933a:	4618      	mov	r0, r3
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009342:	b580      	push	{r7, lr}
 8009344:	b08e      	sub	sp, #56	; 0x38
 8009346:	af04      	add	r7, sp, #16
 8009348:	60f8      	str	r0, [r7, #12]
 800934a:	60b9      	str	r1, [r7, #8]
 800934c:	607a      	str	r2, [r7, #4]
 800934e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009352:	2b00      	cmp	r3, #0
 8009354:	d109      	bne.n	800936a <xTaskCreateStatic+0x28>
	__asm volatile
 8009356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800935a:	f383 8811 	msr	BASEPRI, r3
 800935e:	f3bf 8f6f 	isb	sy
 8009362:	f3bf 8f4f 	dsb	sy
 8009366:	623b      	str	r3, [r7, #32]
 8009368:	e7fe      	b.n	8009368 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800936a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936c:	2b00      	cmp	r3, #0
 800936e:	d109      	bne.n	8009384 <xTaskCreateStatic+0x42>
 8009370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009374:	f383 8811 	msr	BASEPRI, r3
 8009378:	f3bf 8f6f 	isb	sy
 800937c:	f3bf 8f4f 	dsb	sy
 8009380:	61fb      	str	r3, [r7, #28]
 8009382:	e7fe      	b.n	8009382 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009384:	2354      	movs	r3, #84	; 0x54
 8009386:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	2b54      	cmp	r3, #84	; 0x54
 800938c:	d009      	beq.n	80093a2 <xTaskCreateStatic+0x60>
 800938e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009392:	f383 8811 	msr	BASEPRI, r3
 8009396:	f3bf 8f6f 	isb	sy
 800939a:	f3bf 8f4f 	dsb	sy
 800939e:	61bb      	str	r3, [r7, #24]
 80093a0:	e7fe      	b.n	80093a0 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80093a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80093a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d01e      	beq.n	80093e8 <xTaskCreateStatic+0xa6>
 80093aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d01b      	beq.n	80093e8 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80093b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80093b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80093ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093bc:	2202      	movs	r2, #2
 80093be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80093c2:	2300      	movs	r3, #0
 80093c4:	9303      	str	r3, [sp, #12]
 80093c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c8:	9302      	str	r3, [sp, #8]
 80093ca:	f107 0314 	add.w	r3, r7, #20
 80093ce:	9301      	str	r3, [sp, #4]
 80093d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d2:	9300      	str	r3, [sp, #0]
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	68b9      	ldr	r1, [r7, #8]
 80093da:	68f8      	ldr	r0, [r7, #12]
 80093dc:	f000 f850 	bl	8009480 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80093e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093e2:	f000 f8d3 	bl	800958c <prvAddNewTaskToReadyList>
 80093e6:	e001      	b.n	80093ec <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80093e8:	2300      	movs	r3, #0
 80093ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80093ec:	697b      	ldr	r3, [r7, #20]
	}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3728      	adds	r7, #40	; 0x28
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b08c      	sub	sp, #48	; 0x30
 80093fa:	af04      	add	r7, sp, #16
 80093fc:	60f8      	str	r0, [r7, #12]
 80093fe:	60b9      	str	r1, [r7, #8]
 8009400:	603b      	str	r3, [r7, #0]
 8009402:	4613      	mov	r3, r2
 8009404:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009406:	88fb      	ldrh	r3, [r7, #6]
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	4618      	mov	r0, r3
 800940c:	f001 f9c8 	bl	800a7a0 <pvPortMalloc>
 8009410:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d00e      	beq.n	8009436 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009418:	2054      	movs	r0, #84	; 0x54
 800941a:	f001 f9c1 	bl	800a7a0 <pvPortMalloc>
 800941e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d003      	beq.n	800942e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009426:	69fb      	ldr	r3, [r7, #28]
 8009428:	697a      	ldr	r2, [r7, #20]
 800942a:	631a      	str	r2, [r3, #48]	; 0x30
 800942c:	e005      	b.n	800943a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800942e:	6978      	ldr	r0, [r7, #20]
 8009430:	f001 fa78 	bl	800a924 <vPortFree>
 8009434:	e001      	b.n	800943a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009436:	2300      	movs	r3, #0
 8009438:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800943a:	69fb      	ldr	r3, [r7, #28]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d017      	beq.n	8009470 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009440:	69fb      	ldr	r3, [r7, #28]
 8009442:	2200      	movs	r2, #0
 8009444:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009448:	88fa      	ldrh	r2, [r7, #6]
 800944a:	2300      	movs	r3, #0
 800944c:	9303      	str	r3, [sp, #12]
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	9302      	str	r3, [sp, #8]
 8009452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009454:	9301      	str	r3, [sp, #4]
 8009456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009458:	9300      	str	r3, [sp, #0]
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	68b9      	ldr	r1, [r7, #8]
 800945e:	68f8      	ldr	r0, [r7, #12]
 8009460:	f000 f80e 	bl	8009480 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009464:	69f8      	ldr	r0, [r7, #28]
 8009466:	f000 f891 	bl	800958c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800946a:	2301      	movs	r3, #1
 800946c:	61bb      	str	r3, [r7, #24]
 800946e:	e002      	b.n	8009476 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009470:	f04f 33ff 	mov.w	r3, #4294967295
 8009474:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009476:	69bb      	ldr	r3, [r7, #24]
	}
 8009478:	4618      	mov	r0, r3
 800947a:	3720      	adds	r7, #32
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b088      	sub	sp, #32
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	60b9      	str	r1, [r7, #8]
 800948a:	607a      	str	r2, [r7, #4]
 800948c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800948e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009498:	3b01      	subs	r3, #1
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	4413      	add	r3, r2
 800949e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	f023 0307 	bic.w	r3, r3, #7
 80094a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80094a8:	69bb      	ldr	r3, [r7, #24]
 80094aa:	f003 0307 	and.w	r3, r3, #7
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d009      	beq.n	80094c6 <prvInitialiseNewTask+0x46>
 80094b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b6:	f383 8811 	msr	BASEPRI, r3
 80094ba:	f3bf 8f6f 	isb	sy
 80094be:	f3bf 8f4f 	dsb	sy
 80094c2:	617b      	str	r3, [r7, #20]
 80094c4:	e7fe      	b.n	80094c4 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d01f      	beq.n	800950c <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094cc:	2300      	movs	r3, #0
 80094ce:	61fb      	str	r3, [r7, #28]
 80094d0:	e012      	b.n	80094f8 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80094d2:	68ba      	ldr	r2, [r7, #8]
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	4413      	add	r3, r2
 80094d8:	7819      	ldrb	r1, [r3, #0]
 80094da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094dc:	69fb      	ldr	r3, [r7, #28]
 80094de:	4413      	add	r3, r2
 80094e0:	3334      	adds	r3, #52	; 0x34
 80094e2:	460a      	mov	r2, r1
 80094e4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80094e6:	68ba      	ldr	r2, [r7, #8]
 80094e8:	69fb      	ldr	r3, [r7, #28]
 80094ea:	4413      	add	r3, r2
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d006      	beq.n	8009500 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	3301      	adds	r3, #1
 80094f6:	61fb      	str	r3, [r7, #28]
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	2b0f      	cmp	r3, #15
 80094fc:	d9e9      	bls.n	80094d2 <prvInitialiseNewTask+0x52>
 80094fe:	e000      	b.n	8009502 <prvInitialiseNewTask+0x82>
			{
				break;
 8009500:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009504:	2200      	movs	r2, #0
 8009506:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800950a:	e003      	b.n	8009514 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800950c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800950e:	2200      	movs	r2, #0
 8009510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009516:	2b06      	cmp	r3, #6
 8009518:	d901      	bls.n	800951e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800951a:	2306      	movs	r3, #6
 800951c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800951e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009520:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009522:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009526:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009528:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800952a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952c:	2200      	movs	r2, #0
 800952e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009532:	3304      	adds	r3, #4
 8009534:	4618      	mov	r0, r3
 8009536:	f7fe ff95 	bl	8008464 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800953a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953c:	3318      	adds	r3, #24
 800953e:	4618      	mov	r0, r3
 8009540:	f7fe ff90 	bl	8008464 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009546:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009548:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800954a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800954c:	f1c3 0207 	rsb	r2, r3, #7
 8009550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009552:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009556:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009558:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800955a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800955c:	2200      	movs	r2, #0
 800955e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009562:	2200      	movs	r2, #0
 8009564:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009568:	683a      	ldr	r2, [r7, #0]
 800956a:	68f9      	ldr	r1, [r7, #12]
 800956c:	69b8      	ldr	r0, [r7, #24]
 800956e:	f000 fed3 	bl	800a318 <pxPortInitialiseStack>
 8009572:	4602      	mov	r2, r0
 8009574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009576:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800957a:	2b00      	cmp	r3, #0
 800957c:	d002      	beq.n	8009584 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800957e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009582:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009584:	bf00      	nop
 8009586:	3720      	adds	r7, #32
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009594:	f000 ffea 	bl	800a56c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009598:	4b2a      	ldr	r3, [pc, #168]	; (8009644 <prvAddNewTaskToReadyList+0xb8>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	3301      	adds	r3, #1
 800959e:	4a29      	ldr	r2, [pc, #164]	; (8009644 <prvAddNewTaskToReadyList+0xb8>)
 80095a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80095a2:	4b29      	ldr	r3, [pc, #164]	; (8009648 <prvAddNewTaskToReadyList+0xbc>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d109      	bne.n	80095be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80095aa:	4a27      	ldr	r2, [pc, #156]	; (8009648 <prvAddNewTaskToReadyList+0xbc>)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80095b0:	4b24      	ldr	r3, [pc, #144]	; (8009644 <prvAddNewTaskToReadyList+0xb8>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d110      	bne.n	80095da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80095b8:	f000 fbc0 	bl	8009d3c <prvInitialiseTaskLists>
 80095bc:	e00d      	b.n	80095da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80095be:	4b23      	ldr	r3, [pc, #140]	; (800964c <prvAddNewTaskToReadyList+0xc0>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d109      	bne.n	80095da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80095c6:	4b20      	ldr	r3, [pc, #128]	; (8009648 <prvAddNewTaskToReadyList+0xbc>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d802      	bhi.n	80095da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80095d4:	4a1c      	ldr	r2, [pc, #112]	; (8009648 <prvAddNewTaskToReadyList+0xbc>)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80095da:	4b1d      	ldr	r3, [pc, #116]	; (8009650 <prvAddNewTaskToReadyList+0xc4>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	3301      	adds	r3, #1
 80095e0:	4a1b      	ldr	r2, [pc, #108]	; (8009650 <prvAddNewTaskToReadyList+0xc4>)
 80095e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e8:	2201      	movs	r2, #1
 80095ea:	409a      	lsls	r2, r3
 80095ec:	4b19      	ldr	r3, [pc, #100]	; (8009654 <prvAddNewTaskToReadyList+0xc8>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4313      	orrs	r3, r2
 80095f2:	4a18      	ldr	r2, [pc, #96]	; (8009654 <prvAddNewTaskToReadyList+0xc8>)
 80095f4:	6013      	str	r3, [r2, #0]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095fa:	4613      	mov	r3, r2
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	4413      	add	r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	4a15      	ldr	r2, [pc, #84]	; (8009658 <prvAddNewTaskToReadyList+0xcc>)
 8009604:	441a      	add	r2, r3
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	3304      	adds	r3, #4
 800960a:	4619      	mov	r1, r3
 800960c:	4610      	mov	r0, r2
 800960e:	f7fe ff36 	bl	800847e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009612:	f000 ffd9 	bl	800a5c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009616:	4b0d      	ldr	r3, [pc, #52]	; (800964c <prvAddNewTaskToReadyList+0xc0>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d00e      	beq.n	800963c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800961e:	4b0a      	ldr	r3, [pc, #40]	; (8009648 <prvAddNewTaskToReadyList+0xbc>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009628:	429a      	cmp	r2, r3
 800962a:	d207      	bcs.n	800963c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800962c:	4b0b      	ldr	r3, [pc, #44]	; (800965c <prvAddNewTaskToReadyList+0xd0>)
 800962e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009632:	601a      	str	r2, [r3, #0]
 8009634:	f3bf 8f4f 	dsb	sy
 8009638:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800963c:	bf00      	nop
 800963e:	3708      	adds	r7, #8
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	20000414 	.word	0x20000414
 8009648:	20000314 	.word	0x20000314
 800964c:	20000420 	.word	0x20000420
 8009650:	20000430 	.word	0x20000430
 8009654:	2000041c 	.word	0x2000041c
 8009658:	20000318 	.word	0x20000318
 800965c:	e000ed04 	.word	0xe000ed04

08009660 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009668:	2300      	movs	r3, #0
 800966a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d016      	beq.n	80096a0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009672:	4b13      	ldr	r3, [pc, #76]	; (80096c0 <vTaskDelay+0x60>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d009      	beq.n	800968e <vTaskDelay+0x2e>
 800967a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800967e:	f383 8811 	msr	BASEPRI, r3
 8009682:	f3bf 8f6f 	isb	sy
 8009686:	f3bf 8f4f 	dsb	sy
 800968a:	60bb      	str	r3, [r7, #8]
 800968c:	e7fe      	b.n	800968c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800968e:	f000 f879 	bl	8009784 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009692:	2100      	movs	r1, #0
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 fdd9 	bl	800a24c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800969a:	f000 f881 	bl	80097a0 <xTaskResumeAll>
 800969e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d107      	bne.n	80096b6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80096a6:	4b07      	ldr	r3, [pc, #28]	; (80096c4 <vTaskDelay+0x64>)
 80096a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096ac:	601a      	str	r2, [r3, #0]
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80096b6:	bf00      	nop
 80096b8:	3710      	adds	r7, #16
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	2000043c 	.word	0x2000043c
 80096c4:	e000ed04 	.word	0xe000ed04

080096c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b08a      	sub	sp, #40	; 0x28
 80096cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80096ce:	2300      	movs	r3, #0
 80096d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80096d2:	2300      	movs	r3, #0
 80096d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80096d6:	463a      	mov	r2, r7
 80096d8:	1d39      	adds	r1, r7, #4
 80096da:	f107 0308 	add.w	r3, r7, #8
 80096de:	4618      	mov	r0, r3
 80096e0:	f7f7 f93a 	bl	8000958 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80096e4:	6839      	ldr	r1, [r7, #0]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	68ba      	ldr	r2, [r7, #8]
 80096ea:	9202      	str	r2, [sp, #8]
 80096ec:	9301      	str	r3, [sp, #4]
 80096ee:	2300      	movs	r3, #0
 80096f0:	9300      	str	r3, [sp, #0]
 80096f2:	2300      	movs	r3, #0
 80096f4:	460a      	mov	r2, r1
 80096f6:	491d      	ldr	r1, [pc, #116]	; (800976c <vTaskStartScheduler+0xa4>)
 80096f8:	481d      	ldr	r0, [pc, #116]	; (8009770 <vTaskStartScheduler+0xa8>)
 80096fa:	f7ff fe22 	bl	8009342 <xTaskCreateStatic>
 80096fe:	4602      	mov	r2, r0
 8009700:	4b1c      	ldr	r3, [pc, #112]	; (8009774 <vTaskStartScheduler+0xac>)
 8009702:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009704:	4b1b      	ldr	r3, [pc, #108]	; (8009774 <vTaskStartScheduler+0xac>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d002      	beq.n	8009712 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800970c:	2301      	movs	r3, #1
 800970e:	617b      	str	r3, [r7, #20]
 8009710:	e001      	b.n	8009716 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009712:	2300      	movs	r3, #0
 8009714:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	2b01      	cmp	r3, #1
 800971a:	d115      	bne.n	8009748 <vTaskStartScheduler+0x80>
 800971c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009720:	f383 8811 	msr	BASEPRI, r3
 8009724:	f3bf 8f6f 	isb	sy
 8009728:	f3bf 8f4f 	dsb	sy
 800972c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800972e:	4b12      	ldr	r3, [pc, #72]	; (8009778 <vTaskStartScheduler+0xb0>)
 8009730:	f04f 32ff 	mov.w	r2, #4294967295
 8009734:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009736:	4b11      	ldr	r3, [pc, #68]	; (800977c <vTaskStartScheduler+0xb4>)
 8009738:	2201      	movs	r2, #1
 800973a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800973c:	4b10      	ldr	r3, [pc, #64]	; (8009780 <vTaskStartScheduler+0xb8>)
 800973e:	2200      	movs	r2, #0
 8009740:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009742:	f000 fe75 	bl	800a430 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009746:	e00d      	b.n	8009764 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800974e:	d109      	bne.n	8009764 <vTaskStartScheduler+0x9c>
 8009750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009754:	f383 8811 	msr	BASEPRI, r3
 8009758:	f3bf 8f6f 	isb	sy
 800975c:	f3bf 8f4f 	dsb	sy
 8009760:	60fb      	str	r3, [r7, #12]
 8009762:	e7fe      	b.n	8009762 <vTaskStartScheduler+0x9a>
}
 8009764:	bf00      	nop
 8009766:	3718      	adds	r7, #24
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}
 800976c:	0800b434 	.word	0x0800b434
 8009770:	08009d0d 	.word	0x08009d0d
 8009774:	20000438 	.word	0x20000438
 8009778:	20000434 	.word	0x20000434
 800977c:	20000420 	.word	0x20000420
 8009780:	20000418 	.word	0x20000418

08009784 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009784:	b480      	push	{r7}
 8009786:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009788:	4b04      	ldr	r3, [pc, #16]	; (800979c <vTaskSuspendAll+0x18>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	3301      	adds	r3, #1
 800978e:	4a03      	ldr	r2, [pc, #12]	; (800979c <vTaskSuspendAll+0x18>)
 8009790:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009792:	bf00      	nop
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr
 800979c:	2000043c 	.word	0x2000043c

080097a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80097a6:	2300      	movs	r3, #0
 80097a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80097aa:	2300      	movs	r3, #0
 80097ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80097ae:	4b41      	ldr	r3, [pc, #260]	; (80098b4 <xTaskResumeAll+0x114>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d109      	bne.n	80097ca <xTaskResumeAll+0x2a>
 80097b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ba:	f383 8811 	msr	BASEPRI, r3
 80097be:	f3bf 8f6f 	isb	sy
 80097c2:	f3bf 8f4f 	dsb	sy
 80097c6:	603b      	str	r3, [r7, #0]
 80097c8:	e7fe      	b.n	80097c8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80097ca:	f000 fecf 	bl	800a56c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80097ce:	4b39      	ldr	r3, [pc, #228]	; (80098b4 <xTaskResumeAll+0x114>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	3b01      	subs	r3, #1
 80097d4:	4a37      	ldr	r2, [pc, #220]	; (80098b4 <xTaskResumeAll+0x114>)
 80097d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097d8:	4b36      	ldr	r3, [pc, #216]	; (80098b4 <xTaskResumeAll+0x114>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d161      	bne.n	80098a4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80097e0:	4b35      	ldr	r3, [pc, #212]	; (80098b8 <xTaskResumeAll+0x118>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d05d      	beq.n	80098a4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097e8:	e02e      	b.n	8009848 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097ea:	4b34      	ldr	r3, [pc, #208]	; (80098bc <xTaskResumeAll+0x11c>)
 80097ec:	68db      	ldr	r3, [r3, #12]
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	3318      	adds	r3, #24
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7fe fe9e 	bl	8008538 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	3304      	adds	r3, #4
 8009800:	4618      	mov	r0, r3
 8009802:	f7fe fe99 	bl	8008538 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800980a:	2201      	movs	r2, #1
 800980c:	409a      	lsls	r2, r3
 800980e:	4b2c      	ldr	r3, [pc, #176]	; (80098c0 <xTaskResumeAll+0x120>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4313      	orrs	r3, r2
 8009814:	4a2a      	ldr	r2, [pc, #168]	; (80098c0 <xTaskResumeAll+0x120>)
 8009816:	6013      	str	r3, [r2, #0]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800981c:	4613      	mov	r3, r2
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	4413      	add	r3, r2
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	4a27      	ldr	r2, [pc, #156]	; (80098c4 <xTaskResumeAll+0x124>)
 8009826:	441a      	add	r2, r3
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	3304      	adds	r3, #4
 800982c:	4619      	mov	r1, r3
 800982e:	4610      	mov	r0, r2
 8009830:	f7fe fe25 	bl	800847e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009838:	4b23      	ldr	r3, [pc, #140]	; (80098c8 <xTaskResumeAll+0x128>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800983e:	429a      	cmp	r2, r3
 8009840:	d302      	bcc.n	8009848 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8009842:	4b22      	ldr	r3, [pc, #136]	; (80098cc <xTaskResumeAll+0x12c>)
 8009844:	2201      	movs	r2, #1
 8009846:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009848:	4b1c      	ldr	r3, [pc, #112]	; (80098bc <xTaskResumeAll+0x11c>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d1cc      	bne.n	80097ea <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d001      	beq.n	800985a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009856:	f000 fb0b 	bl	8009e70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800985a:	4b1d      	ldr	r3, [pc, #116]	; (80098d0 <xTaskResumeAll+0x130>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d010      	beq.n	8009888 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009866:	f000 f837 	bl	80098d8 <xTaskIncrementTick>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d002      	beq.n	8009876 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8009870:	4b16      	ldr	r3, [pc, #88]	; (80098cc <xTaskResumeAll+0x12c>)
 8009872:	2201      	movs	r2, #1
 8009874:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	3b01      	subs	r3, #1
 800987a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d1f1      	bne.n	8009866 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8009882:	4b13      	ldr	r3, [pc, #76]	; (80098d0 <xTaskResumeAll+0x130>)
 8009884:	2200      	movs	r2, #0
 8009886:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009888:	4b10      	ldr	r3, [pc, #64]	; (80098cc <xTaskResumeAll+0x12c>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d009      	beq.n	80098a4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009890:	2301      	movs	r3, #1
 8009892:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009894:	4b0f      	ldr	r3, [pc, #60]	; (80098d4 <xTaskResumeAll+0x134>)
 8009896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800989a:	601a      	str	r2, [r3, #0]
 800989c:	f3bf 8f4f 	dsb	sy
 80098a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80098a4:	f000 fe90 	bl	800a5c8 <vPortExitCritical>

	return xAlreadyYielded;
 80098a8:	68bb      	ldr	r3, [r7, #8]
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	2000043c 	.word	0x2000043c
 80098b8:	20000414 	.word	0x20000414
 80098bc:	200003d4 	.word	0x200003d4
 80098c0:	2000041c 	.word	0x2000041c
 80098c4:	20000318 	.word	0x20000318
 80098c8:	20000314 	.word	0x20000314
 80098cc:	20000428 	.word	0x20000428
 80098d0:	20000424 	.word	0x20000424
 80098d4:	e000ed04 	.word	0xe000ed04

080098d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b086      	sub	sp, #24
 80098dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80098de:	2300      	movs	r3, #0
 80098e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098e2:	4b4e      	ldr	r3, [pc, #312]	; (8009a1c <xTaskIncrementTick+0x144>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	f040 8087 	bne.w	80099fa <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80098ec:	4b4c      	ldr	r3, [pc, #304]	; (8009a20 <xTaskIncrementTick+0x148>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	3301      	adds	r3, #1
 80098f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80098f4:	4a4a      	ldr	r2, [pc, #296]	; (8009a20 <xTaskIncrementTick+0x148>)
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d11f      	bne.n	8009940 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009900:	4b48      	ldr	r3, [pc, #288]	; (8009a24 <xTaskIncrementTick+0x14c>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d009      	beq.n	800991e <xTaskIncrementTick+0x46>
 800990a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990e:	f383 8811 	msr	BASEPRI, r3
 8009912:	f3bf 8f6f 	isb	sy
 8009916:	f3bf 8f4f 	dsb	sy
 800991a:	603b      	str	r3, [r7, #0]
 800991c:	e7fe      	b.n	800991c <xTaskIncrementTick+0x44>
 800991e:	4b41      	ldr	r3, [pc, #260]	; (8009a24 <xTaskIncrementTick+0x14c>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	60fb      	str	r3, [r7, #12]
 8009924:	4b40      	ldr	r3, [pc, #256]	; (8009a28 <xTaskIncrementTick+0x150>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a3e      	ldr	r2, [pc, #248]	; (8009a24 <xTaskIncrementTick+0x14c>)
 800992a:	6013      	str	r3, [r2, #0]
 800992c:	4a3e      	ldr	r2, [pc, #248]	; (8009a28 <xTaskIncrementTick+0x150>)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6013      	str	r3, [r2, #0]
 8009932:	4b3e      	ldr	r3, [pc, #248]	; (8009a2c <xTaskIncrementTick+0x154>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	3301      	adds	r3, #1
 8009938:	4a3c      	ldr	r2, [pc, #240]	; (8009a2c <xTaskIncrementTick+0x154>)
 800993a:	6013      	str	r3, [r2, #0]
 800993c:	f000 fa98 	bl	8009e70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009940:	4b3b      	ldr	r3, [pc, #236]	; (8009a30 <xTaskIncrementTick+0x158>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	693a      	ldr	r2, [r7, #16]
 8009946:	429a      	cmp	r2, r3
 8009948:	d348      	bcc.n	80099dc <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800994a:	4b36      	ldr	r3, [pc, #216]	; (8009a24 <xTaskIncrementTick+0x14c>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d104      	bne.n	800995e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009954:	4b36      	ldr	r3, [pc, #216]	; (8009a30 <xTaskIncrementTick+0x158>)
 8009956:	f04f 32ff 	mov.w	r2, #4294967295
 800995a:	601a      	str	r2, [r3, #0]
					break;
 800995c:	e03e      	b.n	80099dc <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800995e:	4b31      	ldr	r3, [pc, #196]	; (8009a24 <xTaskIncrementTick+0x14c>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	68db      	ldr	r3, [r3, #12]
 8009966:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800996e:	693a      	ldr	r2, [r7, #16]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	429a      	cmp	r2, r3
 8009974:	d203      	bcs.n	800997e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009976:	4a2e      	ldr	r2, [pc, #184]	; (8009a30 <xTaskIncrementTick+0x158>)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800997c:	e02e      	b.n	80099dc <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	3304      	adds	r3, #4
 8009982:	4618      	mov	r0, r3
 8009984:	f7fe fdd8 	bl	8008538 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800998c:	2b00      	cmp	r3, #0
 800998e:	d004      	beq.n	800999a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	3318      	adds	r3, #24
 8009994:	4618      	mov	r0, r3
 8009996:	f7fe fdcf 	bl	8008538 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800999e:	2201      	movs	r2, #1
 80099a0:	409a      	lsls	r2, r3
 80099a2:	4b24      	ldr	r3, [pc, #144]	; (8009a34 <xTaskIncrementTick+0x15c>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4313      	orrs	r3, r2
 80099a8:	4a22      	ldr	r2, [pc, #136]	; (8009a34 <xTaskIncrementTick+0x15c>)
 80099aa:	6013      	str	r3, [r2, #0]
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099b0:	4613      	mov	r3, r2
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	4413      	add	r3, r2
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	4a1f      	ldr	r2, [pc, #124]	; (8009a38 <xTaskIncrementTick+0x160>)
 80099ba:	441a      	add	r2, r3
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	3304      	adds	r3, #4
 80099c0:	4619      	mov	r1, r3
 80099c2:	4610      	mov	r0, r2
 80099c4:	f7fe fd5b 	bl	800847e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099cc:	4b1b      	ldr	r3, [pc, #108]	; (8009a3c <xTaskIncrementTick+0x164>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d3b9      	bcc.n	800994a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80099d6:	2301      	movs	r3, #1
 80099d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099da:	e7b6      	b.n	800994a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80099dc:	4b17      	ldr	r3, [pc, #92]	; (8009a3c <xTaskIncrementTick+0x164>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099e2:	4915      	ldr	r1, [pc, #84]	; (8009a38 <xTaskIncrementTick+0x160>)
 80099e4:	4613      	mov	r3, r2
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	4413      	add	r3, r2
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	440b      	add	r3, r1
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d907      	bls.n	8009a04 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80099f4:	2301      	movs	r3, #1
 80099f6:	617b      	str	r3, [r7, #20]
 80099f8:	e004      	b.n	8009a04 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80099fa:	4b11      	ldr	r3, [pc, #68]	; (8009a40 <xTaskIncrementTick+0x168>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	3301      	adds	r3, #1
 8009a00:	4a0f      	ldr	r2, [pc, #60]	; (8009a40 <xTaskIncrementTick+0x168>)
 8009a02:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009a04:	4b0f      	ldr	r3, [pc, #60]	; (8009a44 <xTaskIncrementTick+0x16c>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d001      	beq.n	8009a10 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009a10:	697b      	ldr	r3, [r7, #20]
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3718      	adds	r7, #24
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	2000043c 	.word	0x2000043c
 8009a20:	20000418 	.word	0x20000418
 8009a24:	200003cc 	.word	0x200003cc
 8009a28:	200003d0 	.word	0x200003d0
 8009a2c:	2000042c 	.word	0x2000042c
 8009a30:	20000434 	.word	0x20000434
 8009a34:	2000041c 	.word	0x2000041c
 8009a38:	20000318 	.word	0x20000318
 8009a3c:	20000314 	.word	0x20000314
 8009a40:	20000424 	.word	0x20000424
 8009a44:	20000428 	.word	0x20000428

08009a48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b087      	sub	sp, #28
 8009a4c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a4e:	4b26      	ldr	r3, [pc, #152]	; (8009ae8 <vTaskSwitchContext+0xa0>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d003      	beq.n	8009a5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009a56:	4b25      	ldr	r3, [pc, #148]	; (8009aec <vTaskSwitchContext+0xa4>)
 8009a58:	2201      	movs	r2, #1
 8009a5a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009a5c:	e03e      	b.n	8009adc <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8009a5e:	4b23      	ldr	r3, [pc, #140]	; (8009aec <vTaskSwitchContext+0xa4>)
 8009a60:	2200      	movs	r2, #0
 8009a62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a64:	4b22      	ldr	r3, [pc, #136]	; (8009af0 <vTaskSwitchContext+0xa8>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	fab3 f383 	clz	r3, r3
 8009a70:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009a72:	7afb      	ldrb	r3, [r7, #11]
 8009a74:	f1c3 031f 	rsb	r3, r3, #31
 8009a78:	617b      	str	r3, [r7, #20]
 8009a7a:	491e      	ldr	r1, [pc, #120]	; (8009af4 <vTaskSwitchContext+0xac>)
 8009a7c:	697a      	ldr	r2, [r7, #20]
 8009a7e:	4613      	mov	r3, r2
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	4413      	add	r3, r2
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	440b      	add	r3, r1
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d109      	bne.n	8009aa2 <vTaskSwitchContext+0x5a>
	__asm volatile
 8009a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a92:	f383 8811 	msr	BASEPRI, r3
 8009a96:	f3bf 8f6f 	isb	sy
 8009a9a:	f3bf 8f4f 	dsb	sy
 8009a9e:	607b      	str	r3, [r7, #4]
 8009aa0:	e7fe      	b.n	8009aa0 <vTaskSwitchContext+0x58>
 8009aa2:	697a      	ldr	r2, [r7, #20]
 8009aa4:	4613      	mov	r3, r2
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	4413      	add	r3, r2
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	4a11      	ldr	r2, [pc, #68]	; (8009af4 <vTaskSwitchContext+0xac>)
 8009aae:	4413      	add	r3, r2
 8009ab0:	613b      	str	r3, [r7, #16]
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	685a      	ldr	r2, [r3, #4]
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	605a      	str	r2, [r3, #4]
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	685a      	ldr	r2, [r3, #4]
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	3308      	adds	r3, #8
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	d104      	bne.n	8009ad2 <vTaskSwitchContext+0x8a>
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	685a      	ldr	r2, [r3, #4]
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	605a      	str	r2, [r3, #4]
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	68db      	ldr	r3, [r3, #12]
 8009ad8:	4a07      	ldr	r2, [pc, #28]	; (8009af8 <vTaskSwitchContext+0xb0>)
 8009ada:	6013      	str	r3, [r2, #0]
}
 8009adc:	bf00      	nop
 8009ade:	371c      	adds	r7, #28
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr
 8009ae8:	2000043c 	.word	0x2000043c
 8009aec:	20000428 	.word	0x20000428
 8009af0:	2000041c 	.word	0x2000041c
 8009af4:	20000318 	.word	0x20000318
 8009af8:	20000314 	.word	0x20000314

08009afc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d109      	bne.n	8009b20 <vTaskPlaceOnEventList+0x24>
 8009b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b10:	f383 8811 	msr	BASEPRI, r3
 8009b14:	f3bf 8f6f 	isb	sy
 8009b18:	f3bf 8f4f 	dsb	sy
 8009b1c:	60fb      	str	r3, [r7, #12]
 8009b1e:	e7fe      	b.n	8009b1e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b20:	4b07      	ldr	r3, [pc, #28]	; (8009b40 <vTaskPlaceOnEventList+0x44>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	3318      	adds	r3, #24
 8009b26:	4619      	mov	r1, r3
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f7fe fccc 	bl	80084c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b2e:	2101      	movs	r1, #1
 8009b30:	6838      	ldr	r0, [r7, #0]
 8009b32:	f000 fb8b 	bl	800a24c <prvAddCurrentTaskToDelayedList>
}
 8009b36:	bf00      	nop
 8009b38:	3710      	adds	r7, #16
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	20000314 	.word	0x20000314

08009b44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b086      	sub	sp, #24
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	68db      	ldr	r3, [r3, #12]
 8009b52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d109      	bne.n	8009b6e <xTaskRemoveFromEventList+0x2a>
 8009b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b5e:	f383 8811 	msr	BASEPRI, r3
 8009b62:	f3bf 8f6f 	isb	sy
 8009b66:	f3bf 8f4f 	dsb	sy
 8009b6a:	60fb      	str	r3, [r7, #12]
 8009b6c:	e7fe      	b.n	8009b6c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	3318      	adds	r3, #24
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7fe fce0 	bl	8008538 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b78:	4b1d      	ldr	r3, [pc, #116]	; (8009bf0 <xTaskRemoveFromEventList+0xac>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d11c      	bne.n	8009bba <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	3304      	adds	r3, #4
 8009b84:	4618      	mov	r0, r3
 8009b86:	f7fe fcd7 	bl	8008538 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b8e:	2201      	movs	r2, #1
 8009b90:	409a      	lsls	r2, r3
 8009b92:	4b18      	ldr	r3, [pc, #96]	; (8009bf4 <xTaskRemoveFromEventList+0xb0>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4313      	orrs	r3, r2
 8009b98:	4a16      	ldr	r2, [pc, #88]	; (8009bf4 <xTaskRemoveFromEventList+0xb0>)
 8009b9a:	6013      	str	r3, [r2, #0]
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ba0:	4613      	mov	r3, r2
 8009ba2:	009b      	lsls	r3, r3, #2
 8009ba4:	4413      	add	r3, r2
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	4a13      	ldr	r2, [pc, #76]	; (8009bf8 <xTaskRemoveFromEventList+0xb4>)
 8009baa:	441a      	add	r2, r3
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	3304      	adds	r3, #4
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	4610      	mov	r0, r2
 8009bb4:	f7fe fc63 	bl	800847e <vListInsertEnd>
 8009bb8:	e005      	b.n	8009bc6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	3318      	adds	r3, #24
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	480e      	ldr	r0, [pc, #56]	; (8009bfc <xTaskRemoveFromEventList+0xb8>)
 8009bc2:	f7fe fc5c 	bl	800847e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bca:	4b0d      	ldr	r3, [pc, #52]	; (8009c00 <xTaskRemoveFromEventList+0xbc>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d905      	bls.n	8009be0 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009bd8:	4b0a      	ldr	r3, [pc, #40]	; (8009c04 <xTaskRemoveFromEventList+0xc0>)
 8009bda:	2201      	movs	r2, #1
 8009bdc:	601a      	str	r2, [r3, #0]
 8009bde:	e001      	b.n	8009be4 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8009be0:	2300      	movs	r3, #0
 8009be2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009be4:	697b      	ldr	r3, [r7, #20]
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3718      	adds	r7, #24
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop
 8009bf0:	2000043c 	.word	0x2000043c
 8009bf4:	2000041c 	.word	0x2000041c
 8009bf8:	20000318 	.word	0x20000318
 8009bfc:	200003d4 	.word	0x200003d4
 8009c00:	20000314 	.word	0x20000314
 8009c04:	20000428 	.word	0x20000428

08009c08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b083      	sub	sp, #12
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009c10:	4b06      	ldr	r3, [pc, #24]	; (8009c2c <vTaskInternalSetTimeOutState+0x24>)
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009c18:	4b05      	ldr	r3, [pc, #20]	; (8009c30 <vTaskInternalSetTimeOutState+0x28>)
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	605a      	str	r2, [r3, #4]
}
 8009c20:	bf00      	nop
 8009c22:	370c      	adds	r7, #12
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr
 8009c2c:	2000042c 	.word	0x2000042c
 8009c30:	20000418 	.word	0x20000418

08009c34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b088      	sub	sp, #32
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d109      	bne.n	8009c58 <xTaskCheckForTimeOut+0x24>
 8009c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c48:	f383 8811 	msr	BASEPRI, r3
 8009c4c:	f3bf 8f6f 	isb	sy
 8009c50:	f3bf 8f4f 	dsb	sy
 8009c54:	613b      	str	r3, [r7, #16]
 8009c56:	e7fe      	b.n	8009c56 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d109      	bne.n	8009c72 <xTaskCheckForTimeOut+0x3e>
 8009c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c62:	f383 8811 	msr	BASEPRI, r3
 8009c66:	f3bf 8f6f 	isb	sy
 8009c6a:	f3bf 8f4f 	dsb	sy
 8009c6e:	60fb      	str	r3, [r7, #12]
 8009c70:	e7fe      	b.n	8009c70 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8009c72:	f000 fc7b 	bl	800a56c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009c76:	4b1d      	ldr	r3, [pc, #116]	; (8009cec <xTaskCheckForTimeOut+0xb8>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	69ba      	ldr	r2, [r7, #24]
 8009c82:	1ad3      	subs	r3, r2, r3
 8009c84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c8e:	d102      	bne.n	8009c96 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009c90:	2300      	movs	r3, #0
 8009c92:	61fb      	str	r3, [r7, #28]
 8009c94:	e023      	b.n	8009cde <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	4b15      	ldr	r3, [pc, #84]	; (8009cf0 <xTaskCheckForTimeOut+0xbc>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d007      	beq.n	8009cb2 <xTaskCheckForTimeOut+0x7e>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	69ba      	ldr	r2, [r7, #24]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d302      	bcc.n	8009cb2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009cac:	2301      	movs	r3, #1
 8009cae:	61fb      	str	r3, [r7, #28]
 8009cb0:	e015      	b.n	8009cde <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	697a      	ldr	r2, [r7, #20]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d20b      	bcs.n	8009cd4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	1ad2      	subs	r2, r2, r3
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f7ff ff9d 	bl	8009c08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	61fb      	str	r3, [r7, #28]
 8009cd2:	e004      	b.n	8009cde <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009cde:	f000 fc73 	bl	800a5c8 <vPortExitCritical>

	return xReturn;
 8009ce2:	69fb      	ldr	r3, [r7, #28]
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3720      	adds	r7, #32
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	20000418 	.word	0x20000418
 8009cf0:	2000042c 	.word	0x2000042c

08009cf4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009cf8:	4b03      	ldr	r3, [pc, #12]	; (8009d08 <vTaskMissedYield+0x14>)
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	601a      	str	r2, [r3, #0]
}
 8009cfe:	bf00      	nop
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr
 8009d08:	20000428 	.word	0x20000428

08009d0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009d14:	f000 f852 	bl	8009dbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009d18:	4b06      	ldr	r3, [pc, #24]	; (8009d34 <prvIdleTask+0x28>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d9f9      	bls.n	8009d14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009d20:	4b05      	ldr	r3, [pc, #20]	; (8009d38 <prvIdleTask+0x2c>)
 8009d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d26:	601a      	str	r2, [r3, #0]
 8009d28:	f3bf 8f4f 	dsb	sy
 8009d2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009d30:	e7f0      	b.n	8009d14 <prvIdleTask+0x8>
 8009d32:	bf00      	nop
 8009d34:	20000318 	.word	0x20000318
 8009d38:	e000ed04 	.word	0xe000ed04

08009d3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b082      	sub	sp, #8
 8009d40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d42:	2300      	movs	r3, #0
 8009d44:	607b      	str	r3, [r7, #4]
 8009d46:	e00c      	b.n	8009d62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	4613      	mov	r3, r2
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	4413      	add	r3, r2
 8009d50:	009b      	lsls	r3, r3, #2
 8009d52:	4a12      	ldr	r2, [pc, #72]	; (8009d9c <prvInitialiseTaskLists+0x60>)
 8009d54:	4413      	add	r3, r2
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7fe fb64 	bl	8008424 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	3301      	adds	r3, #1
 8009d60:	607b      	str	r3, [r7, #4]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2b06      	cmp	r3, #6
 8009d66:	d9ef      	bls.n	8009d48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009d68:	480d      	ldr	r0, [pc, #52]	; (8009da0 <prvInitialiseTaskLists+0x64>)
 8009d6a:	f7fe fb5b 	bl	8008424 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009d6e:	480d      	ldr	r0, [pc, #52]	; (8009da4 <prvInitialiseTaskLists+0x68>)
 8009d70:	f7fe fb58 	bl	8008424 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009d74:	480c      	ldr	r0, [pc, #48]	; (8009da8 <prvInitialiseTaskLists+0x6c>)
 8009d76:	f7fe fb55 	bl	8008424 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009d7a:	480c      	ldr	r0, [pc, #48]	; (8009dac <prvInitialiseTaskLists+0x70>)
 8009d7c:	f7fe fb52 	bl	8008424 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009d80:	480b      	ldr	r0, [pc, #44]	; (8009db0 <prvInitialiseTaskLists+0x74>)
 8009d82:	f7fe fb4f 	bl	8008424 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009d86:	4b0b      	ldr	r3, [pc, #44]	; (8009db4 <prvInitialiseTaskLists+0x78>)
 8009d88:	4a05      	ldr	r2, [pc, #20]	; (8009da0 <prvInitialiseTaskLists+0x64>)
 8009d8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009d8c:	4b0a      	ldr	r3, [pc, #40]	; (8009db8 <prvInitialiseTaskLists+0x7c>)
 8009d8e:	4a05      	ldr	r2, [pc, #20]	; (8009da4 <prvInitialiseTaskLists+0x68>)
 8009d90:	601a      	str	r2, [r3, #0]
}
 8009d92:	bf00      	nop
 8009d94:	3708      	adds	r7, #8
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
 8009d9a:	bf00      	nop
 8009d9c:	20000318 	.word	0x20000318
 8009da0:	200003a4 	.word	0x200003a4
 8009da4:	200003b8 	.word	0x200003b8
 8009da8:	200003d4 	.word	0x200003d4
 8009dac:	200003e8 	.word	0x200003e8
 8009db0:	20000400 	.word	0x20000400
 8009db4:	200003cc 	.word	0x200003cc
 8009db8:	200003d0 	.word	0x200003d0

08009dbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b082      	sub	sp, #8
 8009dc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009dc2:	e019      	b.n	8009df8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009dc4:	f000 fbd2 	bl	800a56c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dc8:	4b0f      	ldr	r3, [pc, #60]	; (8009e08 <prvCheckTasksWaitingTermination+0x4c>)
 8009dca:	68db      	ldr	r3, [r3, #12]
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	3304      	adds	r3, #4
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7fe fbaf 	bl	8008538 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009dda:	4b0c      	ldr	r3, [pc, #48]	; (8009e0c <prvCheckTasksWaitingTermination+0x50>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	3b01      	subs	r3, #1
 8009de0:	4a0a      	ldr	r2, [pc, #40]	; (8009e0c <prvCheckTasksWaitingTermination+0x50>)
 8009de2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009de4:	4b0a      	ldr	r3, [pc, #40]	; (8009e10 <prvCheckTasksWaitingTermination+0x54>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	3b01      	subs	r3, #1
 8009dea:	4a09      	ldr	r2, [pc, #36]	; (8009e10 <prvCheckTasksWaitingTermination+0x54>)
 8009dec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009dee:	f000 fbeb 	bl	800a5c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 f80e 	bl	8009e14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009df8:	4b05      	ldr	r3, [pc, #20]	; (8009e10 <prvCheckTasksWaitingTermination+0x54>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d1e1      	bne.n	8009dc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009e00:	bf00      	nop
 8009e02:	3708      	adds	r7, #8
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}
 8009e08:	200003e8 	.word	0x200003e8
 8009e0c:	20000414 	.word	0x20000414
 8009e10:	200003fc 	.word	0x200003fc

08009e14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d108      	bne.n	8009e38 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f000 fd7a 	bl	800a924 <vPortFree>
				vPortFree( pxTCB );
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 fd77 	bl	800a924 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009e36:	e017      	b.n	8009e68 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d103      	bne.n	8009e4a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 fd6e 	bl	800a924 <vPortFree>
	}
 8009e48:	e00e      	b.n	8009e68 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009e50:	2b02      	cmp	r3, #2
 8009e52:	d009      	beq.n	8009e68 <prvDeleteTCB+0x54>
 8009e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e58:	f383 8811 	msr	BASEPRI, r3
 8009e5c:	f3bf 8f6f 	isb	sy
 8009e60:	f3bf 8f4f 	dsb	sy
 8009e64:	60fb      	str	r3, [r7, #12]
 8009e66:	e7fe      	b.n	8009e66 <prvDeleteTCB+0x52>
	}
 8009e68:	bf00      	nop
 8009e6a:	3710      	adds	r7, #16
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e76:	4b0c      	ldr	r3, [pc, #48]	; (8009ea8 <prvResetNextTaskUnblockTime+0x38>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d104      	bne.n	8009e8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009e80:	4b0a      	ldr	r3, [pc, #40]	; (8009eac <prvResetNextTaskUnblockTime+0x3c>)
 8009e82:	f04f 32ff 	mov.w	r2, #4294967295
 8009e86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009e88:	e008      	b.n	8009e9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e8a:	4b07      	ldr	r3, [pc, #28]	; (8009ea8 <prvResetNextTaskUnblockTime+0x38>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	68db      	ldr	r3, [r3, #12]
 8009e92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	4a04      	ldr	r2, [pc, #16]	; (8009eac <prvResetNextTaskUnblockTime+0x3c>)
 8009e9a:	6013      	str	r3, [r2, #0]
}
 8009e9c:	bf00      	nop
 8009e9e:	370c      	adds	r7, #12
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr
 8009ea8:	200003cc 	.word	0x200003cc
 8009eac:	20000434 	.word	0x20000434

08009eb0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009eb6:	4b0b      	ldr	r3, [pc, #44]	; (8009ee4 <xTaskGetSchedulerState+0x34>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d102      	bne.n	8009ec4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	607b      	str	r3, [r7, #4]
 8009ec2:	e008      	b.n	8009ed6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ec4:	4b08      	ldr	r3, [pc, #32]	; (8009ee8 <xTaskGetSchedulerState+0x38>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d102      	bne.n	8009ed2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009ecc:	2302      	movs	r3, #2
 8009ece:	607b      	str	r3, [r7, #4]
 8009ed0:	e001      	b.n	8009ed6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009ed6:	687b      	ldr	r3, [r7, #4]
	}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr
 8009ee4:	20000420 	.word	0x20000420
 8009ee8:	2000043c 	.word	0x2000043c

08009eec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d069      	beq.n	8009fd6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f06:	4b36      	ldr	r3, [pc, #216]	; (8009fe0 <xTaskPriorityInherit+0xf4>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d259      	bcs.n	8009fc4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	699b      	ldr	r3, [r3, #24]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	db06      	blt.n	8009f26 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f18:	4b31      	ldr	r3, [pc, #196]	; (8009fe0 <xTaskPriorityInherit+0xf4>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f1e:	f1c3 0207 	rsb	r2, r3, #7
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	6959      	ldr	r1, [r3, #20]
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f2e:	4613      	mov	r3, r2
 8009f30:	009b      	lsls	r3, r3, #2
 8009f32:	4413      	add	r3, r2
 8009f34:	009b      	lsls	r3, r3, #2
 8009f36:	4a2b      	ldr	r2, [pc, #172]	; (8009fe4 <xTaskPriorityInherit+0xf8>)
 8009f38:	4413      	add	r3, r2
 8009f3a:	4299      	cmp	r1, r3
 8009f3c:	d13a      	bne.n	8009fb4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	3304      	adds	r3, #4
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7fe faf8 	bl	8008538 <uxListRemove>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d115      	bne.n	8009f7a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f52:	4924      	ldr	r1, [pc, #144]	; (8009fe4 <xTaskPriorityInherit+0xf8>)
 8009f54:	4613      	mov	r3, r2
 8009f56:	009b      	lsls	r3, r3, #2
 8009f58:	4413      	add	r3, r2
 8009f5a:	009b      	lsls	r3, r3, #2
 8009f5c:	440b      	add	r3, r1
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d10a      	bne.n	8009f7a <xTaskPriorityInherit+0x8e>
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f68:	2201      	movs	r2, #1
 8009f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8009f6e:	43da      	mvns	r2, r3
 8009f70:	4b1d      	ldr	r3, [pc, #116]	; (8009fe8 <xTaskPriorityInherit+0xfc>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4013      	ands	r3, r2
 8009f76:	4a1c      	ldr	r2, [pc, #112]	; (8009fe8 <xTaskPriorityInherit+0xfc>)
 8009f78:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009f7a:	4b19      	ldr	r3, [pc, #100]	; (8009fe0 <xTaskPriorityInherit+0xf4>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f88:	2201      	movs	r2, #1
 8009f8a:	409a      	lsls	r2, r3
 8009f8c:	4b16      	ldr	r3, [pc, #88]	; (8009fe8 <xTaskPriorityInherit+0xfc>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4313      	orrs	r3, r2
 8009f92:	4a15      	ldr	r2, [pc, #84]	; (8009fe8 <xTaskPriorityInherit+0xfc>)
 8009f94:	6013      	str	r3, [r2, #0]
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	4413      	add	r3, r2
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	4a10      	ldr	r2, [pc, #64]	; (8009fe4 <xTaskPriorityInherit+0xf8>)
 8009fa4:	441a      	add	r2, r3
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	3304      	adds	r3, #4
 8009faa:	4619      	mov	r1, r3
 8009fac:	4610      	mov	r0, r2
 8009fae:	f7fe fa66 	bl	800847e <vListInsertEnd>
 8009fb2:	e004      	b.n	8009fbe <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009fb4:	4b0a      	ldr	r3, [pc, #40]	; (8009fe0 <xTaskPriorityInherit+0xf4>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	60fb      	str	r3, [r7, #12]
 8009fc2:	e008      	b.n	8009fd6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fc8:	4b05      	ldr	r3, [pc, #20]	; (8009fe0 <xTaskPriorityInherit+0xf4>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d201      	bcs.n	8009fd6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
	}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3710      	adds	r7, #16
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	20000314 	.word	0x20000314
 8009fe4:	20000318 	.word	0x20000318
 8009fe8:	2000041c 	.word	0x2000041c

08009fec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b086      	sub	sp, #24
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d06c      	beq.n	800a0dc <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a002:	4b39      	ldr	r3, [pc, #228]	; (800a0e8 <xTaskPriorityDisinherit+0xfc>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	693a      	ldr	r2, [r7, #16]
 800a008:	429a      	cmp	r2, r3
 800a00a:	d009      	beq.n	800a020 <xTaskPriorityDisinherit+0x34>
 800a00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a010:	f383 8811 	msr	BASEPRI, r3
 800a014:	f3bf 8f6f 	isb	sy
 800a018:	f3bf 8f4f 	dsb	sy
 800a01c:	60fb      	str	r3, [r7, #12]
 800a01e:	e7fe      	b.n	800a01e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a024:	2b00      	cmp	r3, #0
 800a026:	d109      	bne.n	800a03c <xTaskPriorityDisinherit+0x50>
 800a028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02c:	f383 8811 	msr	BASEPRI, r3
 800a030:	f3bf 8f6f 	isb	sy
 800a034:	f3bf 8f4f 	dsb	sy
 800a038:	60bb      	str	r3, [r7, #8]
 800a03a:	e7fe      	b.n	800a03a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a040:	1e5a      	subs	r2, r3, #1
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a04e:	429a      	cmp	r2, r3
 800a050:	d044      	beq.n	800a0dc <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a056:	2b00      	cmp	r3, #0
 800a058:	d140      	bne.n	800a0dc <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	3304      	adds	r3, #4
 800a05e:	4618      	mov	r0, r3
 800a060:	f7fe fa6a 	bl	8008538 <uxListRemove>
 800a064:	4603      	mov	r3, r0
 800a066:	2b00      	cmp	r3, #0
 800a068:	d115      	bne.n	800a096 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a06e:	491f      	ldr	r1, [pc, #124]	; (800a0ec <xTaskPriorityDisinherit+0x100>)
 800a070:	4613      	mov	r3, r2
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	4413      	add	r3, r2
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	440b      	add	r3, r1
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d10a      	bne.n	800a096 <xTaskPriorityDisinherit+0xaa>
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a084:	2201      	movs	r2, #1
 800a086:	fa02 f303 	lsl.w	r3, r2, r3
 800a08a:	43da      	mvns	r2, r3
 800a08c:	4b18      	ldr	r3, [pc, #96]	; (800a0f0 <xTaskPriorityDisinherit+0x104>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4013      	ands	r3, r2
 800a092:	4a17      	ldr	r2, [pc, #92]	; (800a0f0 <xTaskPriorityDisinherit+0x104>)
 800a094:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a2:	f1c3 0207 	rsb	r2, r3, #7
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	409a      	lsls	r2, r3
 800a0b2:	4b0f      	ldr	r3, [pc, #60]	; (800a0f0 <xTaskPriorityDisinherit+0x104>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	4a0d      	ldr	r2, [pc, #52]	; (800a0f0 <xTaskPriorityDisinherit+0x104>)
 800a0ba:	6013      	str	r3, [r2, #0]
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0c0:	4613      	mov	r3, r2
 800a0c2:	009b      	lsls	r3, r3, #2
 800a0c4:	4413      	add	r3, r2
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	4a08      	ldr	r2, [pc, #32]	; (800a0ec <xTaskPriorityDisinherit+0x100>)
 800a0ca:	441a      	add	r2, r3
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	3304      	adds	r3, #4
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	4610      	mov	r0, r2
 800a0d4:	f7fe f9d3 	bl	800847e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a0dc:	697b      	ldr	r3, [r7, #20]
	}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3718      	adds	r7, #24
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	20000314 	.word	0x20000314
 800a0ec:	20000318 	.word	0x20000318
 800a0f0:	2000041c 	.word	0x2000041c

0800a0f4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b088      	sub	sp, #32
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a102:	2301      	movs	r3, #1
 800a104:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	f000 8081 	beq.w	800a210 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a112:	2b00      	cmp	r3, #0
 800a114:	d109      	bne.n	800a12a <vTaskPriorityDisinheritAfterTimeout+0x36>
 800a116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11a:	f383 8811 	msr	BASEPRI, r3
 800a11e:	f3bf 8f6f 	isb	sy
 800a122:	f3bf 8f4f 	dsb	sy
 800a126:	60fb      	str	r3, [r7, #12]
 800a128:	e7fe      	b.n	800a128 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a12a:	69bb      	ldr	r3, [r7, #24]
 800a12c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a12e:	683a      	ldr	r2, [r7, #0]
 800a130:	429a      	cmp	r2, r3
 800a132:	d902      	bls.n	800a13a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	61fb      	str	r3, [r7, #28]
 800a138:	e002      	b.n	800a140 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a13a:	69bb      	ldr	r3, [r7, #24]
 800a13c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a13e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a140:	69bb      	ldr	r3, [r7, #24]
 800a142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a144:	69fa      	ldr	r2, [r7, #28]
 800a146:	429a      	cmp	r2, r3
 800a148:	d062      	beq.n	800a210 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a14a:	69bb      	ldr	r3, [r7, #24]
 800a14c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a14e:	697a      	ldr	r2, [r7, #20]
 800a150:	429a      	cmp	r2, r3
 800a152:	d15d      	bne.n	800a210 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a154:	4b30      	ldr	r3, [pc, #192]	; (800a218 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	69ba      	ldr	r2, [r7, #24]
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d109      	bne.n	800a172 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800a15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a162:	f383 8811 	msr	BASEPRI, r3
 800a166:	f3bf 8f6f 	isb	sy
 800a16a:	f3bf 8f4f 	dsb	sy
 800a16e:	60bb      	str	r3, [r7, #8]
 800a170:	e7fe      	b.n	800a170 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a172:	69bb      	ldr	r3, [r7, #24]
 800a174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a176:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a178:	69bb      	ldr	r3, [r7, #24]
 800a17a:	69fa      	ldr	r2, [r7, #28]
 800a17c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	699b      	ldr	r3, [r3, #24]
 800a182:	2b00      	cmp	r3, #0
 800a184:	db04      	blt.n	800a190 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a186:	69fb      	ldr	r3, [r7, #28]
 800a188:	f1c3 0207 	rsb	r2, r3, #7
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a190:	69bb      	ldr	r3, [r7, #24]
 800a192:	6959      	ldr	r1, [r3, #20]
 800a194:	693a      	ldr	r2, [r7, #16]
 800a196:	4613      	mov	r3, r2
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	4413      	add	r3, r2
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	4a1f      	ldr	r2, [pc, #124]	; (800a21c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800a1a0:	4413      	add	r3, r2
 800a1a2:	4299      	cmp	r1, r3
 800a1a4:	d134      	bne.n	800a210 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1a6:	69bb      	ldr	r3, [r7, #24]
 800a1a8:	3304      	adds	r3, #4
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7fe f9c4 	bl	8008538 <uxListRemove>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d115      	bne.n	800a1e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a1b6:	69bb      	ldr	r3, [r7, #24]
 800a1b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ba:	4918      	ldr	r1, [pc, #96]	; (800a21c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800a1bc:	4613      	mov	r3, r2
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	4413      	add	r3, r2
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	440b      	add	r3, r1
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d10a      	bne.n	800a1e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
 800a1cc:	69bb      	ldr	r3, [r7, #24]
 800a1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a1d6:	43da      	mvns	r2, r3
 800a1d8:	4b11      	ldr	r3, [pc, #68]	; (800a220 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4013      	ands	r3, r2
 800a1de:	4a10      	ldr	r2, [pc, #64]	; (800a220 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a1e0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a1e2:	69bb      	ldr	r3, [r7, #24]
 800a1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	409a      	lsls	r2, r3
 800a1ea:	4b0d      	ldr	r3, [pc, #52]	; (800a220 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	4a0b      	ldr	r2, [pc, #44]	; (800a220 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a1f2:	6013      	str	r3, [r2, #0]
 800a1f4:	69bb      	ldr	r3, [r7, #24]
 800a1f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1f8:	4613      	mov	r3, r2
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	4413      	add	r3, r2
 800a1fe:	009b      	lsls	r3, r3, #2
 800a200:	4a06      	ldr	r2, [pc, #24]	; (800a21c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800a202:	441a      	add	r2, r3
 800a204:	69bb      	ldr	r3, [r7, #24]
 800a206:	3304      	adds	r3, #4
 800a208:	4619      	mov	r1, r3
 800a20a:	4610      	mov	r0, r2
 800a20c:	f7fe f937 	bl	800847e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a210:	bf00      	nop
 800a212:	3720      	adds	r7, #32
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}
 800a218:	20000314 	.word	0x20000314
 800a21c:	20000318 	.word	0x20000318
 800a220:	2000041c 	.word	0x2000041c

0800a224 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a224:	b480      	push	{r7}
 800a226:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a228:	4b07      	ldr	r3, [pc, #28]	; (800a248 <pvTaskIncrementMutexHeldCount+0x24>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d004      	beq.n	800a23a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a230:	4b05      	ldr	r3, [pc, #20]	; (800a248 <pvTaskIncrementMutexHeldCount+0x24>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a236:	3201      	adds	r2, #1
 800a238:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800a23a:	4b03      	ldr	r3, [pc, #12]	; (800a248 <pvTaskIncrementMutexHeldCount+0x24>)
 800a23c:	681b      	ldr	r3, [r3, #0]
	}
 800a23e:	4618      	mov	r0, r3
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr
 800a248:	20000314 	.word	0x20000314

0800a24c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a256:	4b29      	ldr	r3, [pc, #164]	; (800a2fc <prvAddCurrentTaskToDelayedList+0xb0>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a25c:	4b28      	ldr	r3, [pc, #160]	; (800a300 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	3304      	adds	r3, #4
 800a262:	4618      	mov	r0, r3
 800a264:	f7fe f968 	bl	8008538 <uxListRemove>
 800a268:	4603      	mov	r3, r0
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d10b      	bne.n	800a286 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a26e:	4b24      	ldr	r3, [pc, #144]	; (800a300 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a274:	2201      	movs	r2, #1
 800a276:	fa02 f303 	lsl.w	r3, r2, r3
 800a27a:	43da      	mvns	r2, r3
 800a27c:	4b21      	ldr	r3, [pc, #132]	; (800a304 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4013      	ands	r3, r2
 800a282:	4a20      	ldr	r2, [pc, #128]	; (800a304 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a284:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a28c:	d10a      	bne.n	800a2a4 <prvAddCurrentTaskToDelayedList+0x58>
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d007      	beq.n	800a2a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a294:	4b1a      	ldr	r3, [pc, #104]	; (800a300 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	3304      	adds	r3, #4
 800a29a:	4619      	mov	r1, r3
 800a29c:	481a      	ldr	r0, [pc, #104]	; (800a308 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a29e:	f7fe f8ee 	bl	800847e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a2a2:	e026      	b.n	800a2f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a2a4:	68fa      	ldr	r2, [r7, #12]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	4413      	add	r3, r2
 800a2aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a2ac:	4b14      	ldr	r3, [pc, #80]	; (800a300 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	68ba      	ldr	r2, [r7, #8]
 800a2b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a2b4:	68ba      	ldr	r2, [r7, #8]
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d209      	bcs.n	800a2d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2bc:	4b13      	ldr	r3, [pc, #76]	; (800a30c <prvAddCurrentTaskToDelayedList+0xc0>)
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	4b0f      	ldr	r3, [pc, #60]	; (800a300 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	3304      	adds	r3, #4
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	4610      	mov	r0, r2
 800a2ca:	f7fe f8fc 	bl	80084c6 <vListInsert>
}
 800a2ce:	e010      	b.n	800a2f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2d0:	4b0f      	ldr	r3, [pc, #60]	; (800a310 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a2d2:	681a      	ldr	r2, [r3, #0]
 800a2d4:	4b0a      	ldr	r3, [pc, #40]	; (800a300 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	3304      	adds	r3, #4
 800a2da:	4619      	mov	r1, r3
 800a2dc:	4610      	mov	r0, r2
 800a2de:	f7fe f8f2 	bl	80084c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a2e2:	4b0c      	ldr	r3, [pc, #48]	; (800a314 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	68ba      	ldr	r2, [r7, #8]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d202      	bcs.n	800a2f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a2ec:	4a09      	ldr	r2, [pc, #36]	; (800a314 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	6013      	str	r3, [r2, #0]
}
 800a2f2:	bf00      	nop
 800a2f4:	3710      	adds	r7, #16
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	20000418 	.word	0x20000418
 800a300:	20000314 	.word	0x20000314
 800a304:	2000041c 	.word	0x2000041c
 800a308:	20000400 	.word	0x20000400
 800a30c:	200003d0 	.word	0x200003d0
 800a310:	200003cc 	.word	0x200003cc
 800a314:	20000434 	.word	0x20000434

0800a318 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a318:	b480      	push	{r7}
 800a31a:	b085      	sub	sp, #20
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	3b04      	subs	r3, #4
 800a328:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a330:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	3b04      	subs	r3, #4
 800a336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	f023 0201 	bic.w	r2, r3, #1
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	3b04      	subs	r3, #4
 800a346:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a348:	4a0c      	ldr	r2, [pc, #48]	; (800a37c <pxPortInitialiseStack+0x64>)
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	3b14      	subs	r3, #20
 800a352:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	3b04      	subs	r3, #4
 800a35e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f06f 0202 	mvn.w	r2, #2
 800a366:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	3b20      	subs	r3, #32
 800a36c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a36e:	68fb      	ldr	r3, [r7, #12]
}
 800a370:	4618      	mov	r0, r3
 800a372:	3714      	adds	r7, #20
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr
 800a37c:	0800a381 	.word	0x0800a381

0800a380 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a380:	b480      	push	{r7}
 800a382:	b085      	sub	sp, #20
 800a384:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a386:	2300      	movs	r3, #0
 800a388:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a38a:	4b11      	ldr	r3, [pc, #68]	; (800a3d0 <prvTaskExitError+0x50>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a392:	d009      	beq.n	800a3a8 <prvTaskExitError+0x28>
 800a394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a398:	f383 8811 	msr	BASEPRI, r3
 800a39c:	f3bf 8f6f 	isb	sy
 800a3a0:	f3bf 8f4f 	dsb	sy
 800a3a4:	60fb      	str	r3, [r7, #12]
 800a3a6:	e7fe      	b.n	800a3a6 <prvTaskExitError+0x26>
 800a3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ac:	f383 8811 	msr	BASEPRI, r3
 800a3b0:	f3bf 8f6f 	isb	sy
 800a3b4:	f3bf 8f4f 	dsb	sy
 800a3b8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a3ba:	bf00      	nop
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d0fc      	beq.n	800a3bc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a3c2:	bf00      	nop
 800a3c4:	3714      	adds	r7, #20
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr
 800a3ce:	bf00      	nop
 800a3d0:	2000002c 	.word	0x2000002c
	...

0800a3e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a3e0:	4b07      	ldr	r3, [pc, #28]	; (800a400 <pxCurrentTCBConst2>)
 800a3e2:	6819      	ldr	r1, [r3, #0]
 800a3e4:	6808      	ldr	r0, [r1, #0]
 800a3e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ea:	f380 8809 	msr	PSP, r0
 800a3ee:	f3bf 8f6f 	isb	sy
 800a3f2:	f04f 0000 	mov.w	r0, #0
 800a3f6:	f380 8811 	msr	BASEPRI, r0
 800a3fa:	4770      	bx	lr
 800a3fc:	f3af 8000 	nop.w

0800a400 <pxCurrentTCBConst2>:
 800a400:	20000314 	.word	0x20000314
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a404:	bf00      	nop
 800a406:	bf00      	nop

0800a408 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a408:	4808      	ldr	r0, [pc, #32]	; (800a42c <prvPortStartFirstTask+0x24>)
 800a40a:	6800      	ldr	r0, [r0, #0]
 800a40c:	6800      	ldr	r0, [r0, #0]
 800a40e:	f380 8808 	msr	MSP, r0
 800a412:	f04f 0000 	mov.w	r0, #0
 800a416:	f380 8814 	msr	CONTROL, r0
 800a41a:	b662      	cpsie	i
 800a41c:	b661      	cpsie	f
 800a41e:	f3bf 8f4f 	dsb	sy
 800a422:	f3bf 8f6f 	isb	sy
 800a426:	df00      	svc	0
 800a428:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a42a:	bf00      	nop
 800a42c:	e000ed08 	.word	0xe000ed08

0800a430 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b086      	sub	sp, #24
 800a434:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a436:	4b44      	ldr	r3, [pc, #272]	; (800a548 <xPortStartScheduler+0x118>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4a44      	ldr	r2, [pc, #272]	; (800a54c <xPortStartScheduler+0x11c>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d109      	bne.n	800a454 <xPortStartScheduler+0x24>
 800a440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a444:	f383 8811 	msr	BASEPRI, r3
 800a448:	f3bf 8f6f 	isb	sy
 800a44c:	f3bf 8f4f 	dsb	sy
 800a450:	613b      	str	r3, [r7, #16]
 800a452:	e7fe      	b.n	800a452 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a454:	4b3c      	ldr	r3, [pc, #240]	; (800a548 <xPortStartScheduler+0x118>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4a3d      	ldr	r2, [pc, #244]	; (800a550 <xPortStartScheduler+0x120>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d109      	bne.n	800a472 <xPortStartScheduler+0x42>
 800a45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a462:	f383 8811 	msr	BASEPRI, r3
 800a466:	f3bf 8f6f 	isb	sy
 800a46a:	f3bf 8f4f 	dsb	sy
 800a46e:	60fb      	str	r3, [r7, #12]
 800a470:	e7fe      	b.n	800a470 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a472:	4b38      	ldr	r3, [pc, #224]	; (800a554 <xPortStartScheduler+0x124>)
 800a474:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	22ff      	movs	r2, #255	; 0xff
 800a482:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	781b      	ldrb	r3, [r3, #0]
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a48c:	78fb      	ldrb	r3, [r7, #3]
 800a48e:	b2db      	uxtb	r3, r3
 800a490:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a494:	b2da      	uxtb	r2, r3
 800a496:	4b30      	ldr	r3, [pc, #192]	; (800a558 <xPortStartScheduler+0x128>)
 800a498:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a49a:	4b30      	ldr	r3, [pc, #192]	; (800a55c <xPortStartScheduler+0x12c>)
 800a49c:	2207      	movs	r2, #7
 800a49e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a4a0:	e009      	b.n	800a4b6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800a4a2:	4b2e      	ldr	r3, [pc, #184]	; (800a55c <xPortStartScheduler+0x12c>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	4a2c      	ldr	r2, [pc, #176]	; (800a55c <xPortStartScheduler+0x12c>)
 800a4aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a4ac:	78fb      	ldrb	r3, [r7, #3]
 800a4ae:	b2db      	uxtb	r3, r3
 800a4b0:	005b      	lsls	r3, r3, #1
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a4b6:	78fb      	ldrb	r3, [r7, #3]
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4be:	2b80      	cmp	r3, #128	; 0x80
 800a4c0:	d0ef      	beq.n	800a4a2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a4c2:	4b26      	ldr	r3, [pc, #152]	; (800a55c <xPortStartScheduler+0x12c>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f1c3 0307 	rsb	r3, r3, #7
 800a4ca:	2b04      	cmp	r3, #4
 800a4cc:	d009      	beq.n	800a4e2 <xPortStartScheduler+0xb2>
 800a4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d2:	f383 8811 	msr	BASEPRI, r3
 800a4d6:	f3bf 8f6f 	isb	sy
 800a4da:	f3bf 8f4f 	dsb	sy
 800a4de:	60bb      	str	r3, [r7, #8]
 800a4e0:	e7fe      	b.n	800a4e0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a4e2:	4b1e      	ldr	r3, [pc, #120]	; (800a55c <xPortStartScheduler+0x12c>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	021b      	lsls	r3, r3, #8
 800a4e8:	4a1c      	ldr	r2, [pc, #112]	; (800a55c <xPortStartScheduler+0x12c>)
 800a4ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a4ec:	4b1b      	ldr	r3, [pc, #108]	; (800a55c <xPortStartScheduler+0x12c>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a4f4:	4a19      	ldr	r2, [pc, #100]	; (800a55c <xPortStartScheduler+0x12c>)
 800a4f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	b2da      	uxtb	r2, r3
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a500:	4b17      	ldr	r3, [pc, #92]	; (800a560 <xPortStartScheduler+0x130>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4a16      	ldr	r2, [pc, #88]	; (800a560 <xPortStartScheduler+0x130>)
 800a506:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a50a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a50c:	4b14      	ldr	r3, [pc, #80]	; (800a560 <xPortStartScheduler+0x130>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a13      	ldr	r2, [pc, #76]	; (800a560 <xPortStartScheduler+0x130>)
 800a512:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a516:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a518:	f000 f8d6 	bl	800a6c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a51c:	4b11      	ldr	r3, [pc, #68]	; (800a564 <xPortStartScheduler+0x134>)
 800a51e:	2200      	movs	r2, #0
 800a520:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a522:	f000 f8f5 	bl	800a710 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a526:	4b10      	ldr	r3, [pc, #64]	; (800a568 <xPortStartScheduler+0x138>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a0f      	ldr	r2, [pc, #60]	; (800a568 <xPortStartScheduler+0x138>)
 800a52c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a530:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a532:	f7ff ff69 	bl	800a408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a536:	f7ff fa87 	bl	8009a48 <vTaskSwitchContext>
	prvTaskExitError();
 800a53a:	f7ff ff21 	bl	800a380 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a53e:	2300      	movs	r3, #0
}
 800a540:	4618      	mov	r0, r3
 800a542:	3718      	adds	r7, #24
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}
 800a548:	e000ed00 	.word	0xe000ed00
 800a54c:	410fc271 	.word	0x410fc271
 800a550:	410fc270 	.word	0x410fc270
 800a554:	e000e400 	.word	0xe000e400
 800a558:	20000440 	.word	0x20000440
 800a55c:	20000444 	.word	0x20000444
 800a560:	e000ed20 	.word	0xe000ed20
 800a564:	2000002c 	.word	0x2000002c
 800a568:	e000ef34 	.word	0xe000ef34

0800a56c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a56c:	b480      	push	{r7}
 800a56e:	b083      	sub	sp, #12
 800a570:	af00      	add	r7, sp, #0
 800a572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a576:	f383 8811 	msr	BASEPRI, r3
 800a57a:	f3bf 8f6f 	isb	sy
 800a57e:	f3bf 8f4f 	dsb	sy
 800a582:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a584:	4b0e      	ldr	r3, [pc, #56]	; (800a5c0 <vPortEnterCritical+0x54>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	3301      	adds	r3, #1
 800a58a:	4a0d      	ldr	r2, [pc, #52]	; (800a5c0 <vPortEnterCritical+0x54>)
 800a58c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a58e:	4b0c      	ldr	r3, [pc, #48]	; (800a5c0 <vPortEnterCritical+0x54>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	2b01      	cmp	r3, #1
 800a594:	d10e      	bne.n	800a5b4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a596:	4b0b      	ldr	r3, [pc, #44]	; (800a5c4 <vPortEnterCritical+0x58>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	b2db      	uxtb	r3, r3
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d009      	beq.n	800a5b4 <vPortEnterCritical+0x48>
 800a5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a4:	f383 8811 	msr	BASEPRI, r3
 800a5a8:	f3bf 8f6f 	isb	sy
 800a5ac:	f3bf 8f4f 	dsb	sy
 800a5b0:	603b      	str	r3, [r7, #0]
 800a5b2:	e7fe      	b.n	800a5b2 <vPortEnterCritical+0x46>
	}
}
 800a5b4:	bf00      	nop
 800a5b6:	370c      	adds	r7, #12
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr
 800a5c0:	2000002c 	.word	0x2000002c
 800a5c4:	e000ed04 	.word	0xe000ed04

0800a5c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b083      	sub	sp, #12
 800a5cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a5ce:	4b11      	ldr	r3, [pc, #68]	; (800a614 <vPortExitCritical+0x4c>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d109      	bne.n	800a5ea <vPortExitCritical+0x22>
 800a5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5da:	f383 8811 	msr	BASEPRI, r3
 800a5de:	f3bf 8f6f 	isb	sy
 800a5e2:	f3bf 8f4f 	dsb	sy
 800a5e6:	607b      	str	r3, [r7, #4]
 800a5e8:	e7fe      	b.n	800a5e8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a5ea:	4b0a      	ldr	r3, [pc, #40]	; (800a614 <vPortExitCritical+0x4c>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	3b01      	subs	r3, #1
 800a5f0:	4a08      	ldr	r2, [pc, #32]	; (800a614 <vPortExitCritical+0x4c>)
 800a5f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a5f4:	4b07      	ldr	r3, [pc, #28]	; (800a614 <vPortExitCritical+0x4c>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d104      	bne.n	800a606 <vPortExitCritical+0x3e>
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a606:	bf00      	nop
 800a608:	370c      	adds	r7, #12
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr
 800a612:	bf00      	nop
 800a614:	2000002c 	.word	0x2000002c
	...

0800a620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a620:	f3ef 8009 	mrs	r0, PSP
 800a624:	f3bf 8f6f 	isb	sy
 800a628:	4b15      	ldr	r3, [pc, #84]	; (800a680 <pxCurrentTCBConst>)
 800a62a:	681a      	ldr	r2, [r3, #0]
 800a62c:	f01e 0f10 	tst.w	lr, #16
 800a630:	bf08      	it	eq
 800a632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a63a:	6010      	str	r0, [r2, #0]
 800a63c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a640:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a644:	f380 8811 	msr	BASEPRI, r0
 800a648:	f3bf 8f4f 	dsb	sy
 800a64c:	f3bf 8f6f 	isb	sy
 800a650:	f7ff f9fa 	bl	8009a48 <vTaskSwitchContext>
 800a654:	f04f 0000 	mov.w	r0, #0
 800a658:	f380 8811 	msr	BASEPRI, r0
 800a65c:	bc09      	pop	{r0, r3}
 800a65e:	6819      	ldr	r1, [r3, #0]
 800a660:	6808      	ldr	r0, [r1, #0]
 800a662:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a666:	f01e 0f10 	tst.w	lr, #16
 800a66a:	bf08      	it	eq
 800a66c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a670:	f380 8809 	msr	PSP, r0
 800a674:	f3bf 8f6f 	isb	sy
 800a678:	4770      	bx	lr
 800a67a:	bf00      	nop
 800a67c:	f3af 8000 	nop.w

0800a680 <pxCurrentTCBConst>:
 800a680:	20000314 	.word	0x20000314
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a684:	bf00      	nop
 800a686:	bf00      	nop

0800a688 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
	__asm volatile
 800a68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a692:	f383 8811 	msr	BASEPRI, r3
 800a696:	f3bf 8f6f 	isb	sy
 800a69a:	f3bf 8f4f 	dsb	sy
 800a69e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a6a0:	f7ff f91a 	bl	80098d8 <xTaskIncrementTick>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d003      	beq.n	800a6b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a6aa:	4b06      	ldr	r3, [pc, #24]	; (800a6c4 <SysTick_Handler+0x3c>)
 800a6ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6b0:	601a      	str	r2, [r3, #0]
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a6bc:	bf00      	nop
 800a6be:	3708      	adds	r7, #8
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}
 800a6c4:	e000ed04 	.word	0xe000ed04

0800a6c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a6cc:	4b0b      	ldr	r3, [pc, #44]	; (800a6fc <vPortSetupTimerInterrupt+0x34>)
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a6d2:	4b0b      	ldr	r3, [pc, #44]	; (800a700 <vPortSetupTimerInterrupt+0x38>)
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a6d8:	4b0a      	ldr	r3, [pc, #40]	; (800a704 <vPortSetupTimerInterrupt+0x3c>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a0a      	ldr	r2, [pc, #40]	; (800a708 <vPortSetupTimerInterrupt+0x40>)
 800a6de:	fba2 2303 	umull	r2, r3, r2, r3
 800a6e2:	099b      	lsrs	r3, r3, #6
 800a6e4:	4a09      	ldr	r2, [pc, #36]	; (800a70c <vPortSetupTimerInterrupt+0x44>)
 800a6e6:	3b01      	subs	r3, #1
 800a6e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a6ea:	4b04      	ldr	r3, [pc, #16]	; (800a6fc <vPortSetupTimerInterrupt+0x34>)
 800a6ec:	2207      	movs	r2, #7
 800a6ee:	601a      	str	r2, [r3, #0]
}
 800a6f0:	bf00      	nop
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr
 800a6fa:	bf00      	nop
 800a6fc:	e000e010 	.word	0xe000e010
 800a700:	e000e018 	.word	0xe000e018
 800a704:	20000000 	.word	0x20000000
 800a708:	10624dd3 	.word	0x10624dd3
 800a70c:	e000e014 	.word	0xe000e014

0800a710 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a710:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a720 <vPortEnableVFP+0x10>
 800a714:	6801      	ldr	r1, [r0, #0]
 800a716:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a71a:	6001      	str	r1, [r0, #0]
 800a71c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a71e:	bf00      	nop
 800a720:	e000ed88 	.word	0xe000ed88

0800a724 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a724:	b480      	push	{r7}
 800a726:	b085      	sub	sp, #20
 800a728:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a72a:	f3ef 8305 	mrs	r3, IPSR
 800a72e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2b0f      	cmp	r3, #15
 800a734:	d913      	bls.n	800a75e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a736:	4a16      	ldr	r2, [pc, #88]	; (800a790 <vPortValidateInterruptPriority+0x6c>)
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	4413      	add	r3, r2
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a740:	4b14      	ldr	r3, [pc, #80]	; (800a794 <vPortValidateInterruptPriority+0x70>)
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	7afa      	ldrb	r2, [r7, #11]
 800a746:	429a      	cmp	r2, r3
 800a748:	d209      	bcs.n	800a75e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800a74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74e:	f383 8811 	msr	BASEPRI, r3
 800a752:	f3bf 8f6f 	isb	sy
 800a756:	f3bf 8f4f 	dsb	sy
 800a75a:	607b      	str	r3, [r7, #4]
 800a75c:	e7fe      	b.n	800a75c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a75e:	4b0e      	ldr	r3, [pc, #56]	; (800a798 <vPortValidateInterruptPriority+0x74>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a766:	4b0d      	ldr	r3, [pc, #52]	; (800a79c <vPortValidateInterruptPriority+0x78>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d909      	bls.n	800a782 <vPortValidateInterruptPriority+0x5e>
 800a76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a772:	f383 8811 	msr	BASEPRI, r3
 800a776:	f3bf 8f6f 	isb	sy
 800a77a:	f3bf 8f4f 	dsb	sy
 800a77e:	603b      	str	r3, [r7, #0]
 800a780:	e7fe      	b.n	800a780 <vPortValidateInterruptPriority+0x5c>
	}
 800a782:	bf00      	nop
 800a784:	3714      	adds	r7, #20
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr
 800a78e:	bf00      	nop
 800a790:	e000e3f0 	.word	0xe000e3f0
 800a794:	20000440 	.word	0x20000440
 800a798:	e000ed0c 	.word	0xe000ed0c
 800a79c:	20000444 	.word	0x20000444

0800a7a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b08a      	sub	sp, #40	; 0x28
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a7ac:	f7fe ffea 	bl	8009784 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a7b0:	4b57      	ldr	r3, [pc, #348]	; (800a910 <pvPortMalloc+0x170>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d101      	bne.n	800a7bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a7b8:	f000 f90c 	bl	800a9d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a7bc:	4b55      	ldr	r3, [pc, #340]	; (800a914 <pvPortMalloc+0x174>)
 800a7be:	681a      	ldr	r2, [r3, #0]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	4013      	ands	r3, r2
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	f040 808c 	bne.w	800a8e2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d01c      	beq.n	800a80a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800a7d0:	2208      	movs	r2, #8
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	4413      	add	r3, r2
 800a7d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f003 0307 	and.w	r3, r3, #7
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d013      	beq.n	800a80a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f023 0307 	bic.w	r3, r3, #7
 800a7e8:	3308      	adds	r3, #8
 800a7ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f003 0307 	and.w	r3, r3, #7
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d009      	beq.n	800a80a <pvPortMalloc+0x6a>
 800a7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7fa:	f383 8811 	msr	BASEPRI, r3
 800a7fe:	f3bf 8f6f 	isb	sy
 800a802:	f3bf 8f4f 	dsb	sy
 800a806:	617b      	str	r3, [r7, #20]
 800a808:	e7fe      	b.n	800a808 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d068      	beq.n	800a8e2 <pvPortMalloc+0x142>
 800a810:	4b41      	ldr	r3, [pc, #260]	; (800a918 <pvPortMalloc+0x178>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	429a      	cmp	r2, r3
 800a818:	d863      	bhi.n	800a8e2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a81a:	4b40      	ldr	r3, [pc, #256]	; (800a91c <pvPortMalloc+0x17c>)
 800a81c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a81e:	4b3f      	ldr	r3, [pc, #252]	; (800a91c <pvPortMalloc+0x17c>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a824:	e004      	b.n	800a830 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800a826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a828:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	687a      	ldr	r2, [r7, #4]
 800a836:	429a      	cmp	r2, r3
 800a838:	d903      	bls.n	800a842 <pvPortMalloc+0xa2>
 800a83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d1f1      	bne.n	800a826 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a842:	4b33      	ldr	r3, [pc, #204]	; (800a910 <pvPortMalloc+0x170>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a848:	429a      	cmp	r2, r3
 800a84a:	d04a      	beq.n	800a8e2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a84c:	6a3b      	ldr	r3, [r7, #32]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	2208      	movs	r2, #8
 800a852:	4413      	add	r3, r2
 800a854:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a858:	681a      	ldr	r2, [r3, #0]
 800a85a:	6a3b      	ldr	r3, [r7, #32]
 800a85c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a860:	685a      	ldr	r2, [r3, #4]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	1ad2      	subs	r2, r2, r3
 800a866:	2308      	movs	r3, #8
 800a868:	005b      	lsls	r3, r3, #1
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d91e      	bls.n	800a8ac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a86e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	4413      	add	r3, r2
 800a874:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a876:	69bb      	ldr	r3, [r7, #24]
 800a878:	f003 0307 	and.w	r3, r3, #7
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d009      	beq.n	800a894 <pvPortMalloc+0xf4>
 800a880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a884:	f383 8811 	msr	BASEPRI, r3
 800a888:	f3bf 8f6f 	isb	sy
 800a88c:	f3bf 8f4f 	dsb	sy
 800a890:	613b      	str	r3, [r7, #16]
 800a892:	e7fe      	b.n	800a892 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a896:	685a      	ldr	r2, [r3, #4]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	1ad2      	subs	r2, r2, r3
 800a89c:	69bb      	ldr	r3, [r7, #24]
 800a89e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a8a6:	69b8      	ldr	r0, [r7, #24]
 800a8a8:	f000 f8f6 	bl	800aa98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a8ac:	4b1a      	ldr	r3, [pc, #104]	; (800a918 <pvPortMalloc+0x178>)
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	1ad3      	subs	r3, r2, r3
 800a8b6:	4a18      	ldr	r2, [pc, #96]	; (800a918 <pvPortMalloc+0x178>)
 800a8b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a8ba:	4b17      	ldr	r3, [pc, #92]	; (800a918 <pvPortMalloc+0x178>)
 800a8bc:	681a      	ldr	r2, [r3, #0]
 800a8be:	4b18      	ldr	r3, [pc, #96]	; (800a920 <pvPortMalloc+0x180>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d203      	bcs.n	800a8ce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a8c6:	4b14      	ldr	r3, [pc, #80]	; (800a918 <pvPortMalloc+0x178>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a15      	ldr	r2, [pc, #84]	; (800a920 <pvPortMalloc+0x180>)
 800a8cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d0:	685a      	ldr	r2, [r3, #4]
 800a8d2:	4b10      	ldr	r3, [pc, #64]	; (800a914 <pvPortMalloc+0x174>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	431a      	orrs	r2, r3
 800a8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8de:	2200      	movs	r2, #0
 800a8e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a8e2:	f7fe ff5d 	bl	80097a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8e6:	69fb      	ldr	r3, [r7, #28]
 800a8e8:	f003 0307 	and.w	r3, r3, #7
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d009      	beq.n	800a904 <pvPortMalloc+0x164>
 800a8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f4:	f383 8811 	msr	BASEPRI, r3
 800a8f8:	f3bf 8f6f 	isb	sy
 800a8fc:	f3bf 8f4f 	dsb	sy
 800a900:	60fb      	str	r3, [r7, #12]
 800a902:	e7fe      	b.n	800a902 <pvPortMalloc+0x162>
	return pvReturn;
 800a904:	69fb      	ldr	r3, [r7, #28]
}
 800a906:	4618      	mov	r0, r3
 800a908:	3728      	adds	r7, #40	; 0x28
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
 800a90e:	bf00      	nop
 800a910:	20004050 	.word	0x20004050
 800a914:	2000405c 	.word	0x2000405c
 800a918:	20004054 	.word	0x20004054
 800a91c:	20004048 	.word	0x20004048
 800a920:	20004058 	.word	0x20004058

0800a924 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b086      	sub	sp, #24
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d046      	beq.n	800a9c4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a936:	2308      	movs	r3, #8
 800a938:	425b      	negs	r3, r3
 800a93a:	697a      	ldr	r2, [r7, #20]
 800a93c:	4413      	add	r3, r2
 800a93e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	685a      	ldr	r2, [r3, #4]
 800a948:	4b20      	ldr	r3, [pc, #128]	; (800a9cc <vPortFree+0xa8>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4013      	ands	r3, r2
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d109      	bne.n	800a966 <vPortFree+0x42>
 800a952:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a956:	f383 8811 	msr	BASEPRI, r3
 800a95a:	f3bf 8f6f 	isb	sy
 800a95e:	f3bf 8f4f 	dsb	sy
 800a962:	60fb      	str	r3, [r7, #12]
 800a964:	e7fe      	b.n	800a964 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d009      	beq.n	800a982 <vPortFree+0x5e>
 800a96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a972:	f383 8811 	msr	BASEPRI, r3
 800a976:	f3bf 8f6f 	isb	sy
 800a97a:	f3bf 8f4f 	dsb	sy
 800a97e:	60bb      	str	r3, [r7, #8]
 800a980:	e7fe      	b.n	800a980 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	685a      	ldr	r2, [r3, #4]
 800a986:	4b11      	ldr	r3, [pc, #68]	; (800a9cc <vPortFree+0xa8>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	4013      	ands	r3, r2
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d019      	beq.n	800a9c4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d115      	bne.n	800a9c4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	685a      	ldr	r2, [r3, #4]
 800a99c:	4b0b      	ldr	r3, [pc, #44]	; (800a9cc <vPortFree+0xa8>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	43db      	mvns	r3, r3
 800a9a2:	401a      	ands	r2, r3
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a9a8:	f7fe feec 	bl	8009784 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	685a      	ldr	r2, [r3, #4]
 800a9b0:	4b07      	ldr	r3, [pc, #28]	; (800a9d0 <vPortFree+0xac>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4413      	add	r3, r2
 800a9b6:	4a06      	ldr	r2, [pc, #24]	; (800a9d0 <vPortFree+0xac>)
 800a9b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a9ba:	6938      	ldr	r0, [r7, #16]
 800a9bc:	f000 f86c 	bl	800aa98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a9c0:	f7fe feee 	bl	80097a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a9c4:	bf00      	nop
 800a9c6:	3718      	adds	r7, #24
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}
 800a9cc:	2000405c 	.word	0x2000405c
 800a9d0:	20004054 	.word	0x20004054

0800a9d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b085      	sub	sp, #20
 800a9d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a9da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a9de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a9e0:	4b27      	ldr	r3, [pc, #156]	; (800aa80 <prvHeapInit+0xac>)
 800a9e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f003 0307 	and.w	r3, r3, #7
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d00c      	beq.n	800aa08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	3307      	adds	r3, #7
 800a9f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f023 0307 	bic.w	r3, r3, #7
 800a9fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a9fc:	68ba      	ldr	r2, [r7, #8]
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	1ad3      	subs	r3, r2, r3
 800aa02:	4a1f      	ldr	r2, [pc, #124]	; (800aa80 <prvHeapInit+0xac>)
 800aa04:	4413      	add	r3, r2
 800aa06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aa0c:	4a1d      	ldr	r2, [pc, #116]	; (800aa84 <prvHeapInit+0xb0>)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aa12:	4b1c      	ldr	r3, [pc, #112]	; (800aa84 <prvHeapInit+0xb0>)
 800aa14:	2200      	movs	r2, #0
 800aa16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	68ba      	ldr	r2, [r7, #8]
 800aa1c:	4413      	add	r3, r2
 800aa1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aa20:	2208      	movs	r2, #8
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	1a9b      	subs	r3, r3, r2
 800aa26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	f023 0307 	bic.w	r3, r3, #7
 800aa2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	4a15      	ldr	r2, [pc, #84]	; (800aa88 <prvHeapInit+0xb4>)
 800aa34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aa36:	4b14      	ldr	r3, [pc, #80]	; (800aa88 <prvHeapInit+0xb4>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aa3e:	4b12      	ldr	r3, [pc, #72]	; (800aa88 <prvHeapInit+0xb4>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	2200      	movs	r2, #0
 800aa44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	68fa      	ldr	r2, [r7, #12]
 800aa4e:	1ad2      	subs	r2, r2, r3
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aa54:	4b0c      	ldr	r3, [pc, #48]	; (800aa88 <prvHeapInit+0xb4>)
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	4a0a      	ldr	r2, [pc, #40]	; (800aa8c <prvHeapInit+0xb8>)
 800aa62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	4a09      	ldr	r2, [pc, #36]	; (800aa90 <prvHeapInit+0xbc>)
 800aa6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aa6c:	4b09      	ldr	r3, [pc, #36]	; (800aa94 <prvHeapInit+0xc0>)
 800aa6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aa72:	601a      	str	r2, [r3, #0]
}
 800aa74:	bf00      	nop
 800aa76:	3714      	adds	r7, #20
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr
 800aa80:	20000448 	.word	0x20000448
 800aa84:	20004048 	.word	0x20004048
 800aa88:	20004050 	.word	0x20004050
 800aa8c:	20004058 	.word	0x20004058
 800aa90:	20004054 	.word	0x20004054
 800aa94:	2000405c 	.word	0x2000405c

0800aa98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b085      	sub	sp, #20
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aaa0:	4b28      	ldr	r3, [pc, #160]	; (800ab44 <prvInsertBlockIntoFreeList+0xac>)
 800aaa2:	60fb      	str	r3, [r7, #12]
 800aaa4:	e002      	b.n	800aaac <prvInsertBlockIntoFreeList+0x14>
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	60fb      	str	r3, [r7, #12]
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d8f7      	bhi.n	800aaa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	68ba      	ldr	r2, [r7, #8]
 800aac0:	4413      	add	r3, r2
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d108      	bne.n	800aada <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	685a      	ldr	r2, [r3, #4]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	441a      	add	r2, r3
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	685b      	ldr	r3, [r3, #4]
 800aae2:	68ba      	ldr	r2, [r7, #8]
 800aae4:	441a      	add	r2, r3
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d118      	bne.n	800ab20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	4b15      	ldr	r3, [pc, #84]	; (800ab48 <prvInsertBlockIntoFreeList+0xb0>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	d00d      	beq.n	800ab16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	685a      	ldr	r2, [r3, #4]
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	441a      	add	r2, r3
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	681a      	ldr	r2, [r3, #0]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	601a      	str	r2, [r3, #0]
 800ab14:	e008      	b.n	800ab28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ab16:	4b0c      	ldr	r3, [pc, #48]	; (800ab48 <prvInsertBlockIntoFreeList+0xb0>)
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	601a      	str	r2, [r3, #0]
 800ab1e:	e003      	b.n	800ab28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d002      	beq.n	800ab36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	687a      	ldr	r2, [r7, #4]
 800ab34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab36:	bf00      	nop
 800ab38:	3714      	adds	r7, #20
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr
 800ab42:	bf00      	nop
 800ab44:	20004048 	.word	0x20004048
 800ab48:	20004050 	.word	0x20004050

0800ab4c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ab50:	2201      	movs	r2, #1
 800ab52:	490e      	ldr	r1, [pc, #56]	; (800ab8c <MX_USB_HOST_Init+0x40>)
 800ab54:	480e      	ldr	r0, [pc, #56]	; (800ab90 <MX_USB_HOST_Init+0x44>)
 800ab56:	f7fb fcb1 	bl	80064bc <USBH_Init>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d001      	beq.n	800ab64 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ab60:	f7f6 faba 	bl	80010d8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ab64:	490b      	ldr	r1, [pc, #44]	; (800ab94 <MX_USB_HOST_Init+0x48>)
 800ab66:	480a      	ldr	r0, [pc, #40]	; (800ab90 <MX_USB_HOST_Init+0x44>)
 800ab68:	f7fb fd5e 	bl	8006628 <USBH_RegisterClass>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d001      	beq.n	800ab76 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ab72:	f7f6 fab1 	bl	80010d8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ab76:	4806      	ldr	r0, [pc, #24]	; (800ab90 <MX_USB_HOST_Init+0x44>)
 800ab78:	f7fb fde2 	bl	8006740 <USBH_Start>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d001      	beq.n	800ab86 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ab82:	f7f6 faa9 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ab86:	bf00      	nop
 800ab88:	bd80      	pop	{r7, pc}
 800ab8a:	bf00      	nop
 800ab8c:	0800ab99 	.word	0x0800ab99
 800ab90:	20004188 	.word	0x20004188
 800ab94:	2000000c 	.word	0x2000000c

0800ab98 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b083      	sub	sp, #12
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	460b      	mov	r3, r1
 800aba2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800aba4:	78fb      	ldrb	r3, [r7, #3]
 800aba6:	3b01      	subs	r3, #1
 800aba8:	2b04      	cmp	r3, #4
 800abaa:	d819      	bhi.n	800abe0 <USBH_UserProcess+0x48>
 800abac:	a201      	add	r2, pc, #4	; (adr r2, 800abb4 <USBH_UserProcess+0x1c>)
 800abae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abb2:	bf00      	nop
 800abb4:	0800abe1 	.word	0x0800abe1
 800abb8:	0800abd1 	.word	0x0800abd1
 800abbc:	0800abe1 	.word	0x0800abe1
 800abc0:	0800abd9 	.word	0x0800abd9
 800abc4:	0800abc9 	.word	0x0800abc9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800abc8:	4b09      	ldr	r3, [pc, #36]	; (800abf0 <USBH_UserProcess+0x58>)
 800abca:	2203      	movs	r2, #3
 800abcc:	701a      	strb	r2, [r3, #0]
  break;
 800abce:	e008      	b.n	800abe2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800abd0:	4b07      	ldr	r3, [pc, #28]	; (800abf0 <USBH_UserProcess+0x58>)
 800abd2:	2202      	movs	r2, #2
 800abd4:	701a      	strb	r2, [r3, #0]
  break;
 800abd6:	e004      	b.n	800abe2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800abd8:	4b05      	ldr	r3, [pc, #20]	; (800abf0 <USBH_UserProcess+0x58>)
 800abda:	2201      	movs	r2, #1
 800abdc:	701a      	strb	r2, [r3, #0]
  break;
 800abde:	e000      	b.n	800abe2 <USBH_UserProcess+0x4a>

  default:
  break;
 800abe0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800abe2:	bf00      	nop
 800abe4:	370c      	adds	r7, #12
 800abe6:	46bd      	mov	sp, r7
 800abe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abec:	4770      	bx	lr
 800abee:	bf00      	nop
 800abf0:	20004060 	.word	0x20004060

0800abf4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b08a      	sub	sp, #40	; 0x28
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800abfc:	f107 0314 	add.w	r3, r7, #20
 800ac00:	2200      	movs	r2, #0
 800ac02:	601a      	str	r2, [r3, #0]
 800ac04:	605a      	str	r2, [r3, #4]
 800ac06:	609a      	str	r2, [r3, #8]
 800ac08:	60da      	str	r2, [r3, #12]
 800ac0a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac14:	d147      	bne.n	800aca6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac16:	2300      	movs	r3, #0
 800ac18:	613b      	str	r3, [r7, #16]
 800ac1a:	4b25      	ldr	r3, [pc, #148]	; (800acb0 <HAL_HCD_MspInit+0xbc>)
 800ac1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac1e:	4a24      	ldr	r2, [pc, #144]	; (800acb0 <HAL_HCD_MspInit+0xbc>)
 800ac20:	f043 0301 	orr.w	r3, r3, #1
 800ac24:	6313      	str	r3, [r2, #48]	; 0x30
 800ac26:	4b22      	ldr	r3, [pc, #136]	; (800acb0 <HAL_HCD_MspInit+0xbc>)
 800ac28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac2a:	f003 0301 	and.w	r3, r3, #1
 800ac2e:	613b      	str	r3, [r7, #16]
 800ac30:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ac32:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ac40:	f107 0314 	add.w	r3, r7, #20
 800ac44:	4619      	mov	r1, r3
 800ac46:	481b      	ldr	r0, [pc, #108]	; (800acb4 <HAL_HCD_MspInit+0xc0>)
 800ac48:	f7f6 fd66 	bl	8001718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ac4c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ac50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac52:	2302      	movs	r3, #2
 800ac54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac56:	2300      	movs	r3, #0
 800ac58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ac5e:	230a      	movs	r3, #10
 800ac60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac62:	f107 0314 	add.w	r3, r7, #20
 800ac66:	4619      	mov	r1, r3
 800ac68:	4812      	ldr	r0, [pc, #72]	; (800acb4 <HAL_HCD_MspInit+0xc0>)
 800ac6a:	f7f6 fd55 	bl	8001718 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ac6e:	4b10      	ldr	r3, [pc, #64]	; (800acb0 <HAL_HCD_MspInit+0xbc>)
 800ac70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac72:	4a0f      	ldr	r2, [pc, #60]	; (800acb0 <HAL_HCD_MspInit+0xbc>)
 800ac74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac78:	6353      	str	r3, [r2, #52]	; 0x34
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	60fb      	str	r3, [r7, #12]
 800ac7e:	4b0c      	ldr	r3, [pc, #48]	; (800acb0 <HAL_HCD_MspInit+0xbc>)
 800ac80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac82:	4a0b      	ldr	r2, [pc, #44]	; (800acb0 <HAL_HCD_MspInit+0xbc>)
 800ac84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ac88:	6453      	str	r3, [r2, #68]	; 0x44
 800ac8a:	4b09      	ldr	r3, [pc, #36]	; (800acb0 <HAL_HCD_MspInit+0xbc>)
 800ac8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac92:	60fb      	str	r3, [r7, #12]
 800ac94:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ac96:	2200      	movs	r2, #0
 800ac98:	2105      	movs	r1, #5
 800ac9a:	2043      	movs	r0, #67	; 0x43
 800ac9c:	f7f6 fd12 	bl	80016c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800aca0:	2043      	movs	r0, #67	; 0x43
 800aca2:	f7f6 fd2b 	bl	80016fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800aca6:	bf00      	nop
 800aca8:	3728      	adds	r7, #40	; 0x28
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
 800acae:	bf00      	nop
 800acb0:	40023800 	.word	0x40023800
 800acb4:	40020000 	.word	0x40020000

0800acb8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b082      	sub	sp, #8
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7fc f9e7 	bl	800709a <USBH_LL_IncTimer>
}
 800accc:	bf00      	nop
 800acce:	3708      	adds	r7, #8
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}

0800acd4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7fc fa2b 	bl	800713e <USBH_LL_Connect>
}
 800ace8:	bf00      	nop
 800acea:	3708      	adds	r7, #8
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b082      	sub	sp, #8
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800acfe:	4618      	mov	r0, r3
 800ad00:	f7fc fa40 	bl	8007184 <USBH_LL_Disconnect>
}
 800ad04:	bf00      	nop
 800ad06:	3708      	adds	r7, #8
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b082      	sub	sp, #8
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
 800ad14:	460b      	mov	r3, r1
 800ad16:	70fb      	strb	r3, [r7, #3]
 800ad18:	4613      	mov	r3, r2
 800ad1a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7fc fa75 	bl	8007212 <USBH_LL_NotifyURBChange>
#endif
}
 800ad28:	bf00      	nop
 800ad2a:	3708      	adds	r7, #8
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7fc f9d5 	bl	80070ee <USBH_LL_PortEnabled>
}
 800ad44:	bf00      	nop
 800ad46:	3708      	adds	r7, #8
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b082      	sub	sp, #8
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f7fc f9e1 	bl	8007122 <USBH_LL_PortDisabled>
}
 800ad60:	bf00      	nop
 800ad62:	3708      	adds	r7, #8
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ad76:	2b01      	cmp	r3, #1
 800ad78:	d12a      	bne.n	800add0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ad7a:	4a18      	ldr	r2, [pc, #96]	; (800addc <USBH_LL_Init+0x74>)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	4a15      	ldr	r2, [pc, #84]	; (800addc <USBH_LL_Init+0x74>)
 800ad86:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ad8a:	4b14      	ldr	r3, [pc, #80]	; (800addc <USBH_LL_Init+0x74>)
 800ad8c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ad90:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ad92:	4b12      	ldr	r3, [pc, #72]	; (800addc <USBH_LL_Init+0x74>)
 800ad94:	2208      	movs	r2, #8
 800ad96:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ad98:	4b10      	ldr	r3, [pc, #64]	; (800addc <USBH_LL_Init+0x74>)
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ad9e:	4b0f      	ldr	r3, [pc, #60]	; (800addc <USBH_LL_Init+0x74>)
 800ada0:	2200      	movs	r2, #0
 800ada2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ada4:	4b0d      	ldr	r3, [pc, #52]	; (800addc <USBH_LL_Init+0x74>)
 800ada6:	2202      	movs	r2, #2
 800ada8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800adaa:	4b0c      	ldr	r3, [pc, #48]	; (800addc <USBH_LL_Init+0x74>)
 800adac:	2200      	movs	r2, #0
 800adae:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800adb0:	480a      	ldr	r0, [pc, #40]	; (800addc <USBH_LL_Init+0x74>)
 800adb2:	f7f6 fe7c 	bl	8001aae <HAL_HCD_Init>
 800adb6:	4603      	mov	r3, r0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d001      	beq.n	800adc0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800adbc:	f7f6 f98c 	bl	80010d8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800adc0:	4806      	ldr	r0, [pc, #24]	; (800addc <USBH_LL_Init+0x74>)
 800adc2:	f7f7 fa7f 	bl	80022c4 <HAL_HCD_GetCurrentFrame>
 800adc6:	4603      	mov	r3, r0
 800adc8:	4619      	mov	r1, r3
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f7fc f956 	bl	800707c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800add0:	2300      	movs	r3, #0
}
 800add2:	4618      	mov	r0, r3
 800add4:	3708      	adds	r7, #8
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	2000456c 	.word	0x2000456c

0800ade0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b084      	sub	sp, #16
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ade8:	2300      	movs	r3, #0
 800adea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800adec:	2300      	movs	r3, #0
 800adee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7f7 f9ec 	bl	80021d4 <HAL_HCD_Start>
 800adfc:	4603      	mov	r3, r0
 800adfe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ae00:	7bfb      	ldrb	r3, [r7, #15]
 800ae02:	4618      	mov	r0, r3
 800ae04:	f000 f95c 	bl	800b0c0 <USBH_Get_USB_Status>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3710      	adds	r7, #16
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}

0800ae16 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ae16:	b580      	push	{r7, lr}
 800ae18:	b084      	sub	sp, #16
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae22:	2300      	movs	r3, #0
 800ae24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f7f7 f9f4 	bl	800221a <HAL_HCD_Stop>
 800ae32:	4603      	mov	r3, r0
 800ae34:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ae36:	7bfb      	ldrb	r3, [r7, #15]
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f000 f941 	bl	800b0c0 <USBH_Get_USB_Status>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae42:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3710      	adds	r7, #16
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ae54:	2301      	movs	r3, #1
 800ae56:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f7f7 fa3e 	bl	80022e0 <HAL_HCD_GetCurrentSpeed>
 800ae64:	4603      	mov	r3, r0
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d007      	beq.n	800ae7a <USBH_LL_GetSpeed+0x2e>
 800ae6a:	2b01      	cmp	r3, #1
 800ae6c:	d302      	bcc.n	800ae74 <USBH_LL_GetSpeed+0x28>
 800ae6e:	2b02      	cmp	r3, #2
 800ae70:	d006      	beq.n	800ae80 <USBH_LL_GetSpeed+0x34>
 800ae72:	e008      	b.n	800ae86 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ae74:	2300      	movs	r3, #0
 800ae76:	73fb      	strb	r3, [r7, #15]
    break;
 800ae78:	e008      	b.n	800ae8c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	73fb      	strb	r3, [r7, #15]
    break;
 800ae7e:	e005      	b.n	800ae8c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ae80:	2302      	movs	r3, #2
 800ae82:	73fb      	strb	r3, [r7, #15]
    break;
 800ae84:	e002      	b.n	800ae8c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800ae86:	2301      	movs	r3, #1
 800ae88:	73fb      	strb	r3, [r7, #15]
    break;
 800ae8a:	bf00      	nop
  }
  return  speed;
 800ae8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3710      	adds	r7, #16
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}

0800ae96 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b084      	sub	sp, #16
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aea2:	2300      	movs	r3, #0
 800aea4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aeac:	4618      	mov	r0, r3
 800aeae:	f7f7 f9d1 	bl	8002254 <HAL_HCD_ResetPort>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aeb6:	7bfb      	ldrb	r3, [r7, #15]
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f000 f901 	bl	800b0c0 <USBH_Get_USB_Status>
 800aebe:	4603      	mov	r3, r0
 800aec0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aec2:	7bbb      	ldrb	r3, [r7, #14]
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3710      	adds	r7, #16
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b082      	sub	sp, #8
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	460b      	mov	r3, r1
 800aed6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aede:	78fa      	ldrb	r2, [r7, #3]
 800aee0:	4611      	mov	r1, r2
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7f7 f9d9 	bl	800229a <HAL_HCD_HC_GetXferCount>
 800aee8:	4603      	mov	r3, r0
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3708      	adds	r7, #8
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}

0800aef2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800aef2:	b590      	push	{r4, r7, lr}
 800aef4:	b089      	sub	sp, #36	; 0x24
 800aef6:	af04      	add	r7, sp, #16
 800aef8:	6078      	str	r0, [r7, #4]
 800aefa:	4608      	mov	r0, r1
 800aefc:	4611      	mov	r1, r2
 800aefe:	461a      	mov	r2, r3
 800af00:	4603      	mov	r3, r0
 800af02:	70fb      	strb	r3, [r7, #3]
 800af04:	460b      	mov	r3, r1
 800af06:	70bb      	strb	r3, [r7, #2]
 800af08:	4613      	mov	r3, r2
 800af0a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af0c:	2300      	movs	r3, #0
 800af0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af10:	2300      	movs	r3, #0
 800af12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800af1a:	787c      	ldrb	r4, [r7, #1]
 800af1c:	78ba      	ldrb	r2, [r7, #2]
 800af1e:	78f9      	ldrb	r1, [r7, #3]
 800af20:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800af22:	9302      	str	r3, [sp, #8]
 800af24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800af28:	9301      	str	r3, [sp, #4]
 800af2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800af2e:	9300      	str	r3, [sp, #0]
 800af30:	4623      	mov	r3, r4
 800af32:	f7f6 fe1e 	bl	8001b72 <HAL_HCD_HC_Init>
 800af36:	4603      	mov	r3, r0
 800af38:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800af3a:	7bfb      	ldrb	r3, [r7, #15]
 800af3c:	4618      	mov	r0, r3
 800af3e:	f000 f8bf 	bl	800b0c0 <USBH_Get_USB_Status>
 800af42:	4603      	mov	r3, r0
 800af44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af46:	7bbb      	ldrb	r3, [r7, #14]
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3714      	adds	r7, #20
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd90      	pop	{r4, r7, pc}

0800af50 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	460b      	mov	r3, r1
 800af5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af5c:	2300      	movs	r3, #0
 800af5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af60:	2300      	movs	r3, #0
 800af62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800af6a:	78fa      	ldrb	r2, [r7, #3]
 800af6c:	4611      	mov	r1, r2
 800af6e:	4618      	mov	r0, r3
 800af70:	f7f6 fe97 	bl	8001ca2 <HAL_HCD_HC_Halt>
 800af74:	4603      	mov	r3, r0
 800af76:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800af78:	7bfb      	ldrb	r3, [r7, #15]
 800af7a:	4618      	mov	r0, r3
 800af7c:	f000 f8a0 	bl	800b0c0 <USBH_Get_USB_Status>
 800af80:	4603      	mov	r3, r0
 800af82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af84:	7bbb      	ldrb	r3, [r7, #14]
}
 800af86:	4618      	mov	r0, r3
 800af88:	3710      	adds	r7, #16
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}

0800af8e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800af8e:	b590      	push	{r4, r7, lr}
 800af90:	b089      	sub	sp, #36	; 0x24
 800af92:	af04      	add	r7, sp, #16
 800af94:	6078      	str	r0, [r7, #4]
 800af96:	4608      	mov	r0, r1
 800af98:	4611      	mov	r1, r2
 800af9a:	461a      	mov	r2, r3
 800af9c:	4603      	mov	r3, r0
 800af9e:	70fb      	strb	r3, [r7, #3]
 800afa0:	460b      	mov	r3, r1
 800afa2:	70bb      	strb	r3, [r7, #2]
 800afa4:	4613      	mov	r3, r2
 800afa6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afa8:	2300      	movs	r3, #0
 800afaa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800afac:	2300      	movs	r3, #0
 800afae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800afb6:	787c      	ldrb	r4, [r7, #1]
 800afb8:	78ba      	ldrb	r2, [r7, #2]
 800afba:	78f9      	ldrb	r1, [r7, #3]
 800afbc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800afc0:	9303      	str	r3, [sp, #12]
 800afc2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800afc4:	9302      	str	r3, [sp, #8]
 800afc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc8:	9301      	str	r3, [sp, #4]
 800afca:	f897 3020 	ldrb.w	r3, [r7, #32]
 800afce:	9300      	str	r3, [sp, #0]
 800afd0:	4623      	mov	r3, r4
 800afd2:	f7f6 fe89 	bl	8001ce8 <HAL_HCD_HC_SubmitRequest>
 800afd6:	4603      	mov	r3, r0
 800afd8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800afda:	7bfb      	ldrb	r3, [r7, #15]
 800afdc:	4618      	mov	r0, r3
 800afde:	f000 f86f 	bl	800b0c0 <USBH_Get_USB_Status>
 800afe2:	4603      	mov	r3, r0
 800afe4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afe6:	7bbb      	ldrb	r3, [r7, #14]
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3714      	adds	r7, #20
 800afec:	46bd      	mov	sp, r7
 800afee:	bd90      	pop	{r4, r7, pc}

0800aff0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	460b      	mov	r3, r1
 800affa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b002:	78fa      	ldrb	r2, [r7, #3]
 800b004:	4611      	mov	r1, r2
 800b006:	4618      	mov	r0, r3
 800b008:	f7f7 f932 	bl	8002270 <HAL_HCD_HC_GetURBState>
 800b00c:	4603      	mov	r3, r0
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3708      	adds	r7, #8
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}

0800b016 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b016:	b580      	push	{r7, lr}
 800b018:	b082      	sub	sp, #8
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	6078      	str	r0, [r7, #4]
 800b01e:	460b      	mov	r3, r1
 800b020:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b028:	2b01      	cmp	r3, #1
 800b02a:	d103      	bne.n	800b034 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b02c:	78fb      	ldrb	r3, [r7, #3]
 800b02e:	4618      	mov	r0, r3
 800b030:	f000 f872 	bl	800b118 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b034:	20c8      	movs	r0, #200	; 0xc8
 800b036:	f7f6 fa6b 	bl	8001510 <HAL_Delay>
  return USBH_OK;
 800b03a:	2300      	movs	r3, #0
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3708      	adds	r7, #8
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b044:	b480      	push	{r7}
 800b046:	b085      	sub	sp, #20
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	460b      	mov	r3, r1
 800b04e:	70fb      	strb	r3, [r7, #3]
 800b050:	4613      	mov	r3, r2
 800b052:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b05a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b05c:	78fa      	ldrb	r2, [r7, #3]
 800b05e:	68f9      	ldr	r1, [r7, #12]
 800b060:	4613      	mov	r3, r2
 800b062:	009b      	lsls	r3, r3, #2
 800b064:	4413      	add	r3, r2
 800b066:	00db      	lsls	r3, r3, #3
 800b068:	440b      	add	r3, r1
 800b06a:	333b      	adds	r3, #59	; 0x3b
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d00a      	beq.n	800b088 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b072:	78fa      	ldrb	r2, [r7, #3]
 800b074:	68f9      	ldr	r1, [r7, #12]
 800b076:	4613      	mov	r3, r2
 800b078:	009b      	lsls	r3, r3, #2
 800b07a:	4413      	add	r3, r2
 800b07c:	00db      	lsls	r3, r3, #3
 800b07e:	440b      	add	r3, r1
 800b080:	3350      	adds	r3, #80	; 0x50
 800b082:	78ba      	ldrb	r2, [r7, #2]
 800b084:	701a      	strb	r2, [r3, #0]
 800b086:	e009      	b.n	800b09c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b088:	78fa      	ldrb	r2, [r7, #3]
 800b08a:	68f9      	ldr	r1, [r7, #12]
 800b08c:	4613      	mov	r3, r2
 800b08e:	009b      	lsls	r3, r3, #2
 800b090:	4413      	add	r3, r2
 800b092:	00db      	lsls	r3, r3, #3
 800b094:	440b      	add	r3, r1
 800b096:	3351      	adds	r3, #81	; 0x51
 800b098:	78ba      	ldrb	r2, [r7, #2]
 800b09a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b09c:	2300      	movs	r3, #0
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3714      	adds	r7, #20
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr

0800b0aa <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b0aa:	b580      	push	{r7, lr}
 800b0ac:	b082      	sub	sp, #8
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f7f6 fa2c 	bl	8001510 <HAL_Delay>
}
 800b0b8:	bf00      	nop
 800b0ba:	3708      	adds	r7, #8
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}

0800b0c0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b085      	sub	sp, #20
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b0ce:	79fb      	ldrb	r3, [r7, #7]
 800b0d0:	2b03      	cmp	r3, #3
 800b0d2:	d817      	bhi.n	800b104 <USBH_Get_USB_Status+0x44>
 800b0d4:	a201      	add	r2, pc, #4	; (adr r2, 800b0dc <USBH_Get_USB_Status+0x1c>)
 800b0d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0da:	bf00      	nop
 800b0dc:	0800b0ed 	.word	0x0800b0ed
 800b0e0:	0800b0f3 	.word	0x0800b0f3
 800b0e4:	0800b0f9 	.word	0x0800b0f9
 800b0e8:	0800b0ff 	.word	0x0800b0ff
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	73fb      	strb	r3, [r7, #15]
    break;
 800b0f0:	e00b      	b.n	800b10a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b0f2:	2302      	movs	r3, #2
 800b0f4:	73fb      	strb	r3, [r7, #15]
    break;
 800b0f6:	e008      	b.n	800b10a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	73fb      	strb	r3, [r7, #15]
    break;
 800b0fc:	e005      	b.n	800b10a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b0fe:	2302      	movs	r3, #2
 800b100:	73fb      	strb	r3, [r7, #15]
    break;
 800b102:	e002      	b.n	800b10a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b104:	2302      	movs	r3, #2
 800b106:	73fb      	strb	r3, [r7, #15]
    break;
 800b108:	bf00      	nop
  }
  return usb_status;
 800b10a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3714      	adds	r7, #20
 800b110:	46bd      	mov	sp, r7
 800b112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b116:	4770      	bx	lr

0800b118 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b084      	sub	sp, #16
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	4603      	mov	r3, r0
 800b120:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b122:	79fb      	ldrb	r3, [r7, #7]
 800b124:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b126:	79fb      	ldrb	r3, [r7, #7]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d102      	bne.n	800b132 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800b12c:	2301      	movs	r3, #1
 800b12e:	73fb      	strb	r3, [r7, #15]
 800b130:	e001      	b.n	800b136 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800b132:	2300      	movs	r3, #0
 800b134:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b136:	7bfb      	ldrb	r3, [r7, #15]
 800b138:	461a      	mov	r2, r3
 800b13a:	2101      	movs	r1, #1
 800b13c:	4803      	ldr	r0, [pc, #12]	; (800b14c <MX_DriverVbusFS+0x34>)
 800b13e:	f7f6 fc9d 	bl	8001a7c <HAL_GPIO_WritePin>
}
 800b142:	bf00      	nop
 800b144:	3710      	adds	r7, #16
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	40020800 	.word	0x40020800

0800b150 <__errno>:
 800b150:	4b01      	ldr	r3, [pc, #4]	; (800b158 <__errno+0x8>)
 800b152:	6818      	ldr	r0, [r3, #0]
 800b154:	4770      	bx	lr
 800b156:	bf00      	nop
 800b158:	20000030 	.word	0x20000030

0800b15c <__libc_init_array>:
 800b15c:	b570      	push	{r4, r5, r6, lr}
 800b15e:	4e0d      	ldr	r6, [pc, #52]	; (800b194 <__libc_init_array+0x38>)
 800b160:	4c0d      	ldr	r4, [pc, #52]	; (800b198 <__libc_init_array+0x3c>)
 800b162:	1ba4      	subs	r4, r4, r6
 800b164:	10a4      	asrs	r4, r4, #2
 800b166:	2500      	movs	r5, #0
 800b168:	42a5      	cmp	r5, r4
 800b16a:	d109      	bne.n	800b180 <__libc_init_array+0x24>
 800b16c:	4e0b      	ldr	r6, [pc, #44]	; (800b19c <__libc_init_array+0x40>)
 800b16e:	4c0c      	ldr	r4, [pc, #48]	; (800b1a0 <__libc_init_array+0x44>)
 800b170:	f000 f8f6 	bl	800b360 <_init>
 800b174:	1ba4      	subs	r4, r4, r6
 800b176:	10a4      	asrs	r4, r4, #2
 800b178:	2500      	movs	r5, #0
 800b17a:	42a5      	cmp	r5, r4
 800b17c:	d105      	bne.n	800b18a <__libc_init_array+0x2e>
 800b17e:	bd70      	pop	{r4, r5, r6, pc}
 800b180:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b184:	4798      	blx	r3
 800b186:	3501      	adds	r5, #1
 800b188:	e7ee      	b.n	800b168 <__libc_init_array+0xc>
 800b18a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b18e:	4798      	blx	r3
 800b190:	3501      	adds	r5, #1
 800b192:	e7f2      	b.n	800b17a <__libc_init_array+0x1e>
 800b194:	0800b45c 	.word	0x0800b45c
 800b198:	0800b45c 	.word	0x0800b45c
 800b19c:	0800b45c 	.word	0x0800b45c
 800b1a0:	0800b460 	.word	0x0800b460

0800b1a4 <malloc>:
 800b1a4:	4b02      	ldr	r3, [pc, #8]	; (800b1b0 <malloc+0xc>)
 800b1a6:	4601      	mov	r1, r0
 800b1a8:	6818      	ldr	r0, [r3, #0]
 800b1aa:	f000 b86d 	b.w	800b288 <_malloc_r>
 800b1ae:	bf00      	nop
 800b1b0:	20000030 	.word	0x20000030

0800b1b4 <free>:
 800b1b4:	4b02      	ldr	r3, [pc, #8]	; (800b1c0 <free+0xc>)
 800b1b6:	4601      	mov	r1, r0
 800b1b8:	6818      	ldr	r0, [r3, #0]
 800b1ba:	f000 b817 	b.w	800b1ec <_free_r>
 800b1be:	bf00      	nop
 800b1c0:	20000030 	.word	0x20000030

0800b1c4 <memcpy>:
 800b1c4:	b510      	push	{r4, lr}
 800b1c6:	1e43      	subs	r3, r0, #1
 800b1c8:	440a      	add	r2, r1
 800b1ca:	4291      	cmp	r1, r2
 800b1cc:	d100      	bne.n	800b1d0 <memcpy+0xc>
 800b1ce:	bd10      	pop	{r4, pc}
 800b1d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1d8:	e7f7      	b.n	800b1ca <memcpy+0x6>

0800b1da <memset>:
 800b1da:	4402      	add	r2, r0
 800b1dc:	4603      	mov	r3, r0
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d100      	bne.n	800b1e4 <memset+0xa>
 800b1e2:	4770      	bx	lr
 800b1e4:	f803 1b01 	strb.w	r1, [r3], #1
 800b1e8:	e7f9      	b.n	800b1de <memset+0x4>
	...

0800b1ec <_free_r>:
 800b1ec:	b538      	push	{r3, r4, r5, lr}
 800b1ee:	4605      	mov	r5, r0
 800b1f0:	2900      	cmp	r1, #0
 800b1f2:	d045      	beq.n	800b280 <_free_r+0x94>
 800b1f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1f8:	1f0c      	subs	r4, r1, #4
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	bfb8      	it	lt
 800b1fe:	18e4      	addlt	r4, r4, r3
 800b200:	f000 f8ac 	bl	800b35c <__malloc_lock>
 800b204:	4a1f      	ldr	r2, [pc, #124]	; (800b284 <_free_r+0x98>)
 800b206:	6813      	ldr	r3, [r2, #0]
 800b208:	4610      	mov	r0, r2
 800b20a:	b933      	cbnz	r3, 800b21a <_free_r+0x2e>
 800b20c:	6063      	str	r3, [r4, #4]
 800b20e:	6014      	str	r4, [r2, #0]
 800b210:	4628      	mov	r0, r5
 800b212:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b216:	f000 b8a2 	b.w	800b35e <__malloc_unlock>
 800b21a:	42a3      	cmp	r3, r4
 800b21c:	d90c      	bls.n	800b238 <_free_r+0x4c>
 800b21e:	6821      	ldr	r1, [r4, #0]
 800b220:	1862      	adds	r2, r4, r1
 800b222:	4293      	cmp	r3, r2
 800b224:	bf04      	itt	eq
 800b226:	681a      	ldreq	r2, [r3, #0]
 800b228:	685b      	ldreq	r3, [r3, #4]
 800b22a:	6063      	str	r3, [r4, #4]
 800b22c:	bf04      	itt	eq
 800b22e:	1852      	addeq	r2, r2, r1
 800b230:	6022      	streq	r2, [r4, #0]
 800b232:	6004      	str	r4, [r0, #0]
 800b234:	e7ec      	b.n	800b210 <_free_r+0x24>
 800b236:	4613      	mov	r3, r2
 800b238:	685a      	ldr	r2, [r3, #4]
 800b23a:	b10a      	cbz	r2, 800b240 <_free_r+0x54>
 800b23c:	42a2      	cmp	r2, r4
 800b23e:	d9fa      	bls.n	800b236 <_free_r+0x4a>
 800b240:	6819      	ldr	r1, [r3, #0]
 800b242:	1858      	adds	r0, r3, r1
 800b244:	42a0      	cmp	r0, r4
 800b246:	d10b      	bne.n	800b260 <_free_r+0x74>
 800b248:	6820      	ldr	r0, [r4, #0]
 800b24a:	4401      	add	r1, r0
 800b24c:	1858      	adds	r0, r3, r1
 800b24e:	4282      	cmp	r2, r0
 800b250:	6019      	str	r1, [r3, #0]
 800b252:	d1dd      	bne.n	800b210 <_free_r+0x24>
 800b254:	6810      	ldr	r0, [r2, #0]
 800b256:	6852      	ldr	r2, [r2, #4]
 800b258:	605a      	str	r2, [r3, #4]
 800b25a:	4401      	add	r1, r0
 800b25c:	6019      	str	r1, [r3, #0]
 800b25e:	e7d7      	b.n	800b210 <_free_r+0x24>
 800b260:	d902      	bls.n	800b268 <_free_r+0x7c>
 800b262:	230c      	movs	r3, #12
 800b264:	602b      	str	r3, [r5, #0]
 800b266:	e7d3      	b.n	800b210 <_free_r+0x24>
 800b268:	6820      	ldr	r0, [r4, #0]
 800b26a:	1821      	adds	r1, r4, r0
 800b26c:	428a      	cmp	r2, r1
 800b26e:	bf04      	itt	eq
 800b270:	6811      	ldreq	r1, [r2, #0]
 800b272:	6852      	ldreq	r2, [r2, #4]
 800b274:	6062      	str	r2, [r4, #4]
 800b276:	bf04      	itt	eq
 800b278:	1809      	addeq	r1, r1, r0
 800b27a:	6021      	streq	r1, [r4, #0]
 800b27c:	605c      	str	r4, [r3, #4]
 800b27e:	e7c7      	b.n	800b210 <_free_r+0x24>
 800b280:	bd38      	pop	{r3, r4, r5, pc}
 800b282:	bf00      	nop
 800b284:	20004064 	.word	0x20004064

0800b288 <_malloc_r>:
 800b288:	b570      	push	{r4, r5, r6, lr}
 800b28a:	1ccd      	adds	r5, r1, #3
 800b28c:	f025 0503 	bic.w	r5, r5, #3
 800b290:	3508      	adds	r5, #8
 800b292:	2d0c      	cmp	r5, #12
 800b294:	bf38      	it	cc
 800b296:	250c      	movcc	r5, #12
 800b298:	2d00      	cmp	r5, #0
 800b29a:	4606      	mov	r6, r0
 800b29c:	db01      	blt.n	800b2a2 <_malloc_r+0x1a>
 800b29e:	42a9      	cmp	r1, r5
 800b2a0:	d903      	bls.n	800b2aa <_malloc_r+0x22>
 800b2a2:	230c      	movs	r3, #12
 800b2a4:	6033      	str	r3, [r6, #0]
 800b2a6:	2000      	movs	r0, #0
 800b2a8:	bd70      	pop	{r4, r5, r6, pc}
 800b2aa:	f000 f857 	bl	800b35c <__malloc_lock>
 800b2ae:	4a21      	ldr	r2, [pc, #132]	; (800b334 <_malloc_r+0xac>)
 800b2b0:	6814      	ldr	r4, [r2, #0]
 800b2b2:	4621      	mov	r1, r4
 800b2b4:	b991      	cbnz	r1, 800b2dc <_malloc_r+0x54>
 800b2b6:	4c20      	ldr	r4, [pc, #128]	; (800b338 <_malloc_r+0xb0>)
 800b2b8:	6823      	ldr	r3, [r4, #0]
 800b2ba:	b91b      	cbnz	r3, 800b2c4 <_malloc_r+0x3c>
 800b2bc:	4630      	mov	r0, r6
 800b2be:	f000 f83d 	bl	800b33c <_sbrk_r>
 800b2c2:	6020      	str	r0, [r4, #0]
 800b2c4:	4629      	mov	r1, r5
 800b2c6:	4630      	mov	r0, r6
 800b2c8:	f000 f838 	bl	800b33c <_sbrk_r>
 800b2cc:	1c43      	adds	r3, r0, #1
 800b2ce:	d124      	bne.n	800b31a <_malloc_r+0x92>
 800b2d0:	230c      	movs	r3, #12
 800b2d2:	6033      	str	r3, [r6, #0]
 800b2d4:	4630      	mov	r0, r6
 800b2d6:	f000 f842 	bl	800b35e <__malloc_unlock>
 800b2da:	e7e4      	b.n	800b2a6 <_malloc_r+0x1e>
 800b2dc:	680b      	ldr	r3, [r1, #0]
 800b2de:	1b5b      	subs	r3, r3, r5
 800b2e0:	d418      	bmi.n	800b314 <_malloc_r+0x8c>
 800b2e2:	2b0b      	cmp	r3, #11
 800b2e4:	d90f      	bls.n	800b306 <_malloc_r+0x7e>
 800b2e6:	600b      	str	r3, [r1, #0]
 800b2e8:	50cd      	str	r5, [r1, r3]
 800b2ea:	18cc      	adds	r4, r1, r3
 800b2ec:	4630      	mov	r0, r6
 800b2ee:	f000 f836 	bl	800b35e <__malloc_unlock>
 800b2f2:	f104 000b 	add.w	r0, r4, #11
 800b2f6:	1d23      	adds	r3, r4, #4
 800b2f8:	f020 0007 	bic.w	r0, r0, #7
 800b2fc:	1ac3      	subs	r3, r0, r3
 800b2fe:	d0d3      	beq.n	800b2a8 <_malloc_r+0x20>
 800b300:	425a      	negs	r2, r3
 800b302:	50e2      	str	r2, [r4, r3]
 800b304:	e7d0      	b.n	800b2a8 <_malloc_r+0x20>
 800b306:	428c      	cmp	r4, r1
 800b308:	684b      	ldr	r3, [r1, #4]
 800b30a:	bf16      	itet	ne
 800b30c:	6063      	strne	r3, [r4, #4]
 800b30e:	6013      	streq	r3, [r2, #0]
 800b310:	460c      	movne	r4, r1
 800b312:	e7eb      	b.n	800b2ec <_malloc_r+0x64>
 800b314:	460c      	mov	r4, r1
 800b316:	6849      	ldr	r1, [r1, #4]
 800b318:	e7cc      	b.n	800b2b4 <_malloc_r+0x2c>
 800b31a:	1cc4      	adds	r4, r0, #3
 800b31c:	f024 0403 	bic.w	r4, r4, #3
 800b320:	42a0      	cmp	r0, r4
 800b322:	d005      	beq.n	800b330 <_malloc_r+0xa8>
 800b324:	1a21      	subs	r1, r4, r0
 800b326:	4630      	mov	r0, r6
 800b328:	f000 f808 	bl	800b33c <_sbrk_r>
 800b32c:	3001      	adds	r0, #1
 800b32e:	d0cf      	beq.n	800b2d0 <_malloc_r+0x48>
 800b330:	6025      	str	r5, [r4, #0]
 800b332:	e7db      	b.n	800b2ec <_malloc_r+0x64>
 800b334:	20004064 	.word	0x20004064
 800b338:	20004068 	.word	0x20004068

0800b33c <_sbrk_r>:
 800b33c:	b538      	push	{r3, r4, r5, lr}
 800b33e:	4c06      	ldr	r4, [pc, #24]	; (800b358 <_sbrk_r+0x1c>)
 800b340:	2300      	movs	r3, #0
 800b342:	4605      	mov	r5, r0
 800b344:	4608      	mov	r0, r1
 800b346:	6023      	str	r3, [r4, #0]
 800b348:	f7f6 f82a 	bl	80013a0 <_sbrk>
 800b34c:	1c43      	adds	r3, r0, #1
 800b34e:	d102      	bne.n	800b356 <_sbrk_r+0x1a>
 800b350:	6823      	ldr	r3, [r4, #0]
 800b352:	b103      	cbz	r3, 800b356 <_sbrk_r+0x1a>
 800b354:	602b      	str	r3, [r5, #0]
 800b356:	bd38      	pop	{r3, r4, r5, pc}
 800b358:	20004830 	.word	0x20004830

0800b35c <__malloc_lock>:
 800b35c:	4770      	bx	lr

0800b35e <__malloc_unlock>:
 800b35e:	4770      	bx	lr

0800b360 <_init>:
 800b360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b362:	bf00      	nop
 800b364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b366:	bc08      	pop	{r3}
 800b368:	469e      	mov	lr, r3
 800b36a:	4770      	bx	lr

0800b36c <_fini>:
 800b36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b36e:	bf00      	nop
 800b370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b372:	bc08      	pop	{r3}
 800b374:	469e      	mov	lr, r3
 800b376:	4770      	bx	lr
